 //Interneuron synapse

//Copyright(C) 2024 Interneuron Limited

//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program.If not, see<http://www.gnu.org/licenses/>.
ï»¿using System;
using Microsoft.EntityFrameworkCore;
using Interneuron.CareRecord.Model.DomainModels;
using Microsoft.EntityFrameworkCore.Metadata;
using Interneuron.CareRecord.Repository;

namespace Interneuron.CareRecord.Repository.DBModelsContext
{
    public partial class SynapseDBContext
    {
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("citext")
                .HasPostgresExtension("pgcrypto")
                .HasPostgresExtension("tablefunc")
                .HasPostgresExtension("uuid-ossp");

            modelBuilder.Entity<baseview_AneAne>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_ane", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Loshours).HasColumnName("loshours");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AneAnegreaterthan4hours>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_anegreaterthan4hours", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Loshours).HasColumnName("loshours");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AneRecentlydischarged>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ane_recentlydischarged", "baseview");

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.DatePart).HasColumnName("date_part");

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.FirstName)
                    .HasColumnName("first_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Lessthen72).HasColumnName("lessthen72");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.Los).HasColumnName("los");

                entity.Property(e => e.Loshours).HasColumnName("loshours");

                entity.Property(e => e.Losminutes).HasColumnName("losminutes");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PresentingComplaint)
                    .HasColumnName("presenting_complaint")
                    .HasMaxLength(255);

                entity.Property(e => e.RatSee)
                    .HasColumnName("rat_see")
                    .HasMaxLength(255);

                entity.Property(e => e.Referaltime).HasColumnName("referaltime");

                entity.Property(e => e.ReferenceTo)
                    .HasColumnName("reference_to")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Surname)
                    .HasColumnName("surname")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triaged)
                    .HasColumnName("triaged")
                    .HasMaxLength(255);

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");
            });

            modelBuilder.Entity<baseview_AutonomicObservationevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("autonomic_observationevent", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps).HasColumnName("bps");

                entity.Property(e => e.Bpsunits)
                    .HasColumnName("bpsunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Concern)
                    .HasColumnName("concern")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Hr).HasColumnName("hr");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Onoxygen)
                    .HasColumnName("onoxygen")
                    .HasColumnType("character varying");

                entity.Property(e => e.Oxygenlpm).HasColumnName("oxygenlpm");

                entity.Property(e => e.Oxygenperc).HasColumnName("oxygenperc");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse).HasColumnName("pulse");

                entity.Property(e => e.Pulseunits)
                    .HasColumnName("pulseunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp).HasColumnName("resp");

                entity.Property(e => e.Respdistress)
                    .HasColumnName("respdistress")
                    .HasMaxLength(255);

                entity.Property(e => e.Respunits)
                    .HasColumnName("respunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Scaletype)
                    .HasColumnName("scaletype")
                    .HasMaxLength(255);

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2).HasColumnName("spo2");

                entity.Property(e => e.Spo2units)
                    .HasColumnName("spo2units")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp).HasColumnName("temp");

                entity.Property(e => e.Tempunits)
                    .HasColumnName("tempunits")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreAlloperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_alloperation", "baseview");

                entity.Property(e => e.Diagnoses)
                    .HasColumnName("diagnoses")
                    .HasColumnType("json");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Finish).HasColumnName("finish");

                entity.Property(e => e.Hendersonoutcome)
                    .HasColumnName("hendersonoutcome")
                    .HasColumnType("json");

                entity.Property(e => e.Isretrospectivedata).HasColumnName("isretrospectivedata");

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationduration)
                    .HasColumnName("operationduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Operationdurationunit)
                    .HasColumnName("operationdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatuscode)
                    .HasColumnName("operationnotestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatustext)
                    .HasColumnName("operationnotestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationproviders)
                    .HasColumnName("operationproviders")
                    .HasColumnType("json");

                entity.Property(e => e.Operationqualifiercode)
                    .HasColumnName("operationqualifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationqualifiertext)
                    .HasColumnName("operationqualifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidecode)
                    .HasColumnName("operationsidecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidetext)
                    .HasColumnName("operationsidetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedstart).HasColumnName("plannedstart");

                entity.Property(e => e.Procedures)
                    .HasColumnName("procedures")
                    .HasColumnType("json");

                entity.Property(e => e.Reasoncode)
                    .HasColumnName("reasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasontext)
                    .HasColumnName("reasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiercode)
                    .HasColumnName("scheduleidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiertext)
                    .HasColumnName("scheduleidentifiertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Start).HasColumnName("start");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreAssessments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_assessments", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCoreClinicalsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_clinicalsummary", "baseview");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedinfo).HasColumnName("bedinfo");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dob).HasColumnName("dob");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.Info).HasColumnName("info");

                entity.Property(e => e.Lastoperationdate).HasColumnName("lastoperationdate");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Patient).HasColumnName("patient");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Placeholder).HasColumnName("placeholder");

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvCoreImplantdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_implantdata", "baseview");

                entity.Property(e => e.Askforquantity).HasColumnName("askforquantity");

                entity.Property(e => e.Componentidentifier)
                    .HasColumnName("componentidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Defaultquantity).HasColumnName("defaultquantity");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantcomponentgroupId)
                    .HasColumnName("implantcomponentgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantcomponentgroupname)
                    .HasColumnName("implantcomponentgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantcomponentname)
                    .HasColumnName("implantcomponentname")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantmanufacturerId)
                    .HasColumnName("implantmanufacturer_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantsystemId)
                    .HasColumnName("implantsystem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantsystemname)
                    .HasColumnName("implantsystemname")
                    .HasMaxLength(255);

                entity.Property(e => e.Manufacturername)
                    .HasColumnName("manufacturername")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreInpatientappointments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_inpatientappointments", "baseview");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreInpatientencountersforfluidbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_inpatientencountersforfluidbalance", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Encounter).HasColumnName("encounter");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreMaxlastviewedorderaudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_maxlastviewedorderaudit", "baseview");

                entity.Property(e => e.Lastvieweddatetime).HasColumnName("lastvieweddatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOperationdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationdetail", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Finish).HasColumnName("finish");

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationduration)
                    .HasColumnName("operationduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Operationdurationunit)
                    .HasColumnName("operationdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatuscode)
                    .HasColumnName("operationnotestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatustext)
                    .HasColumnName("operationnotestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationqualifiercode)
                    .HasColumnName("operationqualifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationqualifiertext)
                    .HasColumnName("operationqualifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidecode)
                    .HasColumnName("operationsidecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidetext)
                    .HasColumnName("operationsidetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedstart).HasColumnName("plannedstart");

                entity.Property(e => e.Reasoncode)
                    .HasColumnName("reasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasontext)
                    .HasColumnName("reasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiercode)
                    .HasColumnName("scheduleidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiertext)
                    .HasColumnName("scheduleidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Start).HasColumnName("start");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_BvCoreOperationdiagnosis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationdiagnosis", "baseview");

                entity.Property(e => e.DiagnosisId)
                    .HasColumnName("diagnosis_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diagnosiscode)
                    .HasColumnName("diagnosiscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Diagnosistext)
                    .HasColumnName("diagnosistext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOperationjson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationjson", "baseview");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationjson)
                    .HasColumnName("operationjson")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_BvCoreOperationlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationlist", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Anaesthetist).HasColumnName("anaesthetist");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Dob).HasColumnName("dob");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationdate).HasColumnName("operationdate");

                entity.Property(e => e.Operationtext)
                    .HasColumnName("operationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Procedurecode).HasColumnName("procedurecode");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Side).HasColumnName("side");
            });

            modelBuilder.Entity<baseview_BvCoreOperationnotehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationnotehistory", "baseview");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");
            });

            modelBuilder.Entity<baseview_BvCoreOperationnotepatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationnotepatientbanner", "baseview");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Contactdetails).HasColumnName("contactdetails");

                entity.Property(e => e.Currentlyadmittedto).HasColumnName("currentlyadmittedto");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOperationnotepdf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationnotepdf", "baseview");

                entity.Property(e => e.Filename)
                    .HasColumnName("filename")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationnotehistoryId)
                    .HasColumnName("operationnotehistory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pdfblob).HasColumnName("pdfblob");
            });

            modelBuilder.Entity<baseview_BvCoreOperationnotepdfhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationnotepdfhistory", "baseview");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Filename)
                    .HasColumnName("filename")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationnotehistoryId)
                    .HasColumnName("operationnotehistory_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOperationprocedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationprocedure", "baseview");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthesiaminutes)
                    .HasColumnName("anaesthesiaminutes")
                    .HasColumnType("numeric");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimary).HasColumnName("isprimary");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Proceduremodifiercode)
                    .HasColumnName("proceduremodifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduremodifiertext)
                    .HasColumnName("proceduremodifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOperationprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_operationprovider", "baseview");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationproviderId)
                    .HasColumnName("operationprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolecode)
                    .HasColumnName("rolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Roletext)
                    .HasColumnName("roletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreOrdercategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_ordercategory", "baseview");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasColumnType("character varying");

                entity.Property(e => e.Checked).HasColumnName("checked");
            });

            modelBuilder.Entity<baseview_BvCoreOrdernote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_ordernote", "baseview");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.NoteId)
                    .HasColumnName("note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Setid).HasColumnName("setid");
            });

            modelBuilder.Entity<baseview_BvCoreOrderresult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_orderresult", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasColumnType("character varying");

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasColumnType("character varying");

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasColumnType("character varying");

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Resultnote)
                    .HasColumnName("resultnote")
                    .HasColumnType("character varying");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_BvCorePersonorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_personorder", "baseview");

                entity.Property(e => e.Abnormalflagcount).HasColumnName("abnormalflagcount");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasColumnType("character varying");

                entity.Property(e => e.Datetimeoftransaction).HasColumnName("datetimeoftransaction");

                entity.Property(e => e.Fillerordernumber)
                    .HasColumnName("fillerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderingprovider)
                    .HasColumnName("orderingprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordertype)
                    .HasColumnName("ordertype")
                    .HasColumnType("character varying");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Placerordernumber)
                    .HasColumnName("placerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Requesteddatetime).HasColumnName("requesteddatetime");

                entity.Property(e => e.Resultstatus).HasColumnName("resultstatus");

                entity.Property(e => e.Specimendatetime).HasColumnName("specimendatetime");

                entity.Property(e => e.Specimentypecode)
                    .HasColumnName("specimentypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypetext)
                    .HasColumnName("specimentypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangedatetime).HasColumnName("statuschangedatetime");

                entity.Property(e => e.Totalviewcount).HasColumnName("totalviewcount");

                entity.Property(e => e.Universalservicetext)
                    .HasColumnName("universalservicetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCorePersonordercount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_personordercount", "baseview");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Totalordercount).HasColumnName("totalordercount");
            });

            modelBuilder.Entity<baseview_BvCoreProcedureprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_procedureprovider", "baseview");

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureproviderId)
                    .HasColumnName("procedureprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolecode)
                    .HasColumnName("rolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Roletext)
                    .HasColumnName("roletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvCoreTomorrowsoperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_tomorrowsoperation", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Anaesthetist).HasColumnName("anaesthetist");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Dob).HasColumnName("dob");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationdate).HasColumnName("operationdate");

                entity.Property(e => e.Operationtext)
                    .HasColumnName("operationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Procedurecode).HasColumnName("procedurecode");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Side).HasColumnName("side");
            });

            modelBuilder.Entity<baseview_BvCoreYesterdaysoperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bv_core_yesterdaysoperation", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Anaesthetist).HasColumnName("anaesthetist");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Dob).HasColumnName("dob");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationdate).HasColumnName("operationdate");

                entity.Property(e => e.Operationtext)
                    .HasColumnName("operationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Procedurecode).HasColumnName("procedurecode");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Side).HasColumnName("side");
            });

            modelBuilder.Entity<baseview_BvassessmentAllassessmentdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_allassessmentdetails", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentdata).HasColumnName("assessmentdata");

                entity.Property(e => e.AssessmentdetailId)
                    .HasColumnName("assessmentdetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentversionid)
                    .HasColumnName("assessmentversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isassessmentamended).HasColumnName("isassessmentamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectiontemplateversionid)
                    .HasColumnName("sectiontemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentAllassessments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_allassessments", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentAllassessmentwithredandamber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_allassessmentwithredandamber", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Section1Impairedimmunity).HasColumnName("section1_impairedimmunity");

                entity.Property(e => e.Section1Indwellinglinesbrokenskin).HasColumnName("section1_indwellinglinesbrokenskin");

                entity.Property(e => e.Section1Recenttraumasurgeryinvasiveprocedure).HasColumnName("section1_recenttraumasurgeryinvasiveprocedure");

                entity.Property(e => e.Section2Brain).HasColumnName("section2_brain");

                entity.Property(e => e.Section2Impairedimmunity).HasColumnName("section2_impairedimmunity");

                entity.Property(e => e.Section2Indwellingdevice).HasColumnName("section2_indwellingdevice");

                entity.Property(e => e.Section2Other).HasColumnName("section2_other");

                entity.Property(e => e.Section2Respiratory).HasColumnName("section2_respiratory");

                entity.Property(e => e.Section2Skinjointwound).HasColumnName("section2_skinjointwound");

                entity.Property(e => e.Section2Surgical).HasColumnName("section2_surgical");

                entity.Property(e => e.Section2Urine).HasColumnName("section2_urine");

                entity.Property(e => e.Section3Bradycardia).HasColumnName("section3_bradycardia");

                entity.Property(e => e.Section3Doesnwakewhenrousedwonstayawake).HasColumnName("section3_doesnwakewhenrousedwonstayawake");

                entity.Property(e => e.Section3Ifunder3monthstemperature).HasColumnName("section3_ifunder3monthstemperature");

                entity.Property(e => e.Section3Looksveryunwelltohealthcareprofessional).HasColumnName("section3_looksveryunwelltohealthcareprofessional");

                entity.Property(e => e.Section3Nonblanchingrashmottledashencyanotic).HasColumnName("section3_nonblanchingrashmottledashencyanotic");

                entity.Property(e => e.Section3Severetachycardia).HasColumnName("section3_severetachycardia");

                entity.Property(e => e.Section3Severetachypnoea).HasColumnName("section3_severetachypnoea");

                entity.Property(e => e.Section3Temperature).HasColumnName("section3_temperature");

                entity.Property(e => e.Section3Weakhighpitchedorcontinuouscry).HasColumnName("section3_weakhighpitchedorcontinuouscry");

                entity.Property(e => e.Section4Capillaryrefilltime3seconds).HasColumnName("section4_capillaryrefilltime3seconds");

                entity.Property(e => e.Section4Immunocompromised).HasColumnName("section4_immunocompromised");

                entity.Property(e => e.Section4Legpainorcoldextremities).HasColumnName("section4_legpainorcoldextremities");

                entity.Property(e => e.Section4Moderatetachycardia).HasColumnName("section4_moderatetachycardia");

                entity.Property(e => e.Section4Moderatetachypnoea).HasColumnName("section4_moderatetachypnoea");

                entity.Property(e => e.Section4Nasalflaring).HasColumnName("section4_nasalflaring");

                entity.Property(e => e.Section4Notrespondingnormallynosmile).HasColumnName("section4_notrespondingnormallynosmile");

                entity.Property(e => e.Section4Reducedactivityverysleepy).HasColumnName("section4_reducedactivityverysleepy");

                entity.Property(e => e.Section4Reducedurineoutput).HasColumnName("section4_reducedurineoutput");

                entity.Property(e => e.Section4Spo2lessthen92perorincreasedo2requirement).HasColumnName("section4_spo2lessthen92perorincreasedo2requirement");

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Selection).HasColumnName("selection");

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_BvassessmentAlllatestassessmentdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_alllatestassessmentdetails", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentdata).HasColumnName("assessmentdata");

                entity.Property(e => e.AssessmentdetailId)
                    .HasColumnName("assessmentdetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentversionid)
                    .HasColumnName("assessmentversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isassessmentamended).HasColumnName("isassessmentamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectiontemplateversionid)
                    .HasColumnName("sectiontemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentAlllatestassessments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_alllatestassessments", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentAlllatestassessmentstasks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_alllatestassessmentstasks", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmentdetailId)
                    .HasColumnName("assessmentdetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttaskId)
                    .HasColumnName("assessmenttask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentversionid)
                    .HasColumnName("assessmentversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SepsistaskId)
                    .HasColumnName("sepsistask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sepsistasktemplateversionid)
                    .HasColumnName("sepsistasktemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Taskdata).HasColumnName("taskdata");
            });

            modelBuilder.Entity<baseview_BvassessmentAlltopversionassessments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_alltopversionassessments", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentAlltopversionassessmentswithtaskcount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_alltopversionassessmentswithtaskcount", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmenttypedisplayname)
                    .HasColumnName("assessmenttypedisplayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assessmenttypename)
                    .HasColumnName("assessmenttypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Completedtaskcnt).HasColumnName("completedtaskcnt");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtypeheadertext)
                    .HasColumnName("formtypeheadertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Formtypename)
                    .HasColumnName("formtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Totaltaskcnt).HasColumnName("totaltaskcnt");

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_BvassessmentLatestbmi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_latestbmi", "baseview");

                entity.Property(e => e.LatestBmiRank).HasColumnName("latest_bmi_rank");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvassessmentLatestcancerrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_latestcancerrecord", "baseview");

                entity.Property(e => e.LatestAssessmentsRank).HasColumnName("latest_assessments_rank");

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvassessmentLatestplateletcount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_latestplateletcount", "baseview");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowNumber).HasColumnName("row_number");
            });

            modelBuilder.Entity<baseview_BvassessmentLatestvtehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_latestvtehistory", "baseview");

                entity.Property(e => e.LatestAssessmentsRank).HasColumnName("latest_assessments_rank");

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_BvassessmentRedandamberreadjson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_redandamberreadjson", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentid1)
                    .HasColumnName("assessmentid")
                    .HasMaxLength(255);

                entity.Property(e => e.Section1Impairedimmunity).HasColumnName("section1_impairedimmunity");

                entity.Property(e => e.Section1Indwellinglinesbrokenskin).HasColumnName("section1_indwellinglinesbrokenskin");

                entity.Property(e => e.Section1Recenttraumasurgeryinvasiveprocedure).HasColumnName("section1_recenttraumasurgeryinvasiveprocedure");

                entity.Property(e => e.Section2Brain).HasColumnName("section2_brain");

                entity.Property(e => e.Section2Impairedimmunity).HasColumnName("section2_impairedimmunity");

                entity.Property(e => e.Section2Indwellingdevice).HasColumnName("section2_indwellingdevice");

                entity.Property(e => e.Section2Other).HasColumnName("section2_other");

                entity.Property(e => e.Section2Respiratory).HasColumnName("section2_respiratory");

                entity.Property(e => e.Section2Skinjointwound).HasColumnName("section2_skinjointwound");

                entity.Property(e => e.Section2Surgical).HasColumnName("section2_surgical");

                entity.Property(e => e.Section2Urine).HasColumnName("section2_urine");

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionname2)
                    .HasColumnName("sectionname2")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectionone).HasColumnName("selectionone");

                entity.Property(e => e.Selectiontwo).HasColumnName("selectiontwo");
            });

            modelBuilder.Entity<baseview_BvassessmentResultcodemapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bvassessment_resultcodemapping", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Creationdatetime).HasColumnName("creationdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitycode)
                    .HasColumnName("healthcarefacilitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiercodingsystem)
                    .HasColumnName("observationidentifiercodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationnotes).HasColumnName("observationnotes");

                entity.Property(e => e.Observationresultstatus)
                    .HasColumnName("observationresultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationsubid)
                    .HasColumnName("observationsubid")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportexaminationdate).HasColumnName("reportexaminationdate");

                entity.Property(e => e.Reportstatuscode)
                    .HasColumnName("reportstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportstatustext)
                    .HasColumnName("reportstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttitle)
                    .HasColumnName("reporttitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypecode)
                    .HasColumnName("reporttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypetext)
                    .HasColumnName("reporttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowNumber).HasColumnName("row_number");

                entity.Property(e => e.Scantype)
                    .HasColumnName("scantype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Signedby)
                    .HasColumnName("signedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Unitscode)
                    .HasColumnName("unitscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CarerecordDemographics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_demographics", "baseview");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CarerecordObservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_observations", "baseview");

                entity.Property(e => e.Bowelsopen)
                    .HasColumnName("bowelsopen")
                    .HasColumnType("json");

                entity.Property(e => e.Concernsaboutpatient)
                    .HasColumnName("concernsaboutpatient")
                    .HasColumnType("json");

                entity.Property(e => e.Consciousness)
                    .HasColumnName("consciousness")
                    .HasColumnType("json");

                entity.Property(e => e.Couldbeinfection)
                    .HasColumnName("couldbeinfection")
                    .HasColumnType("json");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Device)
                    .HasColumnName("device")
                    .HasColumnType("json");

                entity.Property(e => e.Dfnconcern)
                    .HasColumnName("dfnconcern")
                    .HasColumnType("json");

                entity.Property(e => e.Diastolicbloodpressure)
                    .HasColumnName("diastolicbloodpressure")
                    .HasColumnType("json");

                entity.Property(e => e.Earlywarningscore)
                    .HasColumnName("earlywarningscore")
                    .HasColumnType("json");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalatedtowhom)
                    .HasColumnName("escalatedtowhom")
                    .HasColumnType("json");

                entity.Property(e => e.Escalationofcare)
                    .HasColumnName("escalationofcare")
                    .HasColumnType("json");

                entity.Property(e => e.Glucose)
                    .HasColumnName("glucose")
                    .HasColumnType("json");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("json");

                entity.Property(e => e.Inspireoxygenlitrepermin)
                    .HasColumnName("inspireoxygenlitrepermin")
                    .HasColumnType("json");

                entity.Property(e => e.Inspireoxygenpercentage)
                    .HasColumnName("inspireoxygenpercentage")
                    .HasColumnType("json");

                entity.Property(e => e.Isonoxygen)
                    .HasColumnName("isonoxygen")
                    .HasColumnType("json");

                entity.Property(e => e.Ispatientsick)
                    .HasColumnName("ispatientsick")
                    .HasColumnType("json");

                entity.Property(e => e.Monitoring)
                    .HasColumnName("monitoring")
                    .HasColumnType("json");

                entity.Property(e => e.Monitoringcomments)
                    .HasColumnName("monitoringcomments")
                    .HasColumnType("json");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Oxygensaturations)
                    .HasColumnName("oxygensaturations")
                    .HasColumnType("json");

                entity.Property(e => e.Painscoreatrest)
                    .HasColumnName("painscoreatrest")
                    .HasColumnType("json");

                entity.Property(e => e.Painscorewithmovement)
                    .HasColumnName("painscorewithmovement")
                    .HasColumnType("json");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasColumnType("json");

                entity.Property(e => e.Reasonfornotescalating)
                    .HasColumnName("reasonfornotescalating")
                    .HasColumnType("json");

                entity.Property(e => e.Respirations)
                    .HasColumnName("respirations")
                    .HasColumnType("json");

                entity.Property(e => e.Respiratorydistress)
                    .HasColumnName("respiratorydistress")
                    .HasColumnType("json");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasMaxLength(255);

                entity.Property(e => e.Systolicbloodpressure)
                    .HasColumnName("systolicbloodpressure")
                    .HasColumnType("json");

                entity.Property(e => e.Temperature)
                    .HasColumnName("temperature")
                    .HasColumnType("json");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_CarerecordResults>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carerecord_results", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<baseview_ClinicalsummaryClinicalsummarylist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_clinicalsummarylist", "baseview");

                entity.Property(e => e.Admissiondate).HasColumnName("admissiondate");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalsummarystatus)
                    .HasColumnName("clinicalsummarystatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedate).HasColumnName("dischargedate");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Summarydatetime).HasColumnName("summarydatetime");

                entity.Property(e => e.Taskcount).HasColumnName("taskcount");
            });

            modelBuilder.Entity<baseview_ClinicalsummaryClinicalsummarynotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_clinicalsummarynotes", "baseview");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummarynotesId)
                    .HasColumnName("clinicalsummarynotes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryClinicalsummarystatuses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_clinicalsummarystatuses", "baseview");

                entity.Property(e => e.ClinicalsummarystatusesId)
                    .HasColumnName("clinicalsummarystatuses_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryCurrentinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_currentinpatients", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryDischargeplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_dischargeplan", "baseview");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DischargeplanId)
                    .HasColumnName("dischargeplan_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargeplannotes).HasColumnName("dischargeplannotes");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryGetdiagnoses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_getdiagnoses", "baseview");

                entity.Property(e => e.Clinicalstatus)
                    .HasColumnName("clinicalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateeffectiveperiod)
                    .HasColumnName("dateeffectiveperiod")
                    .HasMaxLength(255);

                entity.Property(e => e.DiagnosisId)
                    .HasColumnName("diagnosis_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedatestring)
                    .HasColumnName("effectivedatestring")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasColumnType("character varying");

                entity.Property(e => e.Isdateapproximate)
                    .HasColumnName("isdateapproximate")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedby)
                    .HasColumnName("reportedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Resolveddate).HasColumnName("resolveddate");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryGetlatestencounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_getlatestencounter", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryGetprocedures>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_getprocedures", "baseview");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateeffectiveperiod)
                    .HasColumnName("dateeffectiveperiod")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedatestring)
                    .HasColumnName("effectivedatestring")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdateapproximate)
                    .HasColumnName("isdateapproximate")
                    .HasMaxLength(255);

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Performedby)
                    .HasColumnName("performedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Recordeddate)
                    .HasColumnName("recordeddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryGettasks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_gettasks", "baseview");

                entity.Property(e => e.Allocateddatetime)
                    .HasColumnName("allocateddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Allocatedto)
                    .HasColumnName("allocatedto")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationtype)
                    .HasColumnName("correlationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Duedate)
                    .HasColumnName("duedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.Ownerassigneddatetime)
                    .HasColumnName("ownerassigneddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.PriorityNum).HasColumnName("priority_num");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreatedby)
                    .HasColumnName("taskcreatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreateddatetime)
                    .HasColumnName("taskcreateddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Taskdetails).HasColumnName("taskdetails");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryInvestigation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_investigation", "baseview");

                entity.Property(e => e.Clinicalinvestigationnotes).HasColumnName("clinicalinvestigationnotes");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.InvestigationId)
                    .HasColumnName("investigation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryLabresults>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_labresults", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdate).HasColumnName("observationdate");

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationtime).HasColumnName("observationtime");

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rangelevel).HasColumnName("rangelevel");

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryLatestcrpresult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_latestcrpresult", "baseview");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Formattedobservationdatetime).HasColumnName("formattedobservationdatetime");

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryLatestheartrateandtemperature>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_latestheartrateandtemperature", "baseview");

                entity.Property(e => e.Abnormalflag).HasColumnName("abnormalflag");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formattedtimerecorded).HasColumnName("formattedtimerecorded");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryLatestmicrobiologyreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_latestmicrobiologyreport", "baseview");

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.Formattedreportissueddatetime).HasColumnName("formattedreportissueddatetime");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportissueddatetime).HasColumnName("reportissueddatetime");

                entity.Property(e => e.Rn).HasColumnName("rn");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ClinicalsummaryTasklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("clinicalsummary_tasklist", "baseview");

                entity.Property(e => e.Allocatedto)
                    .HasColumnName("allocatedto")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Duedate)
                    .HasColumnName("duedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreatedby)
                    .HasColumnName("taskcreatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreateddatetime)
                    .HasColumnName("taskcreateddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Taskdetails).HasColumnName("taskdetails");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_CofAppointmentswithlookups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cof_appointmentswithlookups", "baseview");

                entity.Property(e => e.Appointmentcomments)
                    .HasColumnName("appointmentcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreasontext)
                    .HasColumnName("appointmentreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttypetext)
                    .HasColumnName("appointmenttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrartext)
                    .HasColumnName("canbewithregistrartext")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAppointmentId)
                    .HasColumnName("cof_appointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentschedule)
                    .HasColumnName("nextappointmentschedule")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentscheduletext)
                    .HasColumnName("nextappointmentscheduletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowedtext)
                    .HasColumnName("overbookingallowedtext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Prioritytext)
                    .HasColumnName("prioritytext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreAdministermedication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_administermedication", "entitystorematerialised");

                entity.HasIndex(e => e.AdministermedicationId)
                    .HasDatabaseName("core_administermedication_administermedication_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_administermedication__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_administermedication__sequenceid_idx");

                entity.Property(e => e.Actgroupcode)
                    .HasColumnName("actgroupcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actgroupname)
                    .HasColumnName("actgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.AdministermedicationId)
                    .HasColumnName("administermedication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Bnf)
                    .HasColumnName("bnf")
                    .HasMaxLength(255);

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Customgroup)
                    .HasColumnName("customgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Defineddailydose)
                    .HasColumnName("defineddailydose")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Doseform)
                    .HasColumnName("doseform")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformsize)
                    .HasColumnName("doseformsize")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformunitofmeasure)
                    .HasColumnName("doseformunitofmeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformunits)
                    .HasColumnName("doseformunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweight)
                    .HasColumnName("doseperweight")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweightunit)
                    .HasColumnName("doseperweightunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Form)
                    .HasColumnName("form")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Genericname)
                    .HasColumnName("genericname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Isblacktriangle).HasColumnName("isblacktriangle");

                entity.Property(e => e.Isclinicaltrial).HasColumnName("isclinicaltrial");

                entity.Property(e => e.Iscontrolled).HasColumnName("iscontrolled");

                entity.Property(e => e.Iscritical).HasColumnName("iscritical");

                entity.Property(e => e.Isexpensive).HasColumnName("isexpensive");

                entity.Property(e => e.Isformulary).HasColumnName("isformulary");

                entity.Property(e => e.Ishighalert).HasColumnName("ishighalert");

                entity.Property(e => e.Isprimary).HasColumnName("isprimary");

                entity.Property(e => e.Isunlicenced).HasColumnName("isunlicenced");

                entity.Property(e => e.Markedmodifier)
                    .HasColumnName("markedmodifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperday)
                    .HasColumnName("maxdoseperday")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperdayunit)
                    .HasColumnName("maxdoseperdayunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperweek)
                    .HasColumnName("maxdoseperweek")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperweekunit)
                    .HasColumnName("maxdoseperweekunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationadministrationid)
                    .HasColumnName("medicationadministrationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationtype)
                    .HasColumnName("medicationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedreleasehrs)
                    .HasColumnName("modifiedreleasehrs")
                    .HasColumnType("numeric");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Personid)
                    .HasColumnName("personid")
                    .HasMaxLength(255);

                entity.Property(e => e.Producttype)
                    .HasColumnName("producttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewreminderdays)
                    .HasColumnName("reviewreminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Roundingfactor)
                    .HasColumnName("roundingfactor")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreAdministermedicationcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_administermedicationcodes", "entitystorematerialised");

                entity.HasIndex(e => e.AdministermedicationcodesId)
                    .HasDatabaseName("core_administermedicationcodes_administermedicationcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_administermedicationcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_administermedicationcodes__sequenceid_idx");

                entity.Property(e => e.AdministermedicationcodesId)
                    .HasColumnName("administermedicationcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Administermedicationid)
                    .HasColumnName("administermedicationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Medicationadministrationid)
                    .HasColumnName("medicationadministrationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminology)
                    .HasColumnName("terminology")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreAdministermedicationingredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_administermedicationingredients", "entitystorematerialised");

                entity.HasIndex(e => e.AdministermedicationingredientsId)
                    .HasDatabaseName("core_administermedicationingr_administermedicationingredien_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_administermedicationingredients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_administermedicationingredients__sequenceid_idx");

                entity.Property(e => e.Administermedicationid)
                    .HasColumnName("administermedicationid")
                    .HasMaxLength(255);

                entity.Property(e => e.AdministermedicationingredientsId)
                    .HasColumnName("administermedicationingredients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Isprimaryingredient).HasColumnName("isprimaryingredient");

                entity.Property(e => e.Medicationadministrationid)
                    .HasColumnName("medicationadministrationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreAllergyintolerance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_allergyintolerance", "entitystorematerialised");

                entity.HasIndex(e => e.AllergyintoleranceId)
                    .HasDatabaseName("core_allergyintolerance_allergyintolerance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_allergyintolerance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_allergyintolerance__sequenceid_idx");

                entity.Property(e => e.Allergentype)
                    .HasColumnName("allergentype")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergyconcept).HasColumnName("allergyconcept");

                entity.Property(e => e.AllergyintoleranceId)
                    .HasColumnName("allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergynotes).HasColumnName("allergynotes");

                entity.Property(e => e.Assertedby)
                    .HasColumnName("assertedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Asserteddatetime)
                    .HasColumnName("asserteddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcode)
                    .HasColumnName("causativeagentcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcodesystem)
                    .HasColumnName("causativeagentcodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentdescription)
                    .HasColumnName("causativeagentdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Cliinicialstatusdatetime)
                    .HasColumnName("cliinicialstatusdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Clinicalstatusby)
                    .HasColumnName("clinicalstatusby")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatusvalue)
                    .HasColumnName("clinicalstatusvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.Displaywarning)
                    .HasColumnName("displaywarning")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Lastoccurencedate).HasColumnName("lastoccurencedate");

                entity.Property(e => e.Lastupdatedrecorddatetime)
                    .HasColumnName("lastupdatedrecorddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Manifestationnotes).HasColumnName("manifestationnotes");

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reactionconcepts).HasColumnName("reactionconcepts");

                entity.Property(e => e.Reactiontext).HasColumnName("reactiontext");

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordeddatetime)
                    .HasColumnName("recordeddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reportedbydatetime)
                    .HasColumnName("reportedbydatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedbygroup).HasColumnName("reportedbygroup");

                entity.Property(e => e.Reportedbyname)
                    .HasColumnName("reportedbyname")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreAssessment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_assessment", "entitystorematerialised");

                entity.HasIndex(e => e.AssessmentId)
                    .HasDatabaseName("core_assessment_assessment_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_assessment__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_assessment__sequenceid_idx");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonfordelete).HasColumnName("reasonfordelete");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourceofinvocation)
                    .HasColumnName("sourceofinvocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskformsectionid)
                    .HasColumnName("taskformsectionid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreAssessmentdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_assessmentdetail", "entitystorematerialised");

                entity.HasIndex(e => e.AssessmentdetailId)
                    .HasDatabaseName("core_assessmentdetail_assessmentdetail_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_assessmentdetail__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_assessmentdetail__sequenceid_idx");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentdata).HasColumnName("assessmentdata");

                entity.Property(e => e.AssessmentdetailId)
                    .HasColumnName("assessmentdetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentversionid)
                    .HasColumnName("assessmentversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectiontemplateversionid)
                    .HasColumnName("sectiontemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreAssessmenttask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_assessmenttask", "entitystorematerialised");

                entity.HasIndex(e => e.AssessmenttaskId)
                    .HasDatabaseName("core_assessmenttask_assessmenttask_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_assessmenttask__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_assessmenttask__sequenceid_idx");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmentdetailId)
                    .HasColumnName("assessmentdetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AssessmenttaskId)
                    .HasColumnName("assessmenttask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentversionid)
                    .HasColumnName("assessmentversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SepsistaskId)
                    .HasColumnName("sepsistask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sepsistasktemplateversionid)
                    .HasColumnName("sepsistasktemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskdata).HasColumnName("taskdata");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreCarerecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_carerecord", "entitystorematerialised");

                entity.HasIndex(e => e.CarerecordId)
                    .HasDatabaseName("core_carerecord_carerecord_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_carerecord__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_carerecord__sequenceid_idx");

                entity.Property(e => e.CarerecordId)
                    .HasColumnName("carerecord_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreClinicalsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_clinicalsummary", "entitystorematerialised");

                entity.HasIndex(e => e.ClinicalsummaryId)
                    .HasDatabaseName("core_clinicalsummary_clinicalsummary_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_clinicalsummary__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_clinicalsummary__sequenceid_idx");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreClinicalsummarynotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_clinicalsummarynotes", "entitystorematerialised");

                entity.HasIndex(e => e.ClinicalsummarynotesId)
                    .HasDatabaseName("core_clinicalsummarynotes_clinicalsummarynotes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_clinicalsummarynotes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_clinicalsummarynotes__sequenceid_idx");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummarynotesId)
                    .HasColumnName("clinicalsummarynotes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreContinuousinfusion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_continuousinfusion", "entitystorematerialised");

                entity.HasIndex(e => e.ContinuousinfusionId)
                    .HasDatabaseName("core_continuousinfusion_continuousinfusion_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_continuousinfusion__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_continuousinfusion__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Completioncomments)
                    .HasColumnName("completioncomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Finishdatetime).HasColumnName("finishdatetime");

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Flowrateunit)
                    .HasColumnName("flowrateunit")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Islineremovedoncompletion).HasColumnName("islineremovedoncompletion");

                entity.Property(e => e.Ispaused).HasColumnName("ispaused");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Pumpnumber)
                    .HasColumnName("pumpnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforpause)
                    .HasColumnName("reasonforpause")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RoutetypeId)
                    .HasColumnName("routetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Totaladministeredvolume)
                    .HasColumnName("totaladministeredvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalremainingvolume)
                    .HasColumnName("totalremainingvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalvolume)
                    .HasColumnName("totalvolume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreContinuousinfusionevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_continuousinfusionevent", "entitystorematerialised");

                entity.HasIndex(e => e.ContinuousinfusioneventId)
                    .HasDatabaseName("core_continuousinfusionevent_continuousinfusionevent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_continuousinfusionevent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_continuousinfusionevent__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusioneventId)
                    .HasColumnName("continuousinfusionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Deletecorrelationid)
                    .HasColumnName("deletecorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreContinuousinfusionfluidloss>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_continuousinfusionfluidloss", "entitystorematerialised");

                entity.HasIndex(e => e.ContinuousinfusionfluidlossId)
                    .HasDatabaseName("core_continuousinfusionfluidl_continuousinfusionfluidloss_i_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_continuousinfusionfluidloss__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_continuousinfusionfluidloss__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionfluidlossId)
                    .HasColumnName("continuousinfusionfluidloss_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenamended).HasColumnName("hasbeenamended");

                entity.Property(e => e.Isremoved).HasColumnName("isremoved");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreContinuousinfusionvalidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_continuousinfusionvalidation", "entitystorematerialised");

                entity.HasIndex(e => e.ContinuousinfusionvalidationId)
                    .HasDatabaseName("core_continuousinfusionvalida_continuousinfusionvalidation__idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_continuousinfusionvalidation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_continuousinfusionvalidation__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Administeredvolume)
                    .HasColumnName("administeredvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Calculatedvolume)
                    .HasColumnName("calculatedvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Checkedline).HasColumnName("checkedline");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionvalidationId)
                    .HasColumnName("continuousinfusionvalidation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Isremoved).HasColumnName("isremoved");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Pumpnumber)
                    .HasColumnName("pumpnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDiagnosis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_diagnosis", "entitystorematerialised");

                entity.HasIndex(e => e.DiagnosisId)
                    .HasDatabaseName("core_diagnosis_diagnosis_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_diagnosis__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_diagnosis__sequenceid_idx");

                entity.Property(e => e.Clinicalstatus)
                    .HasColumnName("clinicalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateeffectiveperiod)
                    .HasColumnName("dateeffectiveperiod")
                    .HasMaxLength(255);

                entity.Property(e => e.DiagnosisId)
                    .HasColumnName("diagnosis_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diagnosiscode)
                    .HasColumnName("diagnosiscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Diagnosistext)
                    .HasColumnName("diagnosistext")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedatestring)
                    .HasColumnName("effectivedatestring")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Isdateapproximate)
                    .HasColumnName("isdateapproximate")
                    .HasMaxLength(255);

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reportedby)
                    .HasColumnName("reportedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Resolveddate).HasColumnName("resolveddate");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreDischargeplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_dischargeplan", "entitystorematerialised");

                entity.HasIndex(e => e.DischargeplanId)
                    .HasDatabaseName("core_dischargeplan_dischargeplan_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_dischargeplan__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_dischargeplan__sequenceid_idx");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DischargeplanId)
                    .HasColumnName("dischargeplan_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargeplannotes).HasColumnName("dischargeplannotes");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDocuments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documents", "entitystorematerialised");

                entity.HasIndex(e => e.DocumentsId)
                    .HasDatabaseName("core_documents_documents_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_documents__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_documents__sequenceid_idx");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Documentname)
                    .HasColumnName("documentname")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatuscode)
                    .HasColumnName("documentstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Documentstatustext)
                    .HasColumnName("documentstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcode)
                    .HasColumnName("formatcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcodetext)
                    .HasColumnName("formatcodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacility)
                    .HasColumnName("healthcarefacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifieddatetime).HasColumnName("lastmodifieddatetime");

                entity.Property(e => e.Lastmodifieddatetimeoffset)
                    .HasColumnName("lastmodifieddatetimeoffset")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mimetype)
                    .HasColumnName("mimetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Mimetypetext)
                    .HasColumnName("mimetypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typecodetext)
                    .HasColumnName("typecodetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreDocumentsrepository>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_documentsrepository", "entitystorematerialised");

                entity.HasIndex(e => e.DocumentsrepositoryId)
                    .HasDatabaseName("core_documentsrepository_documentsrepository_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_documentsrepository__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_documentsrepository__sequenceid_idx");

                entity.Property(e => e.Content)
                    .HasColumnName("content")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DocumentsId)
                    .HasColumnName("documents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentsrepositoryId)
                    .HasColumnName("documentsrepository_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_dose", "entitystorematerialised");

                entity.HasIndex(e => e.DoseId)
                    .HasDatabaseName("core_dose_dose_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_dose__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_dose__sequenceid_idx");

                entity.Property(e => e.Additionaladministrationcomment).HasColumnName("additionaladministrationcomment");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Continuityid)
                    .HasColumnName("continuityid")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Descriptivedose)
                    .HasColumnName("descriptivedose")
                    .HasMaxLength(255);

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseenddatatime).HasColumnName("doseenddatatime");

                entity.Property(e => e.Dosemeasure)
                    .HasColumnName("dosemeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosesize)
                    .HasColumnName("dosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosesizerangemax)
                    .HasColumnName("dosesizerangemax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosestartdatetime).HasColumnName("dosestartdatetime");

                entity.Property(e => e.Dosestrength)
                    .HasColumnName("dosestrength")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosestrengthrangemax)
                    .HasColumnName("dosestrengthrangemax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosestrengthunits)
                    .HasColumnName("dosestrengthunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosetype)
                    .HasColumnName("dosetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseunit)
                    .HasColumnName("doseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Infusionduration)
                    .HasColumnName("infusionduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionrate)
                    .HasColumnName("infusionrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Isadditionaladministration).HasColumnName("isadditionaladministration");

                entity.Property(e => e.Isbolus).HasColumnName("isbolus");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorrangemax)
                    .HasColumnName("strengthdenominatorrangemax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorrangemax)
                    .HasColumnName("strengthneumeratorrangemax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrateddoseconfirmedby)
                    .HasColumnName("titrateddoseconfirmedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrateddoseconfirmedon).HasColumnName("titrateddoseconfirmedon");

                entity.Property(e => e.Titration).HasColumnName("titration");
            });

            modelBuilder.Entity<entitystorematerialised_CoreDoseevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_doseevents", "entitystorematerialised");

                entity.HasIndex(e => e.DoseeventsId)
                    .HasDatabaseName("core_doseevents_doseevents_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_doseevents__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_doseevents__sequenceid_idx");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosedatetime).HasColumnName("dosedatetime");

                entity.Property(e => e.DoseeventsId)
                    .HasColumnName("doseevents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseunit)
                    .HasColumnName("doseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Grouptitration).HasColumnName("grouptitration");

                entity.Property(e => e.Iscancelled).HasColumnName("iscancelled");

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrateddescriptivedose)
                    .HasColumnName("titrateddescriptivedose")
                    .HasMaxLength(1000);

                entity.Property(e => e.Titrateddosesize)
                    .HasColumnName("titrateddosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrateddoseunit)
                    .HasColumnName("titrateddoseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Titratedstrengthdenominator)
                    .HasColumnName("titratedstrengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titratedstrengthdenominatorunits)
                    .HasColumnName("titratedstrengthdenominatorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titratedstrengthneumerator)
                    .HasColumnName("titratedstrengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titratedstrengthneumeratorunits)
                    .HasColumnName("titratedstrengthneumeratorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titratedtime).HasColumnName("titratedtime");

                entity.Property(e => e.Titrateduntildatetime).HasColumnName("titrateduntildatetime");
            });

            modelBuilder.Entity<entitystorematerialised_CoreEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_encounter", "entitystorematerialised");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissiontypecode)
                    .HasColumnName("admissiontypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admissiontypetext)
                    .HasColumnName("admissiontypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitfromcode)
                    .HasColumnName("admitfromcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitfromtext)
                    .HasColumnName("admitfromtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Alternatevisitnumber)
                    .HasColumnName("alternatevisitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Ambulatorystatuscode)
                    .HasColumnName("ambulatorystatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ambulatorystatustext)
                    .HasColumnName("ambulatorystatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorfamilyname)
                    .HasColumnName("consultingdoctorfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorgivemname)
                    .HasColumnName("consultingdoctorgivemname")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorprefix)
                    .HasColumnName("consultingdoctorprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedispositiontext)
                    .HasColumnName("dischargedispositiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargelocationcode)
                    .HasColumnName("dischargelocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargelocationtext)
                    .HasColumnName("dischargelocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalservicecode)
                    .HasColumnName("hospitalservicecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalservicetext)
                    .HasColumnName("hospitalservicetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Interpreterrequired)
                    .HasColumnName("interpreterrequired")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorpatientlocationcode)
                    .HasColumnName("priorpatientlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorpatientlocationfacility)
                    .HasColumnName("priorpatientlocationfacility")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorpatientlocationtext)
                    .HasColumnName("priorpatientlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referringdoctorfamilyname)
                    .HasColumnName("referringdoctorfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorgivenname)
                    .HasColumnName("referringdoctorgivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorprefix)
                    .HasColumnName("referringdoctorprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Transferreasoncode)
                    .HasColumnName("transferreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Transferreasontext)
                    .HasColumnName("transferreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalanceescalation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceescalation", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalanceescalationId)
                    .HasDatabaseName("core_fluidbalanceescalation_fluidbalanceescalation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalanceescalation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalanceescalation__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Escalatedtowhom)
                    .HasColumnName("escalatedtowhom")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceescalationId)
                    .HasColumnName("fluidbalanceescalation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceintakeoutputId)
                    .HasColumnName("fluidbalanceintakeoutput_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Isescalationofcareamended).HasColumnName("isescalationofcareamended");

                entity.Property(e => e.Isobservationfrequencyamended).HasColumnName("isobservationfrequencyamended");

                entity.Property(e => e.Issbaraccepted).HasColumnName("issbaraccepted");

                entity.Property(e => e.Monitoringcomments)
                    .HasColumnName("monitoringcomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfornotescalating)
                    .HasColumnName("reasonfornotescalating")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalanceintakeoutput>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalanceintakeoutput", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalanceintakeoutputId)
                    .HasDatabaseName("core_fluidbalanceintakeoutput_fluidbalanceintakeoutput_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalanceintakeoutput__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalanceintakeoutput__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusioneventId)
                    .HasColumnName("continuousinfusionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionvalidationId)
                    .HasColumnName("continuousinfusionvalidation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Expectedvolume)
                    .HasColumnName("expectedvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.FluidbalanceintakeoutputId)
                    .HasColumnName("fluidbalanceintakeoutput_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceiotypeId)
                    .HasColumnName("fluidbalanceiotype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidcapturedeviceId)
                    .HasColumnName("fluidcapturedevice_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Isintake).HasColumnName("isintake");

                entity.Property(e => e.Isremoved).HasColumnName("isremoved");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherroutetype)
                    .HasColumnName("otherroutetype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personweight)
                    .HasColumnName("personweight")
                    .HasColumnType("numeric");

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforremoval)
                    .HasColumnName("reasonforremoval")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RoutetypeId)
                    .HasColumnName("routetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalancepersonstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancepersonstatus", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancepersonstatusId)
                    .HasDatabaseName("core_fluidbalancepersonstatus_fluidbalancepersonstatus_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalancepersonstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalancepersonstatus__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancepersonstatusId)
                    .HasColumnName("fluidbalancepersonstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalancesession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancesession", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancesessionId)
                    .HasDatabaseName("core_fluidbalancesession_fluidbalancesession_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalancesession__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalancesession__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Initialage)
                    .HasColumnName("initialage")
                    .HasColumnType("numeric");

                entity.Property(e => e.Initialexpectedurineoutput)
                    .HasColumnName("initialexpectedurineoutput")
                    .HasColumnType("numeric");

                entity.Property(e => e.Initialweight)
                    .HasColumnName("initialweight")
                    .HasColumnType("numeric");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Stopdate).HasColumnName("stopdate");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalancesessionroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancesessionroute", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancesessionrouteId)
                    .HasDatabaseName("core_fluidbalancesessionroute_fluidbalancesessionroute_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalancesessionroute__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalancesessionroute__sequenceid_idx");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateadded).HasColumnName("dateadded");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenamended).HasColumnName("hasbeenamended");

                entity.Property(e => e.Isintake).HasColumnName("isintake");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFluidbalancesessionroutesessions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_fluidbalancesessionroutesessions", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancesessionroutesessionsId)
                    .HasDatabaseName("core_fluidbalancesessionroute_fluidbalancesessionroutesessi_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_fluidbalancesessionroutesessions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_fluidbalancesessionroutesessions__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionroutesessionsId)
                    .HasColumnName("fluidbalancesessionroutesessions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreFormbuilderresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_formbuilderresponse", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuilderresponseId)
                    .HasDatabaseName("core_formbuilderresponse_formbuilderresponse_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_formbuilderresponse__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_formbuilderresponse__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contexttype)
                    .HasColumnName("contexttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createddatetime).HasColumnName("createddatetime");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuilderformId)
                    .HasColumnName("formbuilderform_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuilderresponseId)
                    .HasColumnName("formbuilderresponse_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcomponents).HasColumnName("formcomponents");

                entity.Property(e => e.Formresponse).HasColumnName("formresponse");

                entity.Property(e => e.Formversion)
                    .HasColumnName("formversion")
                    .HasColumnType("numeric");

                entity.Property(e => e.Generatedguidance)
                    .HasColumnName("generatedguidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.Generatedscore)
                    .HasColumnName("generatedscore")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastupdateddatetime).HasColumnName("lastupdateddatetime");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Responseindex).HasColumnName("responseindex");

                entity.Property(e => e.Responsemeta)
                    .HasColumnName("responsemeta")
                    .HasMaxLength(1000);

                entity.Property(e => e.Responsestatus)
                    .HasColumnName("responsestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Responsestatusreason)
                    .HasColumnName("responsestatusreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Responseversion)
                    .HasColumnName("responseversion")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Updatedby)
                    .HasColumnName("updatedby")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantcomponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantcomponent", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantcomponentId)
                    .HasDatabaseName("core_implantcomponent_implantcomponent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantcomponent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantcomponent__sequenceid_idx");

                entity.Property(e => e.Askforquantity).HasColumnName("askforquantity");

                entity.Property(e => e.Componentidentifier)
                    .HasColumnName("componentidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Defaultquantity).HasColumnName("defaultquantity");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantcomponentgroupId)
                    .HasColumnName("implantcomponentgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantcomponentgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantcomponentgroup", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantcomponentgroupId)
                    .HasDatabaseName("core_implantcomponentgroup_implantcomponentgroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantcomponentgroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantcomponentgroup__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.ImplantcomponentgroupId)
                    .HasColumnName("implantcomponentgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantmanufacturerId)
                    .HasColumnName("implantmanufacturer_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantcomponentparameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantcomponentparameter", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantcomponentparameterId)
                    .HasDatabaseName("core_implantcomponentparameter_implantcomponentparameter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantcomponentparameter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantcomponentparameter__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantcomponentparameterId)
                    .HasColumnName("implantcomponentparameter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parametername)
                    .HasColumnName("parametername")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterunit)
                    .HasColumnName("parameterunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Parametervalue)
                    .HasColumnName("parametervalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantcomponentrule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantcomponentrule", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantcomponentruleId)
                    .HasDatabaseName("core_implantcomponentrule_implantcomponentrule_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantcomponentrule__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantcomponentrule__sequenceid_idx");

                entity.Property(e => e.Componentrule).HasColumnName("componentrule");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantcomponentruleId)
                    .HasColumnName("implantcomponentrule_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantcomponentrule2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantcomponentrule2", "entitystorematerialised");

                entity.HasIndex(e => e.Implantcomponentrule2Id)
                    .HasDatabaseName("core_implantcomponentrule2_implantcomponentrule2_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantcomponentrule2__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantcomponentrule2__sequenceid_idx");

                entity.Property(e => e.Componentrule).HasColumnName("componentrule");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantcomponentrule2Id)
                    .HasColumnName("implantcomponentrule2_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantmanufacturer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantmanufacturer", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantmanufacturerId)
                    .HasDatabaseName("core_implantmanufacturer_implantmanufacturer_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantmanufacturer__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantmanufacturer__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.ImplantmanufacturerId)
                    .HasColumnName("implantmanufacturer_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantsystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantsystem", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantsystemId)
                    .HasDatabaseName("core_implantsystem_implantsystem_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantsystem__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantsystem__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.ImplantmanufacturerId)
                    .HasColumnName("implantmanufacturer_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantsystemId)
                    .HasColumnName("implantsystem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreImplantsystemcomponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_implantsystemcomponent", "entitystorematerialised");

                entity.HasIndex(e => e.ImplantsystemcomponentId)
                    .HasDatabaseName("core_implantsystemcomponent_implantsystemcomponent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_implantsystemcomponent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_implantsystemcomponent__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantsystemId)
                    .HasColumnName("implantsystem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantsystemcomponentId)
                    .HasColumnName("implantsystemcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreIndication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_indication", "entitystorematerialised");

                entity.HasIndex(e => e.IndicationId)
                    .HasDatabaseName("core_indication_indication_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_indication__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_indication__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Codesystem)
                    .HasColumnName("codesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.IndicationId)
                    .HasColumnName("indication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreInfusionevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_infusionevents", "entitystorematerialised");

                entity.HasIndex(e => e.InfusioneventsId)
                    .HasDatabaseName("core_infusionevents_infusionevents_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_infusionevents__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_infusionevents__sequenceid_idx");

                entity.Property(e => e.Administeredby)
                    .HasColumnName("administeredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Batchnumber)
                    .HasColumnName("batchnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventdatetime).HasColumnName("eventdatetime");

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirydate).HasColumnName("expirydate");

                entity.Property(e => e.InfusioneventsId)
                    .HasColumnName("infusionevents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddatetime).HasColumnName("planneddatetime");

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreInstruction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_instruction", "entitystorematerialised");

                entity.HasIndex(e => e.InstructionId)
                    .HasDatabaseName("core_instruction_instruction_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_instruction__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_instruction__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldvaluesource)
                    .HasColumnName("fieldvaluesource")
                    .HasMaxLength(255);

                entity.Property(e => e.InstructionId)
                    .HasColumnName("instruction_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Text)
                    .HasColumnName("text")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreInvestigation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_investigation", "entitystorematerialised");

                entity.HasIndex(e => e.InvestigationId)
                    .HasDatabaseName("core_investigation_investigation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_investigation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_investigation__sequenceid_idx");

                entity.Property(e => e.Clinicalinvestigationnotes).HasColumnName("clinicalinvestigationnotes");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.InvestigationId)
                    .HasColumnName("investigation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_list", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreListquestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestion", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreListquestionvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_listquestionvalue", "entitystorematerialised");

                entity.Property(e => e.Contextfield)
                    .HasColumnName("contextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionId)
                    .HasColumnName("listquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListquestionvalueId)
                    .HasColumnName("listquestionvalue_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valueboolean).HasColumnName("valueboolean");

                entity.Property(e => e.Valuedate)
                    .HasColumnName("valuedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Valuelongtext).HasColumnName("valuelongtext");

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_location", "entitystorematerialised");

                entity.HasIndex(e => e.LocationId)
                    .HasDatabaseName("core_location_location_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_location__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_location__sequenceid_idx");

                entity.Property(e => e.Building)
                    .HasColumnName("building")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Institution)
                    .HasColumnName("institution")
                    .HasMaxLength(255);

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationcode)
                    .HasColumnName("locationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationtext)
                    .HasColumnName("locationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationtypecode)
                    .HasColumnName("locationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationtypetext)
                    .HasColumnName("locationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreMedication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_medication", "entitystorematerialised");

                entity.HasIndex(e => e.MedicationId)
                    .HasDatabaseName("core_medication_medication_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_medication__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_medication__sequenceid_idx");

                entity.Property(e => e.Actgroupcode)
                    .HasColumnName("actgroupcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actgroupname)
                    .HasColumnName("actgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Bnf)
                    .HasColumnName("bnf")
                    .HasMaxLength(255);

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Customgroup)
                    .HasColumnName("customgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Defineddailydose)
                    .HasColumnName("defineddailydose")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseform)
                    .HasColumnName("doseform")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformsize)
                    .HasColumnName("doseformsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Doseformunitofmeasure)
                    .HasColumnName("doseformunitofmeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformunits)
                    .HasColumnName("doseformunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweight)
                    .HasColumnName("doseperweight")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweightunit)
                    .HasColumnName("doseperweightunit")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Form)
                    .HasColumnName("form")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Genericname)
                    .HasColumnName("genericname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isantimicrobial).HasColumnName("isantimicrobial");

                entity.Property(e => e.Isblacktriangle).HasColumnName("isblacktriangle");

                entity.Property(e => e.Isbloodproduct).HasColumnName("isbloodproduct");

                entity.Property(e => e.Isclinicaltrial).HasColumnName("isclinicaltrial");

                entity.Property(e => e.Iscontrolled).HasColumnName("iscontrolled");

                entity.Property(e => e.Iscritical).HasColumnName("iscritical");

                entity.Property(e => e.Isexpensive).HasColumnName("isexpensive");

                entity.Property(e => e.Isformulary).HasColumnName("isformulary");

                entity.Property(e => e.Ishighalert).HasColumnName("ishighalert");

                entity.Property(e => e.Isprimary).HasColumnName("isprimary");

                entity.Property(e => e.Isunlicenced).HasColumnName("isunlicenced");

                entity.Property(e => e.Markedmodifier)
                    .HasColumnName("markedmodifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperday)
                    .HasColumnName("maxdoseperday")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperdayunit)
                    .HasColumnName("maxdoseperdayunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperweek)
                    .HasColumnName("maxdoseperweek")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperweekunit)
                    .HasColumnName("maxdoseperweekunit")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationtype)
                    .HasColumnName("medicationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedreleasehrs)
                    .HasColumnName("modifiedreleasehrs")
                    .HasColumnType("numeric");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Producttype)
                    .HasColumnName("producttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewreminderdays)
                    .HasColumnName("reviewreminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Roundingfactor)
                    .HasColumnName("roundingfactor")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreMedicationadministration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_medicationadministration", "entitystorematerialised");

                entity.HasIndex(e => e.MedicationadministrationId)
                    .HasDatabaseName("core_medicationadministration_medicationadministration_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_medicationadministration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_medicationadministration__sequenceid_idx");

                entity.Property(e => e.Administereddescriptivedose)
                    .HasColumnName("administereddescriptivedose")
                    .HasMaxLength(1000);

                entity.Property(e => e.Administeredstrengthdenominator)
                    .HasColumnName("administeredstrengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Administeredstrengthdenominatorunits)
                    .HasColumnName("administeredstrengthdenominatorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Administeredstrengthneumerator)
                    .HasColumnName("administeredstrengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Administeredstrengthneumeratorunits)
                    .HasColumnName("administeredstrengthneumeratorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Administrationdevice)
                    .HasColumnName("administrationdevice")
                    .HasMaxLength(255);

                entity.Property(e => e.Administrationendtime).HasColumnName("administrationendtime");

                entity.Property(e => e.Administrationsite)
                    .HasColumnName("administrationsite")
                    .HasMaxLength(255);

                entity.Property(e => e.Administrationstartime).HasColumnName("administrationstartime");

                entity.Property(e => e.Administredby)
                    .HasColumnName("administredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Administreddosemeasure)
                    .HasColumnName("administreddosemeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Administreddosesize)
                    .HasColumnName("administreddosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Administreddoseunit)
                    .HasColumnName("administreddoseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Administredinfusionrate)
                    .HasColumnName("administredinfusionrate")
                    .HasMaxLength(255);

                entity.Property(e => e.Adminstrationstatus)
                    .HasColumnName("adminstrationstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Adminstrationstatusreason)
                    .HasColumnName("adminstrationstatusreason")
                    .HasMaxLength(1000);

                entity.Property(e => e.Adminstrationstatusreasontext).HasColumnName("adminstrationstatusreasontext");

                entity.Property(e => e.Batchnumber)
                    .HasColumnName("batchnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Doctorsordercomments)
                    .HasColumnName("doctorsordercomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirydate).HasColumnName("expirydate");

                entity.Property(e => e.Levelofselfadmin)
                    .HasColumnName("levelofselfadmin")
                    .HasMaxLength(255);

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationadministrationId)
                    .HasColumnName("medicationadministration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Method)
                    .HasColumnName("method")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddatetime).HasColumnName("planneddatetime");

                entity.Property(e => e.Planneddosemeasure)
                    .HasColumnName("planneddosemeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddosesize)
                    .HasColumnName("planneddosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddosesizerangemax)
                    .HasColumnName("planneddosesizerangemax")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddoseunit)
                    .HasColumnName("planneddoseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedinfustionrate)
                    .HasColumnName("plannedinfustionrate")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedstrengthdenominator)
                    .HasColumnName("plannedstrengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Plannedstrengthdenominatorunits)
                    .HasColumnName("plannedstrengthdenominatorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedstrengthneumerator)
                    .HasColumnName("plannedstrengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Plannedstrengthneumeratorunits)
                    .HasColumnName("plannedstrengthneumeratorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionroutesid)
                    .HasColumnName("prescriptionroutesid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Requestresupply).HasColumnName("requestresupply");

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Site)
                    .HasColumnName("site")
                    .HasMaxLength(255);

                entity.Property(e => e.Substituted).HasColumnName("substituted");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Witness)
                    .HasColumnName("witness")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreMedicationcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_medicationcodes", "entitystorematerialised");

                entity.HasIndex(e => e.MedicationcodesId)
                    .HasDatabaseName("core_medicationcodes_medicationcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_medicationcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_medicationcodes__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationcodesId)
                    .HasColumnName("medicationcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminology)
                    .HasColumnName("terminology")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreMedicationingredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_medicationingredients", "entitystorematerialised");

                entity.HasIndex(e => e.MedicationingredientsId)
                    .HasDatabaseName("core_medicationingredients_medicationingredients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_medicationingredients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_medicationingredients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimaryingredient).HasColumnName("isprimaryingredient");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationingredientsId)
                    .HasColumnName("medicationingredients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreMedicationroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_medicationroutes", "entitystorematerialised");

                entity.HasIndex(e => e.MedicationroutesId)
                    .HasDatabaseName("core_medicationroutes_medicationroutes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_medicationroutes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_medicationroutes__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isunlicensed).HasColumnName("isunlicensed");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationroutesId)
                    .HasColumnName("medicationroutes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreNextofkin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_nextofkin", "entitystorematerialised");

                entity.HasIndex(e => e.NextofkinId)
                    .HasDatabaseName("core_nextofkin_nextofkin_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_nextofkin__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_nextofkin__sequenceid_idx");

                entity.Property(e => e.Addresscity)
                    .HasColumnName("addresscity")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountry)
                    .HasColumnName("addresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresscountystateprovince)
                    .HasColumnName("addresscountystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresspostalcode)
                    .HasColumnName("addresspostalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet)
                    .HasColumnName("addressstreet")
                    .HasMaxLength(255);

                entity.Property(e => e.Addressstreet2)
                    .HasColumnName("addressstreet2")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystem)
                    .HasColumnName("addresstypecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypecodesystemversion)
                    .HasColumnName("addresstypecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypedescription)
                    .HasColumnName("addresstypedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Businesscontactinfo)
                    .HasColumnName("businesscontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolecode)
                    .HasColumnName("contactrolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemdescription)
                    .HasColumnName("contactrolerelationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactrolerelationshipcodesystemversion)
                    .HasColumnName("contactrolerelationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactroletext)
                    .HasColumnName("contactroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.NextofkinId)
                    .HasColumnName("nextofkin_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personalcontactinfo)
                    .HasColumnName("personalcontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecode)
                    .HasColumnName("primarylanguagecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystem)
                    .HasColumnName("primarylanguagecodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecodesystemversion)
                    .HasColumnName("primarylanguagecodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagetext)
                    .HasColumnName("primarylanguagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Relationship)
                    .HasColumnName("relationship")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcode)
                    .HasColumnName("relationshipcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemdescription)
                    .HasColumnName("relationshipcodesystemdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipcodesystemversion)
                    .HasColumnName("relationshipcodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipnormalized)
                    .HasColumnName("relationshipnormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshiptext)
                    .HasColumnName("relationshiptext")
                    .HasMaxLength(255);

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolenormalized)
                    .HasColumnName("rolenormalized")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid)
                    .HasColumnName("setid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Statuschangereasoncode)
                    .HasColumnName("statuschangereasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystem)
                    .HasColumnName("statuschangereasoncodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasoncodesystemversion)
                    .HasColumnName("statuschangereasoncodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangereasontext)
                    .HasColumnName("statuschangereasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystem)
                    .HasColumnName("statuscodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscodesystemversion)
                    .HasColumnName("statuscodesystemversion")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Suffix)
                    .HasColumnName("suffix")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_note", "entitystorematerialised");

                entity.HasIndex(e => e.NoteId)
                    .HasDatabaseName("core_note_note_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_note__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_note__sequenceid_idx");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Commenttypecode)
                    .HasColumnName("commenttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypecodingsystem)
                    .HasColumnName("commenttypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Commenttypetext)
                    .HasColumnName("commenttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Effectivestartdate).HasColumnName("effectivestartdate");

                entity.Property(e => e.Effectivestartdatets)
                    .HasColumnName("effectivestartdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredby)
                    .HasColumnName("enteredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Entereddatetime).HasColumnName("entereddatetime");

                entity.Property(e => e.Entereddatetimets)
                    .HasColumnName("entereddatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Expirationdate).HasColumnName("expirationdate");

                entity.Property(e => e.Expirationdatets)
                    .HasColumnName("expirationdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.NoteId)
                    .HasColumnName("note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentid)
                    .HasColumnName("parentid")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentname)
                    .HasColumnName("parentname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Sourceofcomment)
                    .HasColumnName("sourceofcomment")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreObservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_observation", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Device)
                    .HasColumnName("device")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Method)
                    .HasColumnName("method")
                    .HasMaxLength(255);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreObservationevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_observationevent", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Incomplete).HasColumnName("incomplete");

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreObservationeventmonitoring>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_observationeventmonitoring", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationeventmonitoringId)
                    .HasDatabaseName("core_observationeventmonitori_observationeventmonitoring_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_observationeventmonitoring__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_observationeventmonitoring__sequenceid_idx");

                entity.Property(e => e.Concernsaboutpatient)
                    .HasColumnName("concernsaboutpatient")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Couldbeinfection)
                    .HasColumnName("couldbeinfection")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Escalatedtowhom)
                    .HasColumnName("escalatedtowhom")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Isescalationofcareamended).HasColumnName("isescalationofcareamended");

                entity.Property(e => e.Isobservationfrequencyamended).HasColumnName("isobservationfrequencyamended");

                entity.Property(e => e.Ispatientsick)
                    .HasColumnName("ispatientsick")
                    .HasMaxLength(255);

                entity.Property(e => e.Monitoringcomments)
                    .HasColumnName("monitoringcomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventmonitoringId)
                    .HasColumnName("observationeventmonitoring_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.Reasonfornotescalating)
                    .HasColumnName("reasonfornotescalating")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operation", "entitystorematerialised");

                entity.HasIndex(e => e.OperationId)
                    .HasDatabaseName("core_operation_operation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operation__sequenceid_idx");

                entity.Property(e => e.Asagradecode)
                    .HasColumnName("asagradecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Asagradetext)
                    .HasColumnName("asagradetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Finish).HasColumnName("finish");

                entity.Property(e => e.Isretrospectivedata).HasColumnName("isretrospectivedata");

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationduration)
                    .HasColumnName("operationduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Operationdurationunit)
                    .HasColumnName("operationdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatuscode)
                    .HasColumnName("operationnotestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationnotestatustext)
                    .HasColumnName("operationnotestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationqualifiercode)
                    .HasColumnName("operationqualifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationqualifiertext)
                    .HasColumnName("operationqualifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidecode)
                    .HasColumnName("operationsidecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidetext)
                    .HasColumnName("operationsidetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Plannedstart).HasColumnName("plannedstart");

                entity.Property(e => e.Reasoncode)
                    .HasColumnName("reasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasontext)
                    .HasColumnName("reasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiercode)
                    .HasColumnName("scheduleidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleidentifiertext)
                    .HasColumnName("scheduleidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Start).HasColumnName("start");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationanaesthetic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationanaesthetic", "entitystorematerialised");

                entity.HasIndex(e => e.OperationanaestheticId)
                    .HasDatabaseName("core_operationanaesthetic_operationanaesthetic_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationanaesthetic__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationanaesthetic__sequenceid_idx");

                entity.Property(e => e.AnaestheticId)
                    .HasColumnName("anaesthetic_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaestheticnotes)
                    .HasColumnName("anaestheticnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationanaestheticId)
                    .HasColumnName("operationanaesthetic_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationantibiotics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationantibiotics", "entitystorematerialised");

                entity.HasIndex(e => e.OperationantibioticsId)
                    .HasDatabaseName("core_operationantibiotics_operationantibiotics_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationantibiotics__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationantibiotics__sequenceid_idx");

                entity.Property(e => e.AntibioticsId)
                    .HasColumnName("antibiotics_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Antibioticsnote)
                    .HasColumnName("antibioticsnote")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationantibioticsId)
                    .HasColumnName("operationantibiotics_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationnotehendersonoutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationnotehendersonoutcome", "entitystorematerialised");

                entity.HasIndex(e => e.OperationnotehendersonoutcomeId)
                    .HasDatabaseName("core_operationnotehendersonou_operationnotehendersonoutcome_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationnotehendersonoutcome__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationnotehendersonoutcome__sequenceid_idx");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isasepticloosening).HasColumnName("isasepticloosening");

                entity.Property(e => e.Isimplantrelated).HasColumnName("isimplantrelated");

                entity.Property(e => e.Isinfection).HasColumnName("isinfection");

                entity.Property(e => e.Isnonimplantrelated).HasColumnName("isnonimplantrelated");

                entity.Property(e => e.Issofttissuefailure).HasColumnName("issofttissuefailure");

                entity.Property(e => e.Isstructurefailure).HasColumnName("isstructurefailure");

                entity.Property(e => e.Istumorprogression).HasColumnName("istumorprogression");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationnotehendersonoutcomeId)
                    .HasColumnName("operationnotehendersonoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationnotehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationnotehistory", "entitystorematerialised");

                entity.HasIndex(e => e.OperationnotehistoryId)
                    .HasDatabaseName("core_operationnotehistory_operationnotehistory_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationnotehistory__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationnotehistory__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Filename)
                    .HasColumnName("filename")
                    .HasMaxLength(255);

                entity.Property(e => e.Isretrospectivedata).HasColumnName("isretrospectivedata");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationnotehistoryId)
                    .HasColumnName("operationnotehistory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pdfblob).HasColumnName("pdfblob");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationpostopinstructions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationpostopinstructions", "entitystorematerialised");

                entity.HasIndex(e => e.OperationpostopinstructionsId)
                    .HasDatabaseName("core_operationpostopinstructi_operationpostopinstructions_i_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationpostopinstructions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationpostopinstructions__sequenceid_idx");

                entity.Property(e => e.Anticipatedbloodloss)
                    .HasColumnName("anticipatedbloodloss")
                    .HasMaxLength(1000);

                entity.Property(e => e.Anticipateddayofdischarge).HasColumnName("anticipateddayofdischarge");

                entity.Property(e => e.Bedresttext)
                    .HasColumnName("bedresttext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Careplanpathway)
                    .HasColumnName("careplanpathway")
                    .HasMaxLength(1000);

                entity.Property(e => e.Clinicreview)
                    .HasColumnName("clinicreview")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mechanicalscd).HasColumnName("mechanicalscd");

                entity.Property(e => e.Mechanicalscdoption)
                    .HasColumnName("mechanicalscdoption")
                    .HasMaxLength(255);

                entity.Property(e => e.Mechanicalsection)
                    .HasColumnName("mechanicalsection")
                    .HasMaxLength(255);

                entity.Property(e => e.Mechanicalted).HasColumnName("mechanicalted");

                entity.Property(e => e.Mechanicaltedoption)
                    .HasColumnName("mechanicaltedoption")
                    .HasMaxLength(255);

                entity.Property(e => e.Observation)
                    .HasColumnName("observation")
                    .HasMaxLength(1000);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationpostopinstructionsId)
                    .HasColumnName("operationpostopinstructions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postoperativeantibiotics)
                    .HasColumnName("postoperativeantibiotics")
                    .HasMaxLength(1000);

                entity.Property(e => e.Prophylaxis)
                    .HasColumnName("prophylaxis")
                    .HasMaxLength(1000);

                entity.Property(e => e.Prophylaxistype)
                    .HasColumnName("prophylaxistype")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Rehabilitation)
                    .HasColumnName("rehabilitation")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weightbearingstatuscode)
                    .HasColumnName("weightbearingstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Weightbearingstatusfurtherinformation)
                    .HasColumnName("weightbearingstatusfurtherinformation")
                    .HasMaxLength(1000);

                entity.Property(e => e.Weightbearingstatustext)
                    .HasColumnName("weightbearingstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Woundcheck)
                    .HasColumnName("woundcheck")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationpreparation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationpreparation", "entitystorematerialised");

                entity.HasIndex(e => e.OperationpreparationId)
                    .HasDatabaseName("core_operationpreparation_operationpreparation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationpreparation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationpreparation__sequenceid_idx");

                entity.Property(e => e.Anaestheticcode)
                    .HasColumnName("anaestheticcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaestheticcodingsystem)
                    .HasColumnName("anaestheticcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthetictext)
                    .HasColumnName("anaesthetictext")
                    .HasMaxLength(255);

                entity.Property(e => e.Antibioticsatinductioncode)
                    .HasColumnName("antibioticsatinductioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Antibioticsatinductioncodingsystem)
                    .HasColumnName("antibioticsatinductioncodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Antibioticsatinductiontext)
                    .HasColumnName("antibioticsatinductiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Istorniquetapplied).HasColumnName("istorniquetapplied");

                entity.Property(e => e.Iswhochecklistperformed)
                    .HasColumnName("iswhochecklistperformed")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationpreparationId)
                    .HasColumnName("operationpreparation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidecode)
                    .HasColumnName("operationsidecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidecodingsystem)
                    .HasColumnName("operationsidecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationsidetext)
                    .HasColumnName("operationsidetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Preoperativenote).HasColumnName("preoperativenote");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Torniquetpressure)
                    .HasColumnName("torniquetpressure")
                    .HasColumnType("numeric");

                entity.Property(e => e.Torniquettext)
                    .HasColumnName("torniquettext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Torniquettime)
                    .HasColumnName("torniquettime")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationprovider", "entitystorematerialised");

                entity.HasIndex(e => e.OperationproviderId)
                    .HasDatabaseName("core_operationprovider_operationprovider_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationprovider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationprovider__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationproviderId)
                    .HasColumnName("operationprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Providername)
                    .HasColumnName("providername")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Rolecode)
                    .HasColumnName("rolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Roletext)
                    .HasColumnName("roletext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOperationspecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_operationspecialty", "entitystorematerialised");

                entity.HasIndex(e => e.OperationspecialtyId)
                    .HasDatabaseName("core_operationspecialty_operationspecialty_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_operationspecialty__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_operationspecialty__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationspecialtyId)
                    .HasColumnName("operationspecialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.SpecialtyId)
                    .HasColumnName("specialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_order", "entitystorematerialised");

                entity.HasIndex(e => e.OrderId)
                    .HasDatabaseName("nci_co_order_id");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_order__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_order__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetimeoftransaction).HasColumnName("datetimeoftransaction");

                entity.Property(e => e.Diagnosticserviceid)
                    .HasColumnName("diagnosticserviceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fillerordernumber)
                    .HasColumnName("fillerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationenddatetime).HasColumnName("observationenddatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordercontrol)
                    .HasColumnName("ordercontrol")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordereffectivedate).HasColumnName("ordereffectivedate");

                entity.Property(e => e.Orderingprovider)
                    .HasColumnName("orderingprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordernotes).HasColumnName("ordernotes");

                entity.Property(e => e.Orderstatus)
                    .HasColumnName("orderstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Placerordernumber)
                    .HasColumnName("placerordernumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Relevantclinicalinfo)
                    .HasColumnName("relevantclinicalinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Requesteddatetime).HasColumnName("requesteddatetime");

                entity.Property(e => e.Resultstatus)
                    .HasColumnName("resultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Specimendatetime).HasColumnName("specimendatetime");

                entity.Property(e => e.Specimentypecode)
                    .HasColumnName("specimentypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypecodingsystem)
                    .HasColumnName("specimentypecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Specimentypetext)
                    .HasColumnName("specimentypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuschangedatetime).HasColumnName("statuschangedatetime");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Universalservicecode)
                    .HasColumnName("universalservicecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicecodingsystem)
                    .HasColumnName("universalservicecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Universalservicetext)
                    .HasColumnName("universalservicetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreOrderaudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_orderaudit", "entitystorematerialised");

                entity.HasIndex(e => e.OrderauditId)
                    .HasDatabaseName("core_orderaudit_orderaudit_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_orderaudit__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_orderaudit__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Lastvieweddatetime).HasColumnName("lastvieweddatetime");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OrderauditId)
                    .HasColumnName("orderaudit_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreOrderset>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_orderset", "entitystorematerialised");

                entity.HasIndex(e => e.OrdersetId)
                    .HasDatabaseName("core_orderset_orderset_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_orderset__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_orderset__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OrdersetId)
                    .HasColumnName("orderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreOrdersetprescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_ordersetprescription", "entitystorematerialised");

                entity.HasIndex(e => e.OrdersetprescriptionId)
                    .HasDatabaseName("core_ordersetprescription_ordersetprescription_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_ordersetprescription__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_ordersetprescription__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OrdersetId)
                    .HasColumnName("orderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OrdersetprescriptionId)
                    .HasColumnName("ordersetprescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_person", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Interpreterrequired)
                    .HasColumnName("interpreterrequired")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecode)
                    .HasColumnName("primarylanguagecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagetext)
                    .HasColumnName("primarylanguagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonaddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddress", "entitystorematerialised");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isprimaryaddress).HasColumnName("isprimaryaddress");

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Otheraddressdetails)
                    .HasColumnName("otheraddressdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonaddresstype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personaddresstype", "entitystorematerialised");

                entity.Property(e => e.Addresstypecode)
                    .HasColumnName("addresstypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresstypetext)
                    .HasColumnName("addresstypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonaddressId)
                    .HasColumnName("personaddress_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaddresstypeId)
                    .HasColumnName("personaddresstype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersoncontactinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personcontactinfo", "entitystorematerialised");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactnotes)
                    .HasColumnName("contactnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypecode)
                    .HasColumnName("contacttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttypetext)
                    .HasColumnName("contacttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersoncontactinfoId)
                    .HasColumnName("personcontactinfo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonidentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personidentifier", "entitystorematerialised");

                entity.Property(e => e.Assigningauthoritycode)
                    .HasColumnName("assigningauthoritycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assigningauthoritytext)
                    .HasColumnName("assigningauthoritytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Checkdigit)
                    .HasColumnName("checkdigit")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Idnumber)
                    .HasColumnName("idnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypecode)
                    .HasColumnName("idtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Idtypetext)
                    .HasColumnName("idtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonidentifierId)
                    .HasColumnName("personidentifier_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePersonobservationscale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_personobservationscale", "entitystorematerialised");

                entity.HasIndex(e => e.PersonobservationscaleId)
                    .HasDatabaseName("core_personobservationscale_personobservationscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_personobservationscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_personobservationscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonobservationscaleId)
                    .HasColumnName("personobservationscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePosology>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_posology", "entitystorematerialised");

                entity.HasIndex(e => e.PosologyId)
                    .HasDatabaseName("core_posology_posology_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_posology__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_posology__sequenceid_idx");

                entity.Property(e => e.Antimicrobialstartdate).HasColumnName("antimicrobialstartdate");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Daysofweek)
                    .HasColumnName("daysofweek")
                    .HasMaxLength(255);

                entity.Property(e => e.Doctorsorder).HasColumnName("doctorsorder");

                entity.Property(e => e.Doseperkg)
                    .HasColumnName("doseperkg")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosepersa)
                    .HasColumnName("dosepersa")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosetype)
                    .HasColumnName("dosetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosingdaysfrequency)
                    .HasColumnName("dosingdaysfrequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosingdaysfrequencysize)
                    .HasColumnName("dosingdaysfrequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Frequency)
                    .HasColumnName("frequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Frequencysize)
                    .HasColumnName("frequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionduration)
                    .HasColumnName("infusionduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionrate)
                    .HasColumnName("infusionrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionrateunits)
                    .HasColumnName("infusionrateunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Infusiontypeid)
                    .HasColumnName("infusiontypeid")
                    .HasMaxLength(255);

                entity.Property(e => e.Isadditionaladministration).HasColumnName("isadditionaladministration");

                entity.Property(e => e.Iscurrent).HasColumnName("iscurrent");

                entity.Property(e => e.Maxnumofdosesperday)
                    .HasColumnName("maxnumofdosesperday")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptiodurationsize)
                    .HasColumnName("prescriptiodurationsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionduration)
                    .HasColumnName("prescriptionduration")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionenddate).HasColumnName("prescriptionenddate");

                entity.Property(e => e.Prescriptionstartdate).HasColumnName("prescriptionstartdate");

                entity.Property(e => e.Prn).HasColumnName("prn");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Repeatlastday).HasColumnName("repeatlastday");

                entity.Property(e => e.Repeatlastdayuntil).HasColumnName("repeatlastdayuntil");

                entity.Property(e => e.Repeatprotocoltimes)
                    .HasColumnName("repeatprotocoltimes")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Totalinfusionvolume)
                    .HasColumnName("totalinfusionvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalquantity)
                    .HasColumnName("totalquantity")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalquantitytext)
                    .HasColumnName("totalquantitytext")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_CorePrescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_prescription", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionId)
                    .HasDatabaseName("core_prescription_prescription_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_prescription__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_prescription__sequenceid_idx");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dispensingfrom)
                    .HasColumnName("dispensingfrom")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isgastroresistant).HasColumnName("isgastroresistant");

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Ismodifiedrelease).HasColumnName("ismodifiedrelease");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedfrom).HasColumnName("lastmodifiedfrom");

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Moatoip).HasColumnName("moatoip");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherindications)
                    .HasColumnName("otherindications")
                    .HasMaxLength(1000);

                entity.Property(e => e.Otherprescriptionsource)
                    .HasColumnName("otherprescriptionsource")
                    .HasMaxLength(1000);

                entity.Property(e => e.Oxygenadditionalinfo)
                    .HasColumnName("oxygenadditionalinfo")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsources)
                    .HasColumnName("prescriptionsources")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CorePrescriptionorderset>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_prescriptionorderset", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionordersetId)
                    .HasDatabaseName("core_prescriptionorderset_prescriptionorderset_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_prescriptionorderset__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_prescriptionorderset__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DefinedCriteria)
                    .HasColumnName("defined_criteria")
                    .HasMaxLength(255);

                entity.Property(e => e.ExclusiveValue)
                    .HasColumnName("exclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.InclusiveValue)
                    .HasColumnName("inclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordersetname)
                    .HasColumnName("ordersetname")
                    .HasMaxLength(255);

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersetId)
                    .HasColumnName("prescriptionorderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersettypeId)
                    .HasColumnName("prescriptionordersettype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CorePrescriptionroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_prescriptionroutes", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionroutesId)
                    .HasDatabaseName("core_prescriptionroutes_prescriptionroutes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_prescriptionroutes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_prescriptionroutes__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isunlicensed).HasColumnName("isunlicensed");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionroutesId)
                    .HasColumnName("prescriptionroutes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProblem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_problem", "entitystorematerialised");

                entity.HasIndex(e => e.ProblemId)
                    .HasDatabaseName("core_problem_problem_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_problem__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_problem__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProblemId)
                    .HasColumnName("problem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Problemcode)
                    .HasColumnName("problemcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Problemtext)
                    .HasColumnName("problemtext")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedure", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedureId)
                    .HasDatabaseName("core_procedure_procedure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedure__sequenceid_idx");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthesiaminutes)
                    .HasColumnName("anaesthesiaminutes")
                    .HasColumnType("numeric");

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateeffectiveperiod)
                    .HasColumnName("dateeffectiveperiod")
                    .HasMaxLength(255);

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Effectivedatestring)
                    .HasColumnName("effectivedatestring")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdateapproximate)
                    .HasColumnName("isdateapproximate")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimary).HasColumnName("isprimary");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Performedby)
                    .HasColumnName("performedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");

                entity.Property(e => e.Proceduremodifiercode)
                    .HasColumnName("proceduremodifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduremodifiertext)
                    .HasColumnName("proceduremodifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProceduredetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_proceduredetail", "entitystorematerialised");

                entity.HasIndex(e => e.ProceduredetailId)
                    .HasDatabaseName("core_proceduredetail_proceduredetail_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_proceduredetail__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_proceduredetail__sequenceid_idx");

                entity.Property(e => e.Armtable).HasColumnName("armtable");

                entity.Property(e => e.Assessmentofmargincode)
                    .HasColumnName("assessmentofmargincode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assessmentofmargintext)
                    .HasColumnName("assessmentofmargintext")
                    .HasMaxLength(255);

                entity.Property(e => e.Beachchair).HasColumnName("beachchair");

                entity.Property(e => e.Beanbag).HasColumnName("beanbag");

                entity.Property(e => e.Bloodloss)
                    .HasColumnName("bloodloss")
                    .HasColumnType("numeric");

                entity.Property(e => e.Candourthreshold).HasColumnName("candourthreshold");

                entity.Property(e => e.Candourthresholdreached)
                    .HasColumnName("candourthresholdreached")
                    .HasMaxLength(255);

                entity.Property(e => e.Closuretext)
                    .HasColumnName("closuretext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deepclosurecode)
                    .HasColumnName("deepclosurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Deepclosuretext)
                    .HasColumnName("deepclosuretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Drainlabel)
                    .HasColumnName("drainlabel")
                    .HasMaxLength(255);

                entity.Property(e => e.Drainplacement)
                    .HasColumnName("drainplacement")
                    .HasMaxLength(255);

                entity.Property(e => e.Drainwhentoremove)
                    .HasColumnName("drainwhentoremove")
                    .HasMaxLength(255);

                entity.Property(e => e.Dressingcode)
                    .HasColumnName("dressingcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Dressingtext)
                    .HasColumnName("dressingtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Equipmentother).HasColumnName("equipmentother");

                entity.Property(e => e.Equipmentothertext)
                    .HasColumnName("equipmentothertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fluidloss)
                    .HasColumnName("fluidloss")
                    .HasColumnType("numeric");

                entity.Property(e => e.Footsupport).HasColumnName("footsupport");

                entity.Property(e => e.Implantproceduretype)
                    .HasColumnName("implantproceduretype")
                    .HasMaxLength(1000);

                entity.Property(e => e.Isdifferentteam).HasColumnName("isdifferentteam");

                entity.Property(e => e.Istorniquetapplied).HasColumnName("istorniquetapplied");

                entity.Property(e => e.Jacksontable).HasColumnName("jacksontable");

                entity.Property(e => e.Laterality)
                    .HasColumnName("laterality")
                    .HasMaxLength(255);

                entity.Property(e => e.Localanaestheticinfiltration)
                    .HasColumnName("localanaestheticinfiltration")
                    .HasMaxLength(255);

                entity.Property(e => e.Othercomments).HasColumnName("othercomments");

                entity.Property(e => e.Otherindication)
                    .HasColumnName("otherindication")
                    .HasMaxLength(1000);

                entity.Property(e => e.Otherindicationnotes)
                    .HasColumnName("otherindicationnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Positioningcode)
                    .HasColumnName("positioningcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Positioningothertext)
                    .HasColumnName("positioningothertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Positioningtext)
                    .HasColumnName("positioningtext")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecomment).HasColumnName("procedurecomment");

                entity.Property(e => e.ProceduredetailId)
                    .HasColumnName("proceduredetail_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sidesupport).HasColumnName("sidesupport");

                entity.Property(e => e.Skinclosurecode)
                    .HasColumnName("skinclosurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinclosuretext)
                    .HasColumnName("skinclosuretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Skindrapingwithimpermeabledrapes).HasColumnName("skindrapingwithimpermeabledrapes");

                entity.Property(e => e.Skinincisionandapproachcode)
                    .HasColumnName("skinincisionandapproachcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinincisionandapproachtext)
                    .HasColumnName("skinincisionandapproachtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinpreparationcode)
                    .HasColumnName("skinpreparationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinpreparationothertext)
                    .HasColumnName("skinpreparationothertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinpreparationtext)
                    .HasColumnName("skinpreparationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Skinrepairedwithcode)
                    .HasColumnName("skinrepairedwithcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Skinrepairedwithtext)
                    .HasColumnName("skinrepairedwithtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Torniquetpressure)
                    .HasColumnName("torniquetpressure")
                    .HasMaxLength(255);

                entity.Property(e => e.Torniquettime)
                    .HasColumnName("torniquettime")
                    .HasMaxLength(255);

                entity.Property(e => e.Unexpectedintraoperative).HasColumnName("unexpectedintraoperative");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProceduredrains>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_proceduredrains", "entitystorematerialised");

                entity.HasIndex(e => e.ProceduredrainsId)
                    .HasDatabaseName("core_proceduredrains_proceduredrains_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_proceduredrains__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_proceduredrains__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Drainlabel)
                    .HasColumnName("drainlabel")
                    .HasMaxLength(255);

                entity.Property(e => e.Drainplacement)
                    .HasColumnName("drainplacement")
                    .HasMaxLength(255);

                entity.Property(e => e.Drainwhentoremove)
                    .HasColumnName("drainwhentoremove")
                    .HasMaxLength(255);

                entity.Property(e => e.Freedrainage).HasColumnName("freedrainage");

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProceduredrainsId)
                    .HasColumnName("proceduredrains_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Suction).HasColumnName("suction");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedurefinding>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedurefinding", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedurefindingId)
                    .HasDatabaseName("core_procedurefinding_procedurefinding_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedurefinding__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedurefinding__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Findingcode)
                    .HasColumnName("findingcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Findingtext)
                    .HasColumnName("findingtext")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedurefindingId)
                    .HasColumnName("procedurefinding_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedurefluidloss>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedurefluidloss", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedurefluidlossId)
                    .HasDatabaseName("core_procedurefluidloss_procedurefluidloss_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedurefluidloss__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedurefluidloss__sequenceid_idx");

                entity.Property(e => e.Componentcode)
                    .HasColumnName("componentcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Componenttext)
                    .HasColumnName("componenttext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedurefluidlossId)
                    .HasColumnName("procedurefluidloss_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Unitcode)
                    .HasColumnName("unitcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Unittext)
                    .HasColumnName("unittext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedureimplant>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedureimplant", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedureimplantId)
                    .HasDatabaseName("core_procedureimplant_procedureimplant_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedureimplant__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedureimplant__sequenceid_idx");

                entity.Property(e => e.Askforquantity).HasColumnName("askforquantity");

                entity.Property(e => e.Componentidentifier)
                    .HasColumnName("componentidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ImplantcomponentId)
                    .HasColumnName("implantcomponent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantcomponentgroupId)
                    .HasColumnName("implantcomponentgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantcomponentgroupname)
                    .HasColumnName("implantcomponentgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantcomponentname)
                    .HasColumnName("implantcomponentname")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantmanufacturerId)
                    .HasColumnName("implantmanufacturer_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ImplantsystemId)
                    .HasColumnName("implantsystem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Implantsystemname)
                    .HasColumnName("implantsystemname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isothercomponent).HasColumnName("isothercomponent");

                entity.Property(e => e.Isothermanufacturer).HasColumnName("isothermanufacturer");

                entity.Property(e => e.Isothersystem).HasColumnName("isothersystem");

                entity.Property(e => e.Manufacturername)
                    .HasColumnName("manufacturername")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureimplantId)
                    .HasColumnName("procedureimplant_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedureprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedureprovider", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedureproviderId)
                    .HasDatabaseName("core_procedureprovider_procedureprovider_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedureprovider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedureprovider__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureproviderId)
                    .HasColumnName("procedureprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Providername)
                    .HasColumnName("providername")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Rolecode)
                    .HasColumnName("rolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Roletext)
                    .HasColumnName("roletext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProcedurestructureaffected>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_procedurestructureaffected", "entitystorematerialised");

                entity.HasIndex(e => e.ProcedurestructureaffectedId)
                    .HasDatabaseName("core_procedurestructureaffect_procedurestructureaffected_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_procedurestructureaffected__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_procedurestructureaffected__sequenceid_idx");

                entity.Property(e => e.Actioncode)
                    .HasColumnName("actioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actiontext)
                    .HasColumnName("actiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Additionalcomments)
                    .HasColumnName("additionalcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedurestructureaffectedId)
                    .HasColumnName("procedurestructureaffected_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Structurecode)
                    .HasColumnName("structurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Structuretext)
                    .HasColumnName("structuretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProvider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_provider", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Emailid)
                    .HasColumnName("emailid")
                    .HasMaxLength(255);

                entity.Property(e => e.Employer)
                    .HasColumnName("employer")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasMaxLength(255);

                entity.Property(e => e.Jobtitle)
                    .HasColumnName("jobtitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationid)
                    .HasColumnName("organisationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Phonenumber)
                    .HasColumnName("phonenumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Providertypecode)
                    .HasColumnName("providertypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providertypetext)
                    .HasColumnName("providertypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Suffix)
                    .HasColumnName("suffix")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreProvidercode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providercode", "entitystorematerialised");

                entity.HasIndex(e => e.ProvidercodeId)
                    .HasDatabaseName("core_providercode_providercode_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_providercode__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_providercode__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Codetype)
                    .HasColumnName("codetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProvidercodeId)
                    .HasColumnName("providercode_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProviderteam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteam", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreProviderteammembership>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_providerteammembership", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteamId)
                    .HasColumnName("providerteam_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProviderteammembershipId)
                    .HasColumnName("providerteammembership_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreQuestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_question", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreReferral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referral", "entitystorematerialised");

                entity.Property(e => e.Cancertypecode)
                    .HasColumnName("cancertypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancertypesystem)
                    .HasColumnName("cancertypesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancertypetext)
                    .HasColumnName("cancertypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Closurereasoncode)
                    .HasColumnName("closurereasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Closurereasoncsystem)
                    .HasColumnName("closurereasoncsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Closurereasonctext)
                    .HasColumnName("closurereasonctext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Disposition)
                    .HasColumnName("disposition")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedate)
                    .HasColumnName("effectivedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirationdate)
                    .HasColumnName("expirationdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Expriationdate)
                    .HasColumnName("expriationdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorityidentifiercode)
                    .HasColumnName("priorityidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorityidentifiersystem)
                    .HasColumnName("priorityidentifiersystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Priorityidentifiertext)
                    .HasColumnName("priorityidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Processdate)
                    .HasColumnName("processdate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reasoncode)
                    .HasColumnName("reasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonsystem)
                    .HasColumnName("reasonsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasontext)
                    .HasColumnName("reasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralnumber)
                    .HasColumnName("referralnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralreference)
                    .HasColumnName("referralreference")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralstatus)
                    .HasColumnName("referralstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Referraltype)
                    .HasColumnName("referraltype")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresscountry)
                    .HasColumnName("referredtoprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline1)
                    .HasColumnName("referredtoprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline2)
                    .HasColumnName("referredtoprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline3)
                    .HasColumnName("referredtoprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddressline4)
                    .HasColumnName("referredtoprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideraddresspostcode)
                    .HasColumnName("referredtoprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfamilyname)
                    .HasColumnName("referredtoproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderfullname)
                    .HasColumnName("referredtoproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidergivenname)
                    .HasColumnName("referredtoprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovideridentifier)
                    .HasColumnName("referredtoprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationcode)
                    .HasColumnName("referredtoproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderlocationtext)
                    .HasColumnName("referredtoproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoprovidermiddlename)
                    .HasColumnName("referredtoprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtoproviderprefix)
                    .HasColumnName("referredtoproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresscountry)
                    .HasColumnName("referringprovideraddresscountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline1)
                    .HasColumnName("referringprovideraddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline2)
                    .HasColumnName("referringprovideraddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline3)
                    .HasColumnName("referringprovideraddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddressline4)
                    .HasColumnName("referringprovideraddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideraddresspostcode)
                    .HasColumnName("referringprovideraddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfamilyname)
                    .HasColumnName("referringproviderfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderfullname)
                    .HasColumnName("referringproviderfullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidergivenname)
                    .HasColumnName("referringprovidergivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovideridentifier)
                    .HasColumnName("referringprovideridentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationcode)
                    .HasColumnName("referringproviderlocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderlocationtext)
                    .HasColumnName("referringproviderlocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovidermiddlename)
                    .HasColumnName("referringprovidermiddlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringproviderprefix)
                    .HasColumnName("referringproviderprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialty)
                    .HasColumnName("specialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Typecode)
                    .HasColumnName("typecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Typesystem)
                    .HasColumnName("typesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Typetext)
                    .HasColumnName("typetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreReferralattachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referralattachment", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_referralattachment__recordstatus_idx");

                entity.HasIndex(e => e.ReferralattachmentId)
                    .HasDatabaseName("core_referralattachment_referralattachment_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_referralattachment__sequenceid_idx");

                entity.Property(e => e.Contenttype)
                    .HasColumnName("contenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Creation).HasColumnName("creation");

                entity.Property(e => e.Data).HasColumnName("data");

                entity.Property(e => e.Hash).HasColumnName("hash");

                entity.Property(e => e.Language)
                    .HasColumnName("language")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReferralattachmentId)
                    .HasColumnName("referralattachment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Size)
                    .HasColumnName("size")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreReferralprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_referralprovider", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_referralprovider__recordstatus_idx");

                entity.HasIndex(e => e.ReferralproviderId)
                    .HasDatabaseName("core_referralprovider_referralprovider_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_referralprovider__sequenceid_idx");

                entity.Property(e => e.Addresslineone)
                    .HasColumnName("addresslineone")
                    .HasMaxLength(255);

                entity.Property(e => e.Addresslinetwo)
                    .HasColumnName("addresslinetwo")
                    .HasMaxLength(255);

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Givenname)
                    .HasColumnName("givenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumberlocal)
                    .HasColumnName("idnumberlocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Idnumbernational)
                    .HasColumnName("idnumbernational")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcode)
                    .HasColumnName("postcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerrole)
                    .HasColumnName("providerrole")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ReferralproviderId)
                    .HasColumnName("referralprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycodelocal)
                    .HasColumnName("specialtycodelocal")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycodenational)
                    .HasColumnName("specialtycodenational")
                    .HasMaxLength(255);

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_report", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_report__recordstatus_idx");

                entity.HasIndex(e => e.ReportId)
                    .HasDatabaseName("core_report_report_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_report__sequenceid_idx");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Creationdatetime).HasColumnName("creationdatetime");

                entity.Property(e => e.Effectivedatetime).HasColumnName("effectivedatetime");

                entity.Property(e => e.Effectiveperiodend).HasColumnName("effectiveperiodend");

                entity.Property(e => e.Effectiveperiodstart).HasColumnName("effectiveperiodstart");

                entity.Property(e => e.Formatcode)
                    .HasColumnName("formatcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formatcodetext)
                    .HasColumnName("formatcodetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitycode)
                    .HasColumnName("healthcarefacilitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Mimetypecode)
                    .HasColumnName("mimetypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Mimetypetext)
                    .HasColumnName("mimetypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportissueddatetime).HasColumnName("reportissueddatetime");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scantype)
                    .HasColumnName("scantype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Signedby)
                    .HasColumnName("signedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Typecode)
                    .HasColumnName("typecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Typetext)
                    .HasColumnName("typetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_result", "entitystorematerialised");

                entity.HasIndex(e => e.OrderId)
                    .HasDatabaseName("nci_re_order_id");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_result__recordstatus_idx");

                entity.HasIndex(e => e.ResultId)
                    .HasDatabaseName("core_result_result_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_result__sequenceid_idx");

                entity.Property(e => e.Abnormalflag)
                    .HasColumnName("abnormalflag")
                    .HasMaxLength(255);

                entity.Property(e => e.Analysisdatetime).HasColumnName("analysisdatetime");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Creationdatetime).HasColumnName("creationdatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitycode)
                    .HasColumnName("healthcarefacilitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Healthcarefacilitytext)
                    .HasColumnName("healthcarefacilitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiercode)
                    .HasColumnName("identifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Identifiertext)
                    .HasColumnName("identifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationdatetime).HasColumnName("observationdatetime");

                entity.Property(e => e.Observationidentifiercode)
                    .HasColumnName("observationidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiercodingsystem)
                    .HasColumnName("observationidentifiercodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationidentifiertext)
                    .HasColumnName("observationidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationnotes).HasColumnName("observationnotes");

                entity.Property(e => e.Observationresultstatus)
                    .HasColumnName("observationresultstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationsubid)
                    .HasColumnName("observationsubid")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationvalue).HasColumnName("observationvalue");

                entity.Property(e => e.Observationvaluenumeric)
                    .HasColumnName("observationvaluenumeric")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referencerange)
                    .HasColumnName("referencerange")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangehigh)
                    .HasColumnName("referencerangehigh")
                    .HasMaxLength(255);

                entity.Property(e => e.Referencerangelow)
                    .HasColumnName("referencerangelow")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportexaminationdate).HasColumnName("reportexaminationdate");

                entity.Property(e => e.Reportstatuscode)
                    .HasColumnName("reportstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reportstatustext)
                    .HasColumnName("reportstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttitle)
                    .HasColumnName("reporttitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypecode)
                    .HasColumnName("reporttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Reporttypetext)
                    .HasColumnName("reporttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.ResultId)
                    .HasColumnName("result_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scantype)
                    .HasColumnName("scantype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Signedby)
                    .HasColumnName("signedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Unitscode)
                    .HasColumnName("unitscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Unitstext)
                    .HasColumnName("unitstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreScore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_score", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_score__recordstatus_idx");

                entity.HasIndex(e => e.ScoreId)
                    .HasDatabaseName("core_score_score_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_score__sequenceid_idx");

                entity.Property(e => e.Calculatedby)
                    .HasColumnName("calculatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Calculateddatetime).HasColumnName("calculateddatetime");

                entity.Property(e => e.Calculatedsystem)
                    .HasColumnName("calculatedsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Guidance)
                    .HasColumnName("guidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoretype)
                    .HasColumnName("scoretype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreScoreparameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_scoreparameter", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_scoreparameter__recordstatus_idx");

                entity.HasIndex(e => e.ScoreparameterId)
                    .HasDatabaseName("core_scoreparameter_scoreparameter_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_scoreparameter__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameter)
                    .HasColumnName("parameter")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("numeric");

                entity.Property(e => e.ScoreId)
                    .HasColumnName("score_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScoreparameterId)
                    .HasColumnName("scoreparameter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_CoreSpecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_specialty", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_specialty__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_specialty__sequenceid_idx");

                entity.HasIndex(e => e.SpecialtyId)
                    .HasDatabaseName("core_specialty_specialty_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Localspecialtycode)
                    .HasColumnName("localspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtytext)
                    .HasColumnName("localspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Parentid)
                    .HasColumnName("parentid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.SpecialtyId)
                    .HasColumnName("specialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_task", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_task__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_task__sequenceid_idx");

                entity.HasIndex(e => e.TaskId)
                    .HasDatabaseName("core_task_task_id_idx");

                entity.Property(e => e.Allocateddatetime)
                    .HasColumnName("allocateddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Allocatedto)
                    .HasColumnName("allocatedto")
                    .HasMaxLength(255);

                entity.Property(e => e.ClinicalsummaryId)
                    .HasColumnName("clinicalsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationtype)
                    .HasColumnName("correlationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Duedate)
                    .HasColumnName("duedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.Ownerassigneddatetime)
                    .HasColumnName("ownerassigneddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreatedby)
                    .HasColumnName("taskcreatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreateddatetime)
                    .HasColumnName("taskcreateddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Taskdetails).HasColumnName("taskdetails");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreTheatresession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresession", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_theatresession__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_theatresession__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionId)
                    .HasDatabaseName("core_theatresession_theatresession_id_idx");

                entity.Property(e => e.Appointmentduration)
                    .HasColumnName("appointmentduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Appointmentdurationunit)
                    .HasColumnName("appointmentdurationunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Bookingsequence)
                    .HasColumnName("bookingsequence")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypecode)
                    .HasColumnName("cancelledbypersontypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbypersontypetext)
                    .HasColumnName("cancelledbypersontypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasoncode)
                    .HasColumnName("cancelledreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledreasontext)
                    .HasColumnName("cancelledreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deceisiontoadmitdate).HasColumnName("deceisiontoadmitdate");

                entity.Property(e => e.Deceisiontoadmitdatets)
                    .HasColumnName("deceisiontoadmitdatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusercode)
                    .HasColumnName("enteredbyusercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserlocation)
                    .HasColumnName("enteredbyuserlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyusername)
                    .HasColumnName("enteredbyusername")
                    .HasMaxLength(255);

                entity.Property(e => e.Enteredbyuserphonenumber)
                    .HasColumnName("enteredbyuserphonenumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitallocation)
                    .HasColumnName("hospitallocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtycode)
                    .HasColumnName("localspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Localspecialtytext)
                    .HasColumnName("localspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Managementintention)
                    .HasColumnName("managementintention")
                    .HasMaxLength(255);

                entity.Property(e => e.Messagetriggercode)
                    .HasColumnName("messagetriggercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtycode)
                    .HasColumnName("nationalspecialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalspecialtytext)
                    .HasColumnName("nationalspecialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumbertracingstatus)
                    .HasColumnName("nhsnumbertracingstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationstatus)
                    .HasColumnName("operationstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypecode)
                    .HasColumnName("operationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationtypetext)
                    .HasColumnName("operationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Profilecode)
                    .HasColumnName("profilecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Readyfordischargedate).HasColumnName("readyfordischargedate");

                entity.Property(e => e.Readyfordischargedatets)
                    .HasColumnName("readyfordischargedatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationcode)
                    .HasColumnName("theatrelocationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatrelocationtext)
                    .HasColumnName("theatrelocationtext")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessioncode)
                    .HasColumnName("theatresessioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Theatresessiondate).HasColumnName("theatresessiondate");

                entity.Property(e => e.Theatresessiondatets)
                    .HasColumnName("theatresessiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Theatresessiondescription)
                    .HasColumnName("theatresessiondescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_CoreTheatresessionprovider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("core_theatresessionprovider", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("core_theatresessionprovider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("core_theatresessionprovider__sequenceid_idx");

                entity.HasIndex(e => e.TheatresessionproviderId)
                    .HasDatabaseName("core_theatresessionprovider_theatresessionprovider_id_idx");

                entity.Property(e => e.Actioncode)
                    .HasColumnName("actioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actiontext)
                    .HasColumnName("actiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerdegree)
                    .HasColumnName("providerdegree")
                    .HasMaxLength(255);

                entity.Property(e => e.Provideridnumber)
                    .HasColumnName("provideridnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerolecode)
                    .HasColumnName("providerolecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerroletext)
                    .HasColumnName("providerroletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Setid).HasColumnName("setid");

                entity.Property(e => e.Teamidentifiercode)
                    .HasColumnName("teamidentifiercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Teamidentifiertext)
                    .HasColumnName("teamidentifiertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionId)
                    .HasColumnName("theatresession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TheatresessionproviderId)
                    .HasColumnName("theatresessionprovider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_CristopherPersonwithids>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cristopher_personwithids", "baseview");

                entity.Property(e => e.Ageyears).HasColumnName("ageyears");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_DcsForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_form", "entitystorematerialised");

                entity.HasIndex(e => e.FormId)
                    .HasDatabaseName("dcs_form_form_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("dcs_form__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("dcs_form__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formjson)
                    .HasColumnName("formjson")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsForminstance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_forminstance", "entitystorematerialised");

                entity.HasIndex(e => e.ForminstanceId)
                    .HasDatabaseName("dcs_forminstance_forminstance_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("dcs_forminstance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("dcs_forminstance__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontext)
                    .HasColumnName("formcontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastupdatedatetime).HasColumnName("lastupdatedatetime");

                entity.Property(e => e.Lastupdatedatetimets)
                    .HasColumnName("lastupdatedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Lastupdatedby)
                    .HasColumnName("lastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsFormresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formresponse", "entitystorematerialised");

                entity.HasIndex(e => e.FormresponseId)
                    .HasDatabaseName("dcs_formresponse_formresponse_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("dcs_formresponse__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("dcs_formresponse__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Fieldid)
                    .HasColumnName("fieldid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldquestion)
                    .HasColumnName("fieldquestion")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.FormId)
                    .HasColumnName("form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormresponseId)
                    .HasColumnName("formresponse_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Responsetext)
                    .HasColumnName("responsetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Responsevalue)
                    .HasColumnName("responsevalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionid)
                    .HasColumnName("sectionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsFormscore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_formscore", "entitystorematerialised");

                entity.HasIndex(e => e.FormscoreId)
                    .HasDatabaseName("dcs_formscore_formscore_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("dcs_formscore__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("dcs_formscore__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ForminstanceId)
                    .HasColumnName("forminstance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Forminstancescore)
                    .HasColumnName("forminstancescore")
                    .HasMaxLength(255);

                entity.Property(e => e.FormscoreId)
                    .HasColumnName("formscore_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewtype)
                    .HasColumnName("reviewtype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scoredescription)
                    .HasColumnName("scoredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scoreid)
                    .HasColumnName("scoreid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_DcsPatientregistration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcs_patientregistration", "entitystorematerialised");

                entity.HasIndex(e => e.PatientregistrationId)
                    .HasDatabaseName("dcs_patientregistration_patientregistration_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("dcs_patientregistration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("dcs_patientregistration__sequenceid_idx");

                entity.Property(e => e.Bloodtaken)
                    .HasColumnName("bloodtaken")
                    .HasMaxLength(255);

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasMaxLength(255);

                entity.Property(e => e.Bp)
                    .HasColumnName("bp")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcontextid)
                    .HasColumnName("formcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagptotake)
                    .HasColumnName("mrsagptotake")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsagroin)
                    .HasColumnName("mrsagroin")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsanose)
                    .HasColumnName("mrsanose")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrsawound)
                    .HasColumnName("mrsawound")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientregistrationId)
                    .HasColumnName("patientregistration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedure)
                    .HasColumnName("procedure")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulsereg)
                    .HasColumnName("pulsereg")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Surgerygrade)
                    .HasColumnName("surgerygrade")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoDemocolortest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_democolortest", "baseview");

                entity.Property(e => e.Colorcode)
                    .HasColumnName("colorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoColorId)
                    .HasColumnName("demo_color_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DemoDemosampleview1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_demosampleview1", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DemoLocaldemosampleentity1view1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_localdemosampleentity1view1", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_DemoPatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_patientbanner", "baseview");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Familyname).HasColumnName("familyname");

                entity.Property(e => e.Firstname).HasColumnName("firstname");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoPatientcontactdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_patientcontactdetails", "baseview");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Dob)
                    .HasColumnName("dob")
                    .HasColumnType("date");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoPatientinfoc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_patientinfoc1", "baseview");

                entity.Property(e => e.Contactdetails)
                    .HasColumnName("contactdetails")
                    .HasMaxLength(255);

                entity.Property(e => e.Dob)
                    .HasColumnName("dob")
                    .HasColumnType("date");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_person", "baseview");

                entity.Property(e => e.AnondateDob)
                    .HasColumnName("anondate_dob")
                    .HasColumnType("date");

                entity.Property(e => e.AnonstringFullnames)
                    .HasColumnName("anonstring_fullnames")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Interpreterrequired)
                    .HasColumnName("interpreterrequired")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagecode)
                    .HasColumnName("primarylanguagecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarylanguagetext)
                    .HasColumnName("primarylanguagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_test3", "baseview");

                entity.Property(e => e.Age)
                    .HasColumnName("age")
                    .HasColumnType("numeric");

                entity.Property(e => e.AneMsId)
                    .HasColumnName("ane_ms_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_DemoVillageview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_villageview", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTalukId)
                    .HasColumnName("demo_taluk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.TalukName)
                    .HasColumnName("taluk_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_EboardsAllbeds>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_allbeds", "baseview");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaydisplay)
                    .HasColumnName("bedbaydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsBcpexport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_bcpexport", "baseview");

                entity.Property(e => e.Admitdate).HasColumnName("admitdate");

                entity.Property(e => e.Admittedbed)
                    .HasColumnName("admittedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittedward)
                    .HasColumnName("admittedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.AllergyFlag).HasColumnName("allergy_flag");

                entity.Property(e => e.Allocatedbed)
                    .HasColumnName("allocatedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedward)
                    .HasColumnName("allocatedward")
                    .HasMaxLength(255);

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultant)
                    .HasColumnName("consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Ddelay).HasColumnName("ddelay");

                entity.Property(e => e.DeliriumFlag).HasColumnName("delirium_flag");

                entity.Property(e => e.DeliriumStatus)
                    .HasColumnName("delirium_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.DementiaFlag).HasColumnName("dementia_flag");

                entity.Property(e => e.DementiaStatus)
                    .HasColumnName("dementia_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.DiabetesFlag).HasColumnName("diabetes_flag");

                entity.Property(e => e.DysphagiaFlag).HasColumnName("dysphagia_flag");

                entity.Property(e => e.ErppathwayFlag).HasColumnName("erppathway_flag");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasColumnType("character varying");

                entity.Property(e => e.FluidswitheldFlag).HasColumnName("fluidswitheld_flag");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.HahStatus)
                    .HasColumnName("hah_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.HelpwithfeedingFlag).HasColumnName("helpwithfeeding_flag");

                entity.Property(e => e.HydrantdeviceFlag).HasColumnName("hydrantdevice_flag");

                entity.Property(e => e.Intendeddischargedate).HasColumnName("intendeddischargedate");

                entity.Property(e => e.Juniorbleep)
                    .HasColumnName("juniorbleep")
                    .HasMaxLength(255);

                entity.Property(e => e.LatextallergyFlag).HasColumnName("latextallergy_flag");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.MicroStatus)
                    .HasColumnName("micro_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.NilbymouthFlag).HasColumnName("nilbymouth_flag");

                entity.Property(e => e.Nurse)
                    .HasColumnName("nurse")
                    .HasMaxLength(255);

                entity.Property(e => e.OtStatus)
                    .HasColumnName("ot_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.OtText)
                    .HasColumnName("ot_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.Patientclass)
                    .HasColumnName("patientclass")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientsurveyStatus)
                    .HasColumnName("patientsurvey_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PrivatepatientFlag).HasColumnName("privatepatient_flag");

                entity.Property(e => e.PtStatus)
                    .HasColumnName("pt_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.PtText)
                    .HasColumnName("pt_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.RadiologyStatus)
                    .HasColumnName("radiology_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.ReadyfordischargeStatus)
                    .HasColumnName("readyfordischarge_status")
                    .HasMaxLength(255);

                entity.Property(e => e.RecoverypathwayFlag).HasColumnName("recoverypathway_flag");

                entity.Property(e => e.S2Status)
                    .HasColumnName("s2_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.S5Status)
                    .HasColumnName("s5_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.SamenameBadge).HasColumnName("samename_badge");

                entity.Property(e => e.SarcomaFlag).HasColumnName("sarcoma_flag");

                entity.Property(e => e.ScheduledfortheatreBadge).HasColumnName("scheduledfortheatre_badge");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.ToreturnformhduFlag).HasColumnName("toreturnformhdu_flag");

                entity.Property(e => e.TransportStatus)
                    .HasColumnName("transport_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.TtaStatus)
                    .HasColumnName("tta_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.TtaText)
                    .HasColumnName("tta_text")
                    .HasColumnType("character varying");

                entity.Property(e => e.TvnFlag).HasColumnName("tvn_flag");

                entity.Property(e => e.VteStatus)
                    .HasColumnName("vte_status")
                    .HasColumnType("character varying");

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsIma>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_ima", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay).HasColumnName("bedbaystatusdisplay");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Beddisplayhtml5).HasColumnName("beddisplayhtml5");

                entity.Property(e => e.Beddisplaynohtml).HasColumnName("beddisplaynohtml");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bednumbercolour).HasColumnName("bednumbercolour");

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultantlocator).HasColumnName("col_consultantlocator");

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep).HasColumnName("col_juniorbleep");

                entity.Property(e => e.ColNurse).HasColumnName("col_nurse");

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPatientNoimage).HasColumnName("col_patient_noimage");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Issamename).HasColumnName("issamename");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasColumnType("character varying");

                entity.Property(e => e.Tcidisplaylist).HasColumnName("tcidisplaylist");

                entity.Property(e => e.Tcidisplaylistwithbr).HasColumnName("tcidisplaylistwithbr");

                entity.Property(e => e.Tcilist).HasColumnName("tcilist");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.TherapiesComments).HasColumnName("therapies_comments");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardcomment1).HasColumnName("wardcomment1");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");

                entity.Property(e => e.Wbbbedstatus)
                    .HasColumnName("wbbbedstatus")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_EboardsRecentpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_recentpatients", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Bedsortstring).HasColumnName("bedsortstring");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentwardcode)
                    .HasColumnName("currentwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentwarddisplay)
                    .HasColumnName("currentwarddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddiplay)
                    .HasColumnName("warddiplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsTcis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_tcis", "baseview");

                entity.Property(e => e.Admitdateformatted)
                    .HasColumnName("admitdateformatted")
                    .HasColumnType("character varying");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedbeddisplay).HasColumnName("allocatedbeddisplay");

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay).HasColumnName("beddisplay");

                entity.Property(e => e.Bedsortstring).HasColumnName("bedsortstring");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tciduein).HasColumnName("tciduein");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_EboardsWardinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_wardinformation", "baseview");

                entity.Property(e => e.Rnohlogo).HasColumnName("rnohlogo");

                entity.Property(e => e.Rnohlogoleft).HasColumnName("rnohlogoleft");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinfo).HasColumnName("wardinfo");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardnameformatted).HasColumnName("wardnameformatted");

                entity.Property(e => e.Wardnameformattedwhite).HasColumnName("wardnameformattedwhite");

                entity.Property(e => e.Wardorder)
                    .HasColumnName("wardorder")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_EboardsWardswithwaitingarea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_wardswithwaitingarea", "baseview");

                entity.Property(e => e.Issuspended).HasColumnName("issuspended");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardorder)
                    .HasColumnName("wardorder")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EboardsWardwaitingarea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eboards_wardwaitingarea", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedbeddisplay).HasColumnName("allocatedbeddisplay");

                entity.Property(e => e.Availability).HasColumnName("availability");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode).HasColumnName("baycode");

                entity.Property(e => e.Baydisplay).HasColumnName("baydisplay");

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay).HasColumnName("bedbaystatusdisplay");

                entity.Property(e => e.Bedcode).HasColumnName("bedcode");

                entity.Property(e => e.Beddisplay).HasColumnName("beddisplay");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bedsortstring).HasColumnName("bedsortstring");

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep)
                    .HasColumnName("col_juniorbleep")
                    .HasMaxLength(255);

                entity.Property(e => e.ColNurse)
                    .HasColumnName("col_nurse")
                    .HasMaxLength(255);

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentwardcode)
                    .HasColumnName("currentwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Currentwarddisplay).HasColumnName("currentwarddisplay");

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Statusdescription).HasColumnName("statusdescription");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId).HasColumnName("wardbaybed_id");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardcomment1).HasColumnName("wardcomment1");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");
            });

            modelBuilder.Entity<baseview_EpmaDischargedispensingdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_dischargedispensingdata", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Daterequired).HasColumnName("daterequired");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptioncard).HasColumnName("prescriptioncard");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestedby)
                    .HasColumnName("requestedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusbadge).HasColumnName("statusbadge");
            });

            modelBuilder.Entity<baseview_EpmaDischargesummarryhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_dischargesummarryhistory", "baseview");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaDischargesummarryId)
                    .HasColumnName("epma_dischargesummarry_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_EpmaDischargesupplyrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_dischargesupplyrequest", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Daterequired).HasColumnName("daterequired");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaSupplyrequestId)
                    .HasColumnName("epma_supplyrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptioncard).HasColumnName("prescriptioncard");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestedby)
                    .HasColumnName("requestedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Requeststatus)
                    .HasColumnName("requeststatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Requeststatusbadge).HasColumnName("requeststatusbadge");
            });

            modelBuilder.Entity<baseview_EpmaDispensingdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_dispensingdata", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Daterequired).HasColumnName("daterequired");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptioncard).HasColumnName("prescriptioncard");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestedby)
                    .HasColumnName("requestedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusbadge).HasColumnName("statusbadge");
            });

            modelBuilder.Entity<baseview_EpmaDoseevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_doseevents", "baseview");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosedatetime).HasColumnName("dosedatetime");

                entity.Property(e => e.DoseeventsId)
                    .HasColumnName("doseevents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Grouptitration).HasColumnName("grouptitration");

                entity.Property(e => e.Iscancelled).HasColumnName("iscancelled");

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Titrateddescriptivedose)
                    .HasColumnName("titrateddescriptivedose")
                    .HasMaxLength(1000);

                entity.Property(e => e.Titrateddosesize)
                    .HasColumnName("titrateddosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrateddoseunit)
                    .HasColumnName("titrateddoseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Titratedstrengthdenominator)
                    .HasColumnName("titratedstrengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titratedstrengthdenominatorunits)
                    .HasColumnName("titratedstrengthdenominatorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titratedstrengthneumerator)
                    .HasColumnName("titratedstrengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titratedstrengthneumeratorunits)
                    .HasColumnName("titratedstrengthneumeratorunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrateduntildatetime).HasColumnName("titrateduntildatetime");
            });

            modelBuilder.Entity<baseview_EpmaEncounters>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_encounters", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedadmissiondate).HasColumnName("intendedadmissiondate");

                entity.Property(e => e.Intendedward)
                    .HasColumnName("intendedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sortdate).HasColumnName("sortdate");

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Summary).HasColumnName("summary");

                entity.Property(e => e.Tcidate).HasColumnName("tcidate");
            });

            modelBuilder.Entity<baseview_EpmaEpmaprescriptionhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_epmaprescriptionhistory", "baseview");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<baseview_EpmaFrequentvtmunit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_frequentvtmunit", "baseview");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseunit)
                    .HasColumnName("doseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescribedtimes).HasColumnName("prescribedtimes");
            });

            modelBuilder.Entity<baseview_EpmaGetbpobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_getbpobservations", "baseview");

                entity.Property(e => e.Diastolic)
                    .HasColumnName("diastolic")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationeventdatetime).HasColumnName("observationeventdatetime");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Systolic)
                    .HasColumnName("systolic")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaGetheightobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_getheightobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Incomplete).HasColumnName("incomplete");

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationeventdatetime)
                    .HasColumnName("observationeventdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaGetoxygenobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_getoxygenobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Incomplete).HasColumnName("incomplete");

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Method)
                    .HasColumnName("method")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationeventdatetime).HasColumnName("observationeventdatetime");

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaGetweightobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_getweightobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Incomplete).HasColumnName("incomplete");

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Method)
                    .HasColumnName("method")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationeventdatetime)
                    .HasColumnName("observationeventdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaInfusionevents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_infusionevents", "baseview");

                entity.Property(e => e.Administeredby)
                    .HasColumnName("administeredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Batchnumber)
                    .HasColumnName("batchnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventdatetime).HasColumnName("eventdatetime");

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirydate).HasColumnName("expirydate");

                entity.Property(e => e.InfusioneventsId)
                    .HasColumnName("infusionevents_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Planneddatetime).HasColumnName("planneddatetime");

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");
            });

            modelBuilder.Entity<baseview_EpmaMedicationcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_medicationcodes", "baseview");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationcodesId)
                    .HasColumnName("medicationcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminology)
                    .HasColumnName("terminology")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaMedicationingredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_medicationingredients", "baseview");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimaryingredient).HasColumnName("isprimaryingredient");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationingredientsId)
                    .HasColumnName("medicationingredients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaMedrecreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_medrecreview", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Medrecstatus).HasColumnName("medrecstatus");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaMedsonadmissionreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_medsonadmissionreview", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Moastatusbadge).HasColumnName("moastatusbadge");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaMedsondischargehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_medsondischargehistory", "baseview");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsondischargeId)
                    .HasColumnName("epma_medsondischarge_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_EpmaModonadmissionhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_modonadmissionhistory", "baseview");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsonadmissionId)
                    .HasColumnName("epma_medsonadmission_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_EpmaNursingadminlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_nursingadminlist", "baseview");

                entity.Property(e => e.Administrationbadge).HasColumnName("administrationbadge");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Datetimeofadministration).HasColumnName("datetimeofadministration");

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DoseNumber).HasColumnName("dose_number");

                entity.Property(e => e.DoseRank).HasColumnName("dose_rank");

                entity.Property(e => e.Dosestartdatetime).HasColumnName("dosestartdatetime");

                entity.Property(e => e.Dosingdaysfrequency)
                    .HasColumnName("dosingdaysfrequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosingdaysfrequencysize)
                    .HasColumnName("dosingdaysfrequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.LogicalId).HasColumnName("logical_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PosologyId)
                    .HasColumnName("posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptioncard).HasColumnName("prescriptioncard");

                entity.Property(e => e.Prescriptionduration)
                    .HasColumnName("prescriptionduration")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionenddate)
                    .HasColumnName("prescriptionenddate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Prescriptionstartdate).HasColumnName("prescriptionstartdate");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<baseview_EpmaOrdersetprescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_ordersetprescription", "baseview");

                entity.Property(e => e.Criteria)
                    .HasColumnName("criteria")
                    .HasMaxLength(255);

                entity.Property(e => e.DefinedCriteria).HasColumnName("defined_criteria");

                entity.Property(e => e.ExclusiveValue)
                    .HasColumnName("exclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.InclusiveValue)
                    .HasColumnName("inclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordersetname)
                    .HasColumnName("ordersetname")
                    .HasMaxLength(255);

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersetId)
                    .HasColumnName("prescriptionorderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersettypeId)
                    .HasColumnName("prescriptionordersettype_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaOrdersetprescriptiondetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_ordersetprescriptiondetails", "baseview");

                entity.Property(e => e.Dosesize)
                    .HasColumnName("dosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseunit)
                    .HasColumnName("doseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Form)
                    .HasColumnName("form")
                    .HasMaxLength(255);

                entity.Property(e => e.Frequency)
                    .HasColumnName("frequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Frequencysize)
                    .HasColumnName("frequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OrdersetId)
                    .HasColumnName("orderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OrdersetprescriptionId)
                    .HasColumnName("ordersetprescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaPharmacyreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_pharmacyreview", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastchangeoftherapy).HasColumnName("lastchangeoftherapy");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextdosevalue).HasColumnName("nextdosevalue");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusbadge).HasColumnName("statusbadge");

                entity.Property(e => e.Therapymodificationtype).HasColumnName("therapymodificationtype");
            });

            modelBuilder.Entity<baseview_EpmaPoaprescriptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_poaprescriptions", "baseview");

                entity.Property(e => e.Allowsubstitution)
                    .HasColumnName("allowsubstitution")
                    .HasMaxLength(1000);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(1000);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Oxygenadditionalinfo)
                    .HasColumnName("oxygenadditionalinfo")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasMaxLength(255);

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasMaxLength(255);

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaPrescriptiondetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_prescriptiondetail", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Dispensingfrom)
                    .HasColumnName("dispensingfrom")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isgastroresistant).HasColumnName("isgastroresistant");

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Ismodifiedrelease).HasColumnName("ismodifiedrelease");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Moatoip).HasColumnName("moatoip");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherindications)
                    .HasColumnName("otherindications")
                    .HasMaxLength(1000);

                entity.Property(e => e.Otherprescriptionsource)
                    .HasColumnName("otherprescriptionsource")
                    .HasMaxLength(1000);

                entity.Property(e => e.Oxygenadditionalinfo)
                    .HasColumnName("oxygenadditionalinfo")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsources)
                    .HasColumnName("prescriptionsources")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaPrescriptiondetaildev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_prescriptiondetaildev", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Dispensingfrom)
                    .HasColumnName("dispensingfrom")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isgastroresistant).HasColumnName("isgastroresistant");

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Ismodifiedrelease).HasColumnName("ismodifiedrelease");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Moatoip).HasColumnName("moatoip");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherindications)
                    .HasColumnName("otherindications")
                    .HasMaxLength(1000);

                entity.Property(e => e.Otherprescriptionsource)
                    .HasColumnName("otherprescriptionsource")
                    .HasMaxLength(1000);

                entity.Property(e => e.Oxygenadditionalinfo)
                    .HasColumnName("oxygenadditionalinfo")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsources)
                    .HasColumnName("prescriptionsources")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaPrescriptionmeta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_prescriptionmeta", "baseview");

                entity.Property(e => e.Data)
                    .HasColumnName("data")
                    .HasColumnType("json");

                entity.Property(e => e.Field).HasColumnName("field");
            });

            modelBuilder.Entity<baseview_EpmaPrescriptionroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_prescriptionroutes", "baseview");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isunlicensed).HasColumnName("isunlicensed");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionroutesId)
                    .HasColumnName("prescriptionroutes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaReviewhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_reviewhistory", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaReviewhistorydev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_reviewhistorydev", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaSupplyrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_supplyrequest", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Daterequired).HasColumnName("daterequired");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaSupplyrequestId)
                    .HasColumnName("epma_supplyrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptioncard).HasColumnName("prescriptioncard");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestedby)
                    .HasColumnName("requestedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Requeststatus)
                    .HasColumnName("requeststatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Requeststatusbadge).HasColumnName("requeststatusbadge");
            });

            modelBuilder.Entity<baseview_EpmaTherapyoverview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_therapyoverview", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isgastroresistant).HasColumnName("isgastroresistant");

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Ismodifiedrelease).HasColumnName("ismodifiedrelease");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Moatoip).HasColumnName("moatoip");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherprescriptionsource)
                    .HasColumnName("otherprescriptionsource")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsources)
                    .HasColumnName("prescriptionsources")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_EpmaTherapyoverviewdev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("epma_therapyoverviewdev", "baseview");

                entity.Property(e => e.Allowsubstitution).HasColumnName("allowsubstitution");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Heparin)
                    .HasColumnName("heparin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heparinunit)
                    .HasColumnName("heparinunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isgastroresistant).HasColumnName("isgastroresistant");

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Ismodifiedrelease).HasColumnName("ismodifiedrelease");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Linkedinfusionid)
                    .HasColumnName("linkedinfusionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Medications)
                    .HasColumnName("__medications")
                    .HasColumnType("json");

                entity.Property(e => e.Moatoip).HasColumnName("moatoip");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Otherprescriptionsource)
                    .HasColumnName("otherprescriptionsource")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Posology)
                    .HasColumnName("__posology")
                    .HasColumnType("json");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsources)
                    .HasColumnName("prescriptionsources")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reminderdays)
                    .HasColumnName("reminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Remindernotes)
                    .HasColumnName("remindernotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Routes)
                    .HasColumnName("__routes")
                    .HasColumnType("json");

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasColumnType("numeric");

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedDiagnosis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_diagnosis", "entitystorematerialised");

                entity.HasIndex(e => e.DiagnosisId)
                    .HasDatabaseName("extended_diagnosis_diagnosis_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("extended_diagnosis__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("extended_diagnosis__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DiagnosisId)
                    .HasColumnName("diagnosis_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diagnosisname)
                    .HasColumnName("diagnosisname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_encounter", "entitystorematerialised");

                entity.Property(e => e.Cancellationreasoncode)
                    .HasColumnName("cancellationreasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancellationreasontext)
                    .HasColumnName("cancellationreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbycode)
                    .HasColumnName("cancelledbycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Cancelledbytext)
                    .HasColumnName("cancelledbytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultantepisodeenddate).HasColumnName("consultantepisodeenddate");

                entity.Property(e => e.Consultantepisodestartdate).HasColumnName("consultantepisodestartdate");

                entity.Property(e => e.Consultingdoctorgmccode)
                    .HasColumnName("consultingdoctorgmccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorpasid)
                    .HasColumnName("consultingdoctorpasid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datethisprovider).HasColumnName("datethisprovider");

                entity.Property(e => e.Decisiontoadmitdate).HasColumnName("decisiontoadmitdate");

                entity.Property(e => e.Delayeddischargereasoncode)
                    .HasColumnName("delayeddischargereasoncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Delayeddischargereasontext)
                    .HasColumnName("delayeddischargereasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedleaveofabsencereturndate).HasColumnName("expectedleaveofabsencereturndate");

                entity.Property(e => e.Firstattendanceindicatoraltcode)
                    .HasColumnName("firstattendanceindicatoraltcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstattendanceindicatoraltcodingsystem)
                    .HasColumnName("firstattendanceindicatoraltcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstattendanceindicatoralttext)
                    .HasColumnName("firstattendanceindicatoralttext")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstattendanceindicatorcode)
                    .HasColumnName("firstattendanceindicatorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstattendanceindicatorcodingsystem)
                    .HasColumnName("firstattendanceindicatorcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstattendanceindicatortext)
                    .HasColumnName("firstattendanceindicatortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Guaranteedadmissiondate).HasColumnName("guaranteedadmissiondate");

                entity.Property(e => e.Intendedadmissiondate).HasColumnName("intendedadmissiondate");

                entity.Property(e => e.Intendedadmissiondatets)
                    .HasColumnName("intendedadmissiondatets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedbay)
                    .HasColumnName("intendedbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedbed)
                    .HasColumnName("intendedbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendeddischargedatetime).HasColumnName("intendeddischargedatetime");

                entity.Property(e => e.Intendeddischargedatetimets)
                    .HasColumnName("intendeddischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Intendedward)
                    .HasColumnName("intendedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastreviewdate).HasColumnName("lastreviewdate");

                entity.Property(e => e.Managementintention)
                    .HasColumnName("managementintention")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumbertracingstatus)
                    .HasColumnName("nhsnumbertracingstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Originaldateonlist).HasColumnName("originaldateonlist");

                entity.Property(e => e.Originaledd).HasColumnName("originaledd");

                entity.Property(e => e.Originaleddts)
                    .HasColumnName("originaleddts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Outcomeofattendancecode)
                    .HasColumnName("outcomeofattendancecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Outcomeofattendancetext)
                    .HasColumnName("outcomeofattendancetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Outcomeofofferofadmission)
                    .HasColumnName("outcomeofofferofadmission")
                    .HasMaxLength(255);

                entity.Property(e => e.Readyfordischargedate).HasColumnName("readyfordischargedate");

                entity.Property(e => e.Reasonforexceedingguaranteedate)
                    .HasColumnName("reasonforexceedingguaranteedate")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforremoval)
                    .HasColumnName("reasonforremoval")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referraldate).HasColumnName("referraldate");

                entity.Property(e => e.Referralmethodcode)
                    .HasColumnName("referralmethodcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralmethodtext)
                    .HasColumnName("referralmethodtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralreceiveddate).HasColumnName("referralreceiveddate");

                entity.Property(e => e.Referralsource)
                    .HasColumnName("referralsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Removaldate).HasColumnName("removaldate");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Servicetyperequestedaltcode)
                    .HasColumnName("servicetyperequestedaltcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Servicetyperequestedaltcodingsystem)
                    .HasColumnName("servicetyperequestedaltcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Servicetyperequestedalttext)
                    .HasColumnName("servicetyperequestedalttext")
                    .HasMaxLength(255);

                entity.Property(e => e.Servicetyperequestedcode)
                    .HasColumnName("servicetyperequestedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Servicetyperequestedcodingsystem)
                    .HasColumnName("servicetyperequestedcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Servicetyperequestedtext)
                    .HasColumnName("servicetyperequestedtext")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytreatmentfunctionaltcodingsystem)
                    .HasColumnName("specialtytreatmentfunctionaltcodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytreatmentfunctioncode)
                    .HasColumnName("specialtytreatmentfunctioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytreatmentfunctioncodingsystem)
                    .HasColumnName("specialtytreatmentfunctioncodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytreatmentfunctiontext)
                    .HasColumnName("specialtytreatmentfunctiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Suspensionenddate).HasColumnName("suspensionenddate");

                entity.Property(e => e.Suspensionstartdate).HasColumnName("suspensionstartdate");

                entity.Property(e => e.Tcidate).HasColumnName("tcidate");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Waitinglisttypecode)
                    .HasColumnName("waitinglisttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Waitinglisttypetext)
                    .HasColumnName("waitinglisttypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Writtenreferralindicator)
                    .HasColumnName("writtenreferralindicator")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedObservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_observation", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationId)
                    .HasDatabaseName("extended_observation_observation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("extended_observation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("extended_observation__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_ExtendedPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("extended_person", "entitystorematerialised");

                entity.HasIndex(e => e.PersonId)
                    .HasDatabaseName("extended_person_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("extended_person__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("extended_person__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Organisationcontactinfo)
                    .HasColumnName("organisationcontactinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationemail)
                    .HasColumnName("organisationemail")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationlocalcode)
                    .HasColumnName("organisationlocalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationname)
                    .HasColumnName("organisationname")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationnationalcode)
                    .HasColumnName("organisationnationalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationtypecode)
                    .HasColumnName("organisationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationtypetext)
                    .HasColumnName("organisationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpaddressline1)
                    .HasColumnName("pcpaddressline1")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpaddressline2)
                    .HasColumnName("pcpaddressline2")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpaddressline3)
                    .HasColumnName("pcpaddressline3")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpaddressline4)
                    .HasColumnName("pcpaddressline4")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpaddresspostcode)
                    .HasColumnName("pcpaddresspostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpfamilyname)
                    .HasColumnName("pcpfamilyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpgivenname)
                    .HasColumnName("pcpgivenname")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpnationalcode)
                    .HasColumnName("pcpnationalcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpprefix)
                    .HasColumnName("pcpprefix")
                    .HasMaxLength(255);

                entity.Property(e => e.Pcpprovidertype)
                    .HasColumnName("pcpprovidertype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_FluidbalanceCalculaterunningtotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_calculaterunningtotal", "baseview");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iotype).HasColumnName("iotype");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_FluidbalanceCieventshistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_cieventshistory", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusioneventId)
                    .HasColumnName("continuousinfusionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Fluidloss)
                    .HasColumnName("fluidloss")
                    .HasColumnType("numeric");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Pumpnumber)
                    .HasColumnName("pumpnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.RmActualdatetime).HasColumnName("rm_actualdatetime");

                entity.Property(e => e.RmActualeventtype)
                    .HasColumnName("rm_actualeventtype")
                    .HasColumnType("character varying");

                entity.Property(e => e.RmActualvalue)
                    .HasColumnName("rm_actualvalue")
                    .HasColumnType("character varying");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Totaladministeredvolume)
                    .HasColumnName("totaladministeredvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalremainingvolume)
                    .HasColumnName("totalremainingvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalvolume)
                    .HasColumnName("totalvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Validatedvolume)
                    .HasColumnName("validatedvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_FluidbalanceCigetpreviousvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_cigetpreviousvalue", "baseview");

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Pumpnumber)
                    .HasColumnName("pumpnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Rownum).HasColumnName("rownum");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");
            });

            modelBuilder.Entity<baseview_FluidbalanceContinuousinfusionnotcompleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_continuousinfusionnotcompleted", "baseview");

                entity.Property(e => e.Completiondatetime).HasColumnName("completiondatetime");

                entity.Property(e => e.Completionhours)
                    .HasColumnName("completionhours")
                    .HasColumnType("numeric");

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Totalremainingvolume)
                    .HasColumnName("totalremainingvolume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_FluidbalanceFluidbalancesessionroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_fluidbalancesessionroutes", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateadded).HasColumnName("dateadded");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenamended).HasColumnName("hasbeenamended");

                entity.Property(e => e.Isintake).HasColumnName("isintake");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routename)
                    .HasColumnName("routename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_FluidbalanceGetallcontinuousinfusions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_getallcontinuousinfusions", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Completioncomments)
                    .HasColumnName("completioncomments")
                    .HasMaxLength(255);

                entity.Property(e => e.ContinuousinfusionId)
                    .HasColumnName("continuousinfusion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Finishdatetime).HasColumnName("finishdatetime");

                entity.Property(e => e.Flowrate)
                    .HasColumnName("flowrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Flowrateunit)
                    .HasColumnName("flowrateunit")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Islineremovedoncompletion).HasColumnName("islineremovedoncompletion");

                entity.Property(e => e.Ispaused).HasColumnName("ispaused");

                entity.Property(e => e.Lastvalidated).HasColumnName("lastvalidated");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Pumpnumber)
                    .HasColumnName("pumpnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforpause)
                    .HasColumnName("reasonforpause")
                    .HasMaxLength(1000);

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RoutetypeId)
                    .HasColumnName("routetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Startdatetime).HasColumnName("startdatetime");

                entity.Property(e => e.Totaladministeredvolume)
                    .HasColumnName("totaladministeredvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalremainingvolume)
                    .HasColumnName("totalremainingvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.Totalvolume)
                    .HasColumnName("totalvolume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_FluidbalanceGetdisplayorderforfluidbalanceroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_getdisplayorderforfluidbalanceroute", "baseview");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isintake).HasColumnName("isintake");
            });

            modelBuilder.Entity<baseview_FluidbalanceGetweightobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_getweightobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Escalationofcare).HasColumnName("escalationofcare");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Incomplete).HasColumnName("incomplete");

                entity.Property(e => e.Isamended).HasColumnName("isamended");

                entity.Property(e => e.Method)
                    .HasColumnName("method")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationeventdatetime)
                    .HasColumnName("observationeventdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforamend)
                    .HasColumnName("reasonforamend")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonfordelete)
                    .HasColumnName("reasonfordelete")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforincompleteobservations)
                    .HasColumnName("reasonforincompleteobservations")
                    .HasMaxLength(1000);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_FluidbalanceUrineoutputhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fluidbalance_urineoutputhistory", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Device)
                    .HasColumnName("device")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedvolume)
                    .HasColumnName("expectedvolume")
                    .HasColumnType("numeric");

                entity.Property(e => e.FluidbalanceescalationId)
                    .HasColumnName("fluidbalanceescalation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionId)
                    .HasColumnName("fluidbalancesession_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancesessionrouteId)
                    .HasColumnName("fluidbalancesessionroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Modified)
                    .HasColumnName("modified")
                    .HasMaxLength(255);

                entity.Property(e => e.Personweight)
                    .HasColumnName("personweight")
                    .HasColumnType("numeric");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sbar).HasColumnName("sbar");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<baseview_FormbuilderFormbuilderlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("formbuilder_formbuilderlist", "baseview");

                entity.Property(e => e.Categorydescription)
                    .HasColumnName("categorydescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Categoryname)
                    .HasColumnName("categoryname")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.FormbuildercategoryId)
                    .HasColumnName("formbuildercategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuilderformId)
                    .HasColumnName("formbuilderform_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuildersystemtypeId)
                    .HasColumnName("formbuildersystemtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcomponents).HasColumnName("formcomponents");

                entity.Property(e => e.Formname)
                    .HasColumnName("formname")
                    .HasMaxLength(255);

                entity.Property(e => e.Systemtypedescription)
                    .HasColumnName("systemtypedescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Systemtypename)
                    .HasColumnName("systemtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<baseview_GpconnectAllallergyintolerance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gpconnect_allallergyintolerance", "baseview");

                entity.Property(e => e.Allergycode)
                    .HasColumnName("allergycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergynote).HasColumnName("allergynote");

                entity.Property(e => e.Allergytext)
                    .HasColumnName("allergytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assertedby)
                    .HasColumnName("assertedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Asserteddatetime).HasColumnName("asserteddatetime");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatus)
                    .HasColumnName("clinicalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddatetime).HasColumnName("enddatetime");

                entity.Property(e => e.GpconnectAllergyintoleranceId)
                    .HasColumnName("gpconnect_allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastoccurrence).HasColumnName("lastoccurrence");

                entity.Property(e => e.Onsetage)
                    .HasColumnName("onsetage")
                    .HasColumnType("numeric");

                entity.Property(e => e.Onsetdatetime).HasColumnName("onsetdatetime");

                entity.Property(e => e.Onsetperiodstart).HasColumnName("onsetperiodstart");

                entity.Property(e => e.Onsetperionend).HasColumnName("onsetperionend");

                entity.Property(e => e.Onsetstring)
                    .HasColumnName("onsetstring")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonended)
                    .HasColumnName("reasonended")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_GpconnectAllmedications>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gpconnect_allmedications", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtext)
                    .HasColumnName("formtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.GpconnectMedicationId)
                    .HasColumnName("gpconnect_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isbrand).HasColumnName("isbrand");

                entity.Property(e => e.Isoverthecounter).HasColumnName("isoverthecounter");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(1000);

                entity.Property(e => e.Mediationstatements)
                    .HasColumnName("mediationstatements")
                    .HasColumnType("json");

                entity.Property(e => e.Medicationcode)
                    .HasColumnName("medicationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationrequests)
                    .HasColumnName("medicationrequests")
                    .HasColumnType("json");

                entity.Property(e => e.Medicationtext)
                    .HasColumnName("medicationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_GpconnectDocumentreference>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gpconnect_documentreference", "baseview");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(1000);

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.Contentsize)
                    .HasColumnName("contentsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contenttype)
                    .HasColumnName("contenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createddatetime).HasColumnName("createddatetime");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectDocumentreferenceId)
                    .HasColumnName("gpconnect_documentreference_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Indexeddatetime).HasColumnName("indexeddatetime");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typecode)
                    .HasColumnName("typecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Typetext)
                    .HasColumnName("typetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ListBinarycheckboxvalueswithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_binarycheckboxvalueswithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Questioncustomhtml).HasColumnName("questioncustomhtml");

                entity.Property(e => e.Questioncustomhtmlalt).HasColumnName("questioncustomhtmlalt");

                entity.Property(e => e.Questionflag).HasColumnName("questionflag");

                entity.Property(e => e.Valueboolean).HasColumnName("valueboolean");
            });

            modelBuilder.Entity<baseview_ListDatewithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_datewithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuedate)
                    .HasColumnName("valuedate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Valuedateformatted).HasColumnName("valuedateformatted");
            });

            modelBuilder.Entity<baseview_ListLongtextwithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_longtextwithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuelongtext).HasColumnName("valuelongtext");
            });

            modelBuilder.Entity<baseview_ListSelectradiovalueswithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_selectradiovalueswithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Optiondisplaytext)
                    .HasColumnName("optiondisplaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Optionflag).HasColumnName("optionflag");

                entity.Property(e => e.Optionflagalt).HasColumnName("optionflagalt");

                entity.Property(e => e.Optionvaluetext)
                    .HasColumnName("optionvaluetext")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionoptioncollectionId)
                    .HasColumnName("questionoptioncollection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ListShorttextwithcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("list_shorttextwithcontext", "baseview");

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Valueshorttext)
                    .HasColumnName("valueshorttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_ListsAlllists>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("lists_alllists", "baseview");

                entity.Property(e => e.BaseviewId)
                    .HasColumnName("baseview_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Baseviewwardfield)
                    .HasColumnName("baseviewwardfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextid)
                    .HasColumnName("_contextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdchannelid)
                    .HasColumnName("_createdchannelid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Defaultcontext)
                    .HasColumnName("defaultcontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Defaultcontextfield)
                    .HasColumnName("defaultcontextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Defaultrowcssstyle)
                    .HasColumnName("defaultrowcssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Expirydate)
                    .HasColumnName("_expirydate")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Listcontextkey)
                    .HasColumnName("listcontextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Listdescription)
                    .HasColumnName("listdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Listname)
                    .HasColumnName("listname")
                    .HasMaxLength(255);

                entity.Property(e => e.Listnamespace)
                    .HasColumnName("listnamespace")
                    .HasMaxLength(255);

                entity.Property(e => e.Listnamespaceid)
                    .HasColumnName("listnamespaceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Matchedcontextfield)
                    .HasColumnName("matchedcontextfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientbannerfield)
                    .HasColumnName("patientbannerfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rowcssfield)
                    .HasColumnName("rowcssfield")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tablecssstyle)
                    .HasColumnName("tablecssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Tableheadercssstyle)
                    .HasColumnName("tableheadercssstyle")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneClinicalnotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_clinicalnotes", "entitystorematerialised");

                entity.HasIndex(e => e.AneClinicalnotesId)
                    .HasDatabaseName("local_ane_clinicalnotes_ane_clinicalnotes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_ane_clinicalnotes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_ane_clinicalnotes__sequenceid_idx");

                entity.Property(e => e.AneClinicalnotesId)
                    .HasColumnName("ane_clinicalnotes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.AneCodingIdClinicalnotes)
                    .HasColumnName("ane_coding_id_clinicalnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalnotes)
                    .HasColumnName("clinicalnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneCoding>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_coding", "entitystorematerialised");

                entity.HasIndex(e => e.AneCodingId)
                    .HasDatabaseName("local_ane_coding_ane_coding_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_ane_coding__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_ane_coding__sequenceid_idx");

                entity.Property(e => e.Additionaltreatmentsarray)
                    .HasColumnName("additionaltreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anaesthesiaarray)
                    .HasColumnName("anaesthesiaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Anatomicalareaarray)
                    .HasColumnName("anatomicalareaarray")
                    .HasMaxLength(255);

                entity.Property(e => e.AneCodingId)
                    .HasColumnName("ane_coding_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Diagnosisarray)
                    .HasColumnName("diagnosisarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargearray)
                    .HasColumnName("dischargearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargenowarray)
                    .HasColumnName("dischargenowarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargeplanningarray)
                    .HasColumnName("dischargeplanningarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Disposalward)
                    .HasColumnName("disposalward")
                    .HasMaxLength(255);

                entity.Property(e => e.Headandneckarray)
                    .HasColumnName("headandneckarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Informationcategoryarray)
                    .HasColumnName("informationcategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Injuriesarray)
                    .HasColumnName("injuriesarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Investigationarray)
                    .HasColumnName("investigationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Laterallityarray)
                    .HasColumnName("laterallityarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lifesupportarray)
                    .HasColumnName("lifesupportarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimbarray)
                    .HasColumnName("lowerlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Maindiagnosis)
                    .HasColumnName("maindiagnosis")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationarray)
                    .HasColumnName("medicationarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicinearray)
                    .HasColumnName("medicinearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minorilnessarray)
                    .HasColumnName("minorilnessarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Minortreatmentsarray)
                    .HasColumnName("minortreatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Monitoringarray)
                    .HasColumnName("monitoringarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Obsandgynaearray)
                    .HasColumnName("obsandgynaearray")
                    .HasMaxLength(255);

                entity.Property(e => e.Ophthalmologyarray)
                    .HasColumnName("ophthalmologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Orthopaedicsarray)
                    .HasColumnName("orthopaedicsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Othercategoryarray)
                    .HasColumnName("othercategoryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduresarray)
                    .HasColumnName("proceduresarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Psychiatryarray)
                    .HasColumnName("psychiatryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewingdoctor)
                    .HasColumnName("reviewingdoctor")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Seniorreviewarray)
                    .HasColumnName("seniorreviewarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Surgeryarray)
                    .HasColumnName("surgeryarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentsarray)
                    .HasColumnName("treatmentsarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Trunkarray)
                    .HasColumnName("trunkarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Upperlimbarray)
                    .HasColumnName("upperlimbarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Urologyarray)
                    .HasColumnName("urologyarray")
                    .HasMaxLength(255);

                entity.Property(e => e.Woundclosuresarray)
                    .HasColumnName("woundclosuresarray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneDesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_desc", "entitystorematerialised");

                entity.HasIndex(e => e.AneDescId)
                    .HasDatabaseName("local_ane_desc_ane_desc_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_ane_desc__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_ane_desc__sequenceid_idx");

                entity.Property(e => e.AneDescId)
                    .HasColumnName("ane_desc_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasColumnType("citext");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_encounter", "entitystorematerialised");

                entity.HasIndex(e => e.AneEncounterId)
                    .HasDatabaseName("local_ane_encounter_ane_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_ane_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_ane_encounter__sequenceid_idx");

                entity.Property(e => e.Actualdeparturenow).HasColumnName("actualdeparturenow");

                entity.Property(e => e.Allergyinformation)
                    .HasColumnName("allergyinformation")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ambulancereference)
                    .HasColumnName("ambulancereference")
                    .HasMaxLength(255);

                entity.Property(e => e.AneEncounterId)
                    .HasColumnName("ane_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Anecategory)
                    .HasColumnName("anecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Anelocation)
                    .HasColumnName("anelocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Anestatus)
                    .HasColumnName("anestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Arrivaltime).HasColumnName("arrivaltime");

                entity.Property(e => e.Clinician)
                    .HasColumnName("clinician")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Ct)
                    .HasColumnName("ct")
                    .HasMaxLength(255);

                entity.Property(e => e.Departuredatetime).HasColumnName("departuredatetime");

                entity.Property(e => e.Disposal)
                    .HasColumnName("disposal")
                    .HasMaxLength(255);

                entity.Property(e => e.Dtaward)
                    .HasColumnName("dtaward")
                    .HasMaxLength(255);

                entity.Property(e => e.Editbreachoveride).HasColumnName("editbreachoveride");

                entity.Property(e => e.Effectivedischargedatetime)
                    .HasColumnName("effectivedischargedatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Latestlabresults)
                    .HasColumnName("latestlabresults")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Presentingcomplaint)
                    .HasColumnName("presentingcomplaint")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratorsee)
                    .HasColumnName("ratorsee")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforbreach)
                    .HasColumnName("reasonforbreach")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referredtospecialty)
                    .HasColumnName("referredtospecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredtospecialtytime).HasColumnName("referredtospecialtytime");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatmentcompletedatetime).HasColumnName("treatmentcompletedatetime");

                entity.Property(e => e.Treatmentstartdatetime).HasColumnName("treatmentstartdatetime");

                entity.Property(e => e.Triagecategory)
                    .HasColumnName("triagecategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Triaged).HasColumnName("triaged");

                entity.Property(e => e.Triagedatetime).HasColumnName("triagedatetime");

                entity.Property(e => e.Xray)
                    .HasColumnName("xray")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalAneVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_ane_vendor", "entitystorematerialised");

                entity.HasIndex(e => e.AneVendorId)
                    .HasDatabaseName("local_ane_vendor_ane_vendor_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_ane_vendor__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_ane_vendor__sequenceid_idx");

                entity.Property(e => e.AneVendorId)
                    .HasColumnName("ane_vendor_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAdmintask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintask", "entitystorematerialised");

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskactionedby)
                    .HasColumnName("taskactionedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskactioneddate).HasColumnName("taskactioneddate");

                entity.Property(e => e.Taskcomments).HasColumnName("taskcomments");

                entity.Property(e => e.Taskcreateddate).HasColumnName("taskcreateddate");

                entity.Property(e => e.Taskcreateduser)
                    .HasColumnName("taskcreateduser")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Taskkey)
                    .HasColumnName("taskkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktype)
                    .HasColumnName("tasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAdmintaskhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_admintaskhistory", "entitystorematerialised");

                entity.Property(e => e.Actiondate).HasColumnName("actiondate");

                entity.Property(e => e.Actionuser)
                    .HasColumnName("actionuser")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskId)
                    .HasColumnName("cof_admintask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAdmintaskhistoryId)
                    .HasColumnName("cof_admintaskhistory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskcomments)
                    .HasColumnName("taskcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskisactioned).HasColumnName("taskisactioned");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAppointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_appointment", "entitystorematerialised");

                entity.Property(e => e.Appointmentcomments)
                    .HasColumnName("appointmentcomments")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.CofAppointmentId)
                    .HasColumnName("cof_appointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Nextappointmentschedule)
                    .HasColumnName("nextappointmentschedule")
                    .HasMaxLength(255);

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofAttendancestatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_attendancestatus", "entitystorematerialised");

                entity.Property(e => e.CofAttendancestatusId)
                    .HasColumnName("cof_attendancestatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isselected).HasColumnName("isselected");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofHl7messaging>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_hl7messaging", "entitystorematerialised");

                entity.Property(e => e.CofHl7messagingId)
                    .HasColumnName("cof_hl7messaging_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hl7message).HasColumnName("hl7message");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentassignedto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentassignedto", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentassignedtoId)
                    .HasColumnName("cof_lookupappointmentassignedto_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentattendstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentattendstatus", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentattendstatusId)
                    .HasColumnName("cof_lookupappointmentattendstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isattended).HasColumnName("isattended");

                entity.Property(e => e.Iscancelled).HasColumnName("iscancelled");

                entity.Property(e => e.Isdna).HasColumnName("isdna");

                entity.Property(e => e.Isunattended).HasColumnName("isunattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentpriority>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentpriority", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentpriorityId)
                    .HasColumnName("cof_lookupappointmentpriority_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Is2ww).HasColumnName("is2ww");

                entity.Property(e => e.Isrout).HasColumnName("isrout");

                entity.Property(e => e.Isurg).HasColumnName("isurg");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentreason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentreason", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentreasonId)
                    .HasColumnName("cof_lookupappointmentreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdnadtg).HasColumnName("isdnadtg");

                entity.Property(e => e.Isdnafirapp).HasColumnName("isdnafirapp");

                entity.Property(e => e.Isdnafuam).HasColumnName("isdnafuam");

                entity.Property(e => e.Isdnafuwt).HasColumnName("isdnafuwt");

                entity.Property(e => e.Isfureq).HasColumnName("isfureq");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nonrttattended).HasColumnName("nonrttattended");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttattended).HasColumnName("rttattended");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmentschedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmentschedule", "entitystorematerialised");

                entity.Property(e => e.CofLookupappointmentscheduleId)
                    .HasColumnName("cof_lookupappointmentschedule_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupappointmenttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupappointmenttype", "entitystorematerialised");

                entity.Property(e => e.Appointmenttype)
                    .HasColumnName("appointmenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupappointmenttypeId)
                    .HasColumnName("cof_lookupappointmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupattendanceoutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupattendanceoutcome", "entitystorematerialised");

                entity.Property(e => e.CofLookupattendanceoutcomeId)
                    .HasColumnName("cof_lookupattendanceoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Discdisable).HasColumnName("discdisable");

                entity.Property(e => e.Isaddnow).HasColumnName("isaddnow");

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isattout).HasColumnName("isattout");

                entity.Property(e => e.Isdiagreq).HasColumnName("isdiagreq");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isdnaout).HasColumnName("isdnaout");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isrefpat).HasColumnName("isrefpat");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupclinicoutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupclinicoutcome", "entitystorematerialised");

                entity.Property(e => e.CofLookupclinicoutcomeId)
                    .HasColumnName("cof_lookupclinicoutcome_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Idpk)
                    .HasColumnName("idpk")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactivertt).HasColumnName("isactivertt");

                entity.Property(e => e.Isadmittod).HasColumnName("isadmittod");

                entity.Property(e => e.Isclinoutdischarge).HasColumnName("isclinoutdischarge");

                entity.Property(e => e.Isdecisiontotreat).HasColumnName("isdecisiontotreat");

                entity.Property(e => e.Isdectre).HasColumnName("isdectre");

                entity.Property(e => e.Isfirstdeft).HasColumnName("isfirstdeft");

                entity.Property(e => e.Isfollup).HasColumnName("isfollup");

                entity.Property(e => e.Isnotactivertt).HasColumnName("isnotactivertt");

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Isrefext).HasColumnName("isrefext");

                entity.Property(e => e.Isrefint).HasColumnName("isrefint");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Notrereq).HasColumnName("notrereq");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupdecisiontotreatreason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdecisiontotreatreason", "entitystorematerialised");

                entity.Property(e => e.CofLookupdecisiontotreatreasonId)
                    .HasColumnName("cof_lookupdecisiontotreatreason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isadddcip).HasColumnName("isadddcip");

                entity.Property(e => e.Isdttreason).HasColumnName("isdttreason");

                entity.Property(e => e.Istciagreed).HasColumnName("istciagreed");

                entity.Property(e => e.Istreatfop).HasColumnName("istreatfop");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupdischargereason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupdischargereason", "entitystorematerialised");

                entity.Property(e => e.CofLookupdischargereasonId)
                    .HasColumnName("cof_lookupdischargereason_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactiveattendreason).HasColumnName("isactiveattendreason");

                entity.Property(e => e.Iscdnotre).HasColumnName("iscdnotre");

                entity.Property(e => e.Isdnafirst).HasColumnName("isdnafirst");

                entity.Property(e => e.Isdnafu).HasColumnName("isdnafu");

                entity.Property(e => e.Isnonactiveattendreason).HasColumnName("isnonactiveattendreason");

                entity.Property(e => e.Isnotdnare).HasColumnName("isnotdnare");

                entity.Property(e => e.Isreftru).HasColumnName("isreftru");

                entity.Property(e => e.Issendift).HasColumnName("issendift");

                entity.Property(e => e.Istreatgiven).HasColumnName("istreatgiven");

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupgeneral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupgeneral", "entitystorematerialised");

                entity.Property(e => e.CofLookupgeneralId)
                    .HasColumnName("cof_lookupgeneral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isno).HasColumnName("isno");

                entity.Property(e => e.Isoff).HasColumnName("isoff");

                entity.Property(e => e.Ison).HasColumnName("ison");

                entity.Property(e => e.Isyes).HasColumnName("isyes");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupinactivertt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupinactivertt", "entitystorematerialised");

                entity.Property(e => e.CofLookupinactiverttId)
                    .HasColumnName("cof_lookupinactivertt_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Ispatmon).HasColumnName("ispatmon");

                entity.Property(e => e.Ispattreat).HasColumnName("ispattreat");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuplaterality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuplaterality", "entitystorematerialised");

                entity.Property(e => e.CofLookuplateralityId)
                    .HasColumnName("cof_lookuplaterality_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupnextappointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupnextappointment", "entitystorematerialised");

                entity.Property(e => e.CofLookupnextappointmentId)
                    .HasColumnName("cof_lookupnextappointment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isnextavail).HasColumnName("isnextavail");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupprocedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupprocedure", "entitystorematerialised");

                entity.Property(e => e.CofLookupprocedureId)
                    .HasColumnName("cof_lookupprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Isplaster).HasColumnName("isplaster");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupriskdescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskdescription", "entitystorematerialised");

                entity.Property(e => e.Accesslevel)
                    .HasColumnName("accesslevel")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupriskdescriptionId)
                    .HasColumnName("cof_lookupriskdescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Notifiable)
                    .HasColumnName("notifiable")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskgroup)
                    .HasColumnName("riskgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskidentifier)
                    .HasColumnName("riskidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Risksymbol)
                    .HasColumnName("risksymbol")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate).HasColumnName("startdate");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupriskflag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupriskflag", "entitystorematerialised");

                entity.Property(e => e.Ageless18).HasColumnName("ageless18");

                entity.Property(e => e.CofLookupriskflagId)
                    .HasColumnName("cof_lookupriskflag_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskid)
                    .HasColumnName("riskid")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warning)
                    .HasColumnName("warning")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuprttpathwaytype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuprttpathwaytype", "entitystorematerialised");

                entity.Property(e => e.CofLookuprttpathwaytypeId)
                    .HasColumnName("cof_lookuprttpathwaytype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isrttpath).HasColumnName("isrttpath");

                entity.Property(e => e.Notrttpath).HasColumnName("notrttpath");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupscheduleperriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupscheduleperriod", "entitystorematerialised");

                entity.Property(e => e.CofLookupscheduleperriodId)
                    .HasColumnName("cof_lookupscheduleperriod_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupsite>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupsite", "entitystorematerialised");

                entity.Property(e => e.CofLookupsiteId)
                    .HasColumnName("cof_lookupsite_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isother).HasColumnName("isother");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookupspecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookupspecialty", "entitystorematerialised");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.CofLookupspecialtyId)
                    .HasColumnName("cof_lookupspecialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofLookuptaskattendancemapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_lookuptaskattendancemapping", "entitystorematerialised");

                entity.Property(e => e.CofLookuptaskattendancemappingId)
                    .HasColumnName("cof_lookuptaskattendancemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Isaddwl).HasColumnName("isaddwl");

                entity.Property(e => e.Isadnow).HasColumnName("isadnow");

                entity.Property(e => e.Isdiscpat).HasColumnName("isdiscpat");

                entity.Property(e => e.Isfuopreq).HasColumnName("isfuopreq");

                entity.Property(e => e.Isreschapp).HasColumnName("isreschapp");

                entity.Property(e => e.Istrepro).HasColumnName("istrepro");

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofPersonrisk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_personrisk", "entitystorematerialised");

                entity.Property(e => e.CofPersonriskId)
                    .HasColumnName("cof_personrisk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Formattedenddate)
                    .HasColumnName("formattedenddate")
                    .HasMaxLength(255);

                entity.Property(e => e.Formattedstartdate)
                    .HasColumnName("formattedstartdate")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskcode)
                    .HasColumnName("riskcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Riskdescription)
                    .HasColumnName("riskdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("date");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_record", "entitystorematerialised");

                entity.Property(e => e.Appointmentcomments).HasColumnName("appointmentcomments");

                entity.Property(e => e.Appointmentconsultant)
                    .HasColumnName("appointmentconsultant")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmentreason)
                    .HasColumnName("appointmentreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcome)
                    .HasColumnName("attendanceoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendanceoutcomeaddtowl).HasColumnName("attendanceoutcomeaddtowl");

                entity.Property(e => e.Attendanceoutcomeadmitnow).HasColumnName("attendanceoutcomeadmitnow");

                entity.Property(e => e.Attendanceoutcomecomments).HasColumnName("attendanceoutcomecomments");

                entity.Property(e => e.Attendanceoutcomediagnostics).HasColumnName("attendanceoutcomediagnostics");

                entity.Property(e => e.Attendanceoutcomedischargepatient).HasColumnName("attendanceoutcomedischargepatient");

                entity.Property(e => e.Attendanceoutcomefollowup).HasColumnName("attendanceoutcomefollowup");

                entity.Property(e => e.Attendanceoutcomerefer).HasColumnName("attendanceoutcomerefer");

                entity.Property(e => e.Attendanceoutcomereschedule).HasColumnName("attendanceoutcomereschedule");

                entity.Property(e => e.Attendanceoutcometreatmentgiven).HasColumnName("attendanceoutcometreatmentgiven");

                entity.Property(e => e.Canbewithregistrar)
                    .HasColumnName("canbewithregistrar")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcome)
                    .HasColumnName("clinicoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicoutcomecomments).HasColumnName("clinicoutcomecomments");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofrecordlastupdatedby)
                    .HasColumnName("cofrecordlastupdatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Decisiontotreatreason)
                    .HasColumnName("decisiontotreatreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereason)
                    .HasColumnName("dischargereason")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargereasoncomments).HasColumnName("dischargereasoncomments");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Incorrectrtt).HasColumnName("incorrectrtt");

                entity.Property(e => e.Incorrectrttreason).HasColumnName("incorrectrttreason");

                entity.Property(e => e.Iscompleted).HasColumnName("iscompleted");

                entity.Property(e => e.Manualattend).HasColumnName("manualattend");

                entity.Property(e => e.Manualdna).HasColumnName("manualdna");

                entity.Property(e => e.Overbookingallowed)
                    .HasColumnName("overbookingallowed")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Riskflagcontinue).HasColumnName("riskflagcontinue");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Scheduleappointmentin)
                    .HasColumnName("scheduleappointmentin")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Supporteddischarge)
                    .HasColumnName("supporteddischarge")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcitaskcreated).HasColumnName("tcitaskcreated");

                entity.Property(e => e.Tcitaskcreateddate).HasColumnName("tcitaskcreateddate");

                entity.Property(e => e.Tcitasktype)
                    .HasColumnName("tcitasktype")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weeksmonths)
                    .HasColumnName("weeksmonths")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofRttextract>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_rttextract", "entitystorematerialised");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Appointmentstatus)
                    .HasColumnName("appointmentstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Appointmenttime)
                    .HasColumnName("appointmenttime")
                    .HasMaxLength(255);

                entity.Property(e => e.Cliniccode)
                    .HasColumnName("cliniccode")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicdescription)
                    .HasColumnName("clinicdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicowner)
                    .HasColumnName("clinicowner")
                    .HasMaxLength(255);

                entity.Property(e => e.CofRttextractId)
                    .HasColumnName("cof_rttextract_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Cofkey)
                    .HasColumnName("cofkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Extractdatetime).HasColumnName("extractdatetime");

                entity.Property(e => e.Leadconsultantcode)
                    .HasColumnName("leadconsultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Leadconsultantname)
                    .HasColumnName("leadconsultantname")
                    .HasMaxLength(255);

                entity.Property(e => e.Localrttcode)
                    .HasColumnName("localrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nationalrttcode)
                    .HasColumnName("nationalrttcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttbreachdate).HasColumnName("rttbreachdate");

                entity.Property(e => e.Rttcurrentwaittime).HasColumnName("rttcurrentwaittime");

                entity.Property(e => e.Rttdescription)
                    .HasColumnName("rttdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathway)
                    .HasColumnName("rttpathway")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttpathwayid)
                    .HasColumnName("rttpathwayid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rttstartdate).HasColumnName("rttstartdate");

                entity.Property(e => e.Rttwaittimeatappointment).HasColumnName("rttwaittimeatappointment");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofSubtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_subtype", "entitystorematerialised");

                entity.Property(e => e.CofSubtypeId)
                    .HasColumnName("cof_subtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Subtypename)
                    .HasColumnName("subtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasktypename)
                    .HasColumnName("tasktypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofSystemattributes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_systemattributes", "entitystorematerialised");

                entity.Property(e => e.Attributename)
                    .HasColumnName("attributename")
                    .HasMaxLength(255);

                entity.Property(e => e.Binaryvalue).HasColumnName("binaryvalue");

                entity.Property(e => e.CofSystemattributesId)
                    .HasColumnName("cof_systemattributes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Numericvalue)
                    .HasColumnName("numericvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalCofTreatment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_cof_treatment", "entitystorematerialised");

                entity.Property(e => e.CofRecordId)
                    .HasColumnName("cof_record_id")
                    .HasMaxLength(255);

                entity.Property(e => e.CofTreatmentId)
                    .HasColumnName("cof_treatment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");

                entity.Property(e => e.Laterality)
                    .HasColumnName("laterality")
                    .HasMaxLength(255);

                entity.Property(e => e.Plaster)
                    .HasColumnName("plaster")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredisplay)
                    .HasColumnName("proceduredisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedureother)
                    .HasColumnName("procedureother")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sitedescription)
                    .HasColumnName("sitedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitedisplay)
                    .HasColumnName("sitedisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Sitename)
                    .HasColumnName("sitename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Treatment)
                    .HasColumnName("treatment")
                    .HasMaxLength(255);

                entity.Property(e => e.Treatmentcomments)
                    .HasColumnName("treatmentcomments")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity1111", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity1111Id)
                    .HasDatabaseName("local_demo1_exportentity1111_demo1_exportentity1111_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_exportentity1111__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_exportentity1111__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity1111Id)
                    .HasColumnName("demo1_exportentity1111_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp10)
                    .HasColumnName("exp10")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity2222>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity2222", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity2222Id)
                    .HasDatabaseName("local_demo1_exportentity2222_demo1_exportentity2222_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_exportentity2222__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_exportentity2222__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity2222Id)
                    .HasColumnName("demo1_exportentity2222_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2).HasColumnName("exp2");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9).HasColumnName("exp9");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity3333>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity3333", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity3333Id)
                    .HasDatabaseName("local_demo1_exportentity3333_demo1_exportentity3333_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_exportentity3333__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_exportentity3333__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity3333Id)
                    .HasColumnName("demo1_exportentity3333_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4)
                    .HasColumnName("exp4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity4444>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity4444", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity4444Id)
                    .HasDatabaseName("local_demo1_exportentity4444_demo1_exportentity4444_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_exportentity4444__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_exportentity4444__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity4444Id)
                    .HasColumnName("demo1_exportentity4444_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Exp1)
                    .HasColumnName("exp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp2)
                    .HasColumnName("exp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp222)
                    .HasColumnName("exp222")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp3)
                    .HasColumnName("exp3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp4).HasColumnName("exp4");

                entity.Property(e => e.Exp5)
                    .HasColumnName("exp5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp6)
                    .HasColumnName("exp6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp7)
                    .HasColumnName("exp7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp8)
                    .HasColumnName("exp8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Exp9)
                    .HasColumnName("exp9")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Exportentity6666>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_exportentity6666", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1Exportentity6666Id)
                    .HasDatabaseName("local_demo1_exportentity6666_demo1_exportentity6666_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_exportentity6666__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_exportentity6666__sequenceid_idx");

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1Exportentity6666Id)
                    .HasColumnName("demo1_exportentity6666_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemo1Newsampletoday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo1_newsampletoday", "entitystorematerialised");

                entity.HasIndex(e => e.Demo1NewsampletodayId)
                    .HasDatabaseName("local_demo1_newsampletoday_demo1_newsampletoday_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo1_newsampletoday__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo1_newsampletoday__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Demo1NewsampletodayId)
                    .HasColumnName("demo1_newsampletoday_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBedboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bedboard", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBedboardId)
                    .HasColumnName("demo_bedboard_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd).HasColumnName("edd");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ews).HasColumnName("ews");

                entity.Property(e => e.Hah).HasColumnName("hah");

                entity.Property(e => e.Knownas)
                    .HasColumnName("knownas")
                    .HasColumnType("citext");

                entity.Property(e => e.Nilbymouth).HasColumnName("nilbymouth");

                entity.Property(e => e.Nurseallocated)
                    .HasColumnName("nurseallocated")
                    .HasColumnType("citext");

                entity.Property(e => e.Nurseincharge)
                    .HasColumnName("nurseincharge")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Vtecompleted).HasColumnName("vtecompleted");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bi", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBiId)
                    .HasColumnName("demo_bi_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBloodpressure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bloodpressure", "entitystorematerialised");

                entity.HasIndex(e => e.DemoBloodpressureId)
                    .HasDatabaseName("local_demo_bloodpressure_demo_bloodpressure_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_bloodpressure__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_bloodpressure__sequenceid_idx");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(2000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBloodpressureId)
                    .HasColumnName("demo_bloodpressure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Diastolicbp).HasColumnName("diastolicbp");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Systolicbp).HasColumnName("systolicbp");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoBmitest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_bmitest", "entitystorematerialised");

                entity.Property(e => e.Bmiofperson)
                    .HasColumnName("bmiofperson")
                    .HasColumnType("citext");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoBmitestId)
                    .HasColumnName("demo_bmitest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologysystem)
                    .HasColumnName("_terminologysystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Weightofperson)
                    .HasColumnName("weightofperson")
                    .HasColumnType("citext");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoColor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_color", "entitystorematerialised");

                entity.HasIndex(e => e.DemoColorId)
                    .HasDatabaseName("local_demo_color_demo_color_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_color__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_color__sequenceid_idx");

                entity.Property(e => e.Colorcode)
                    .HasColumnName("colorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoColorId)
                    .HasColumnName("demo_color_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_company", "entitystorematerialised");

                entity.HasIndex(e => e.DemoCompanyId)
                    .HasDatabaseName("local_demo_company_demo_company_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_company__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_company__sequenceid_idx");

                entity.Property(e => e.Companyname)
                    .HasColumnName("companyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoCompanyId)
                    .HasColumnName("demo_company_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operatingcurrency)
                    .HasColumnName("operatingcurrency")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Testcomp)
                    .HasColumnName("testcomp")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_country", "entitystorematerialised");

                entity.HasIndex(e => e.DemoCountryId)
                    .HasDatabaseName("local_demo_country_demo_country_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_country__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_country__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoCountryId)
                    .HasColumnName("demo_country_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoCurrency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_currency", "entitystorematerialised");

                entity.HasIndex(e => e.DemoCurrencyId)
                    .HasDatabaseName("local_demo_currency_demo_currency_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_currency__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_currency__sequenceid_idx");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdat)
                    .HasColumnName("createdat")
                    .HasColumnType("date");

                entity.Property(e => e.Createdattime).HasColumnName("createdattime");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Currencyname)
                    .HasColumnName("currencyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Currencynumber).HasColumnName("currencynumber");

                entity.Property(e => e.DemoCurrencyId)
                    .HasColumnName("demo_currency_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifiedat)
                    .HasColumnName("modifiedat")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Remarks).HasColumnName("remarks");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoDemopatientdetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_demopatientdetails", "entitystorematerialised");

                entity.HasIndex(e => e.DemoDemopatientdetailsId)
                    .HasDatabaseName("local_demo_demopatientdetails_demo_demopatientdetails_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_demopatientdetails__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_demopatientdetails__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoDemopatientdetailsId)
                    .HasColumnName("demo_demopatientdetails_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Insurencecompany)
                    .HasColumnName("insurencecompany")
                    .HasMaxLength(255);

                entity.Property(e => e.Insurencecoveramount)
                    .HasColumnName("insurencecoveramount")
                    .HasColumnType("numeric");

                entity.Property(e => e.Insurenceemi)
                    .HasColumnName("insurenceemi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Insurencestartdate)
                    .HasColumnName("insurencestartdate")
                    .HasColumnType("date");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_department", "entitystorematerialised");

                entity.HasIndex(e => e.DemoDepartmentId)
                    .HasDatabaseName("local_demo_department_demo_department_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_department__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_department__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoCompanyIdCompanyid)
                    .HasColumnName("demo_company_id_companyid")
                    .HasMaxLength(255);

                entity.Property(e => e.DemoDepartmentId)
                    .HasColumnName("demo_department_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Departmentcode)
                    .HasColumnName("departmentcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Departmentname)
                    .HasColumnName("departmentname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoHardik>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_hardik", "entitystorematerialised");

                entity.HasIndex(e => e.DemoHardikId)
                    .HasDatabaseName("local_demo_hardik_demo_hardik_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_hardik__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_hardik__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoDepartmentId)
                    .HasColumnName("demo_department_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DemoHardikId)
                    .HasColumnName("demo_hardik_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoIndiwardemo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_indiwardemo", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoIndiwardemoId)
                    .HasColumnName("demo_indiwardemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoInfectiontimeline>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_infectiontimeline", "entitystorematerialised");

                entity.HasIndex(e => e.DemoInfectiontimelineId)
                    .HasDatabaseName("local_demo_infectiontimeline_demo_infectiontimeline_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_infectiontimeline__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_infectiontimeline__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datestamp)
                    .HasColumnName("datestamp")
                    .HasColumnType("date");

                entity.Property(e => e.DemoInfectiontimelineId)
                    .HasColumnName("demo_infectiontimeline_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectionstatus)
                    .HasColumnName("infectionstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Infectiontype)
                    .HasColumnName("infectiontype")
                    .HasMaxLength(255);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoLocaltest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_localtest", "entitystorematerialised");

                entity.HasIndex(e => e.DemoLocaltestId)
                    .HasDatabaseName("local_demo_localtest_demo_localtest_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_localtest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_localtest__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoLocaltestId)
                    .HasColumnName("demo_localtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Demotesten)
                    .HasColumnName("demotesten")
                    .HasColumnType("citext");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoPeople>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_people", "entitystorematerialised");

                entity.HasIndex(e => e.DemoPeopleId)
                    .HasDatabaseName("local_demo_people_demo_people_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_people__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_people__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoPeopleId)
                    .HasColumnName("demo_people_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(255);

                entity.Property(e => e.MiddleName)
                    .HasColumnName("middle_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRahul>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rahul", "entitystorematerialised");

                entity.HasIndex(e => e.DemoRahulId)
                    .HasDatabaseName("local_demo_rahul_demo_rahul_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_rahul__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_rahul__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRahulId)
                    .HasColumnName("demo_rahul_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderby).HasColumnName("orderby");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Teststring)
                    .HasColumnName("teststring")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRelationtest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_relationtest", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRelationtestId)
                    .HasColumnName("demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterIdDemoRelationtestId)
                    .HasColumnName("encounter_id_demo_relationtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoRktestentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_rktestentity", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoRktestentityId)
                    .HasColumnName("demo_rktestentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.T1)
                    .HasColumnName("t1")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologysystem)
                    .HasColumnName("_terminologysystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSachindemo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sachindemo", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSachindemoId)
                    .HasDatabaseName("local_demo_sachindemo_demo_sachindemo_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_sachindemo__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_sachindemo__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSachindemoId)
                    .HasColumnName("demo_sachindemo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hotelname)
                    .HasColumnName("hotelname")
                    .HasColumnType("citext");

                entity.Property(e => e.PersonIdHotelname)
                    .HasColumnName("person_id_hotelname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSalford>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_salford", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSalfordId)
                    .HasColumnName("demo_salford_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSample>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sample", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSampleId)
                    .HasDatabaseName("local_demo_sample_demo_sample_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_sample__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_sample__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleId)
                    .HasColumnName("demo_sample_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Newcolumn).HasColumnName("newcolumn");

                entity.Property(e => e.Newcolumn2).HasColumnName("newcolumn2");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoSampleentity1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_sampleentity1", "entitystorematerialised");

                entity.HasIndex(e => e.DemoSampleentity1Id)
                    .HasDatabaseName("local_demo_sampleentity1_demo_sampleentity1_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_sampleentity1__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_sampleentity1__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoSampleentity1Id)
                    .HasColumnName("demo_sampleentity1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTaluk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_taluk", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTalukId)
                    .HasDatabaseName("local_demo_taluk_demo_taluk_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_taluk__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_taluk__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTalukId)
                    .HasColumnName("demo_taluk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.TalukName)
                    .HasColumnName("taluk_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_task", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTaskId)
                    .HasDatabaseName("local_demo_task_demo_task_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_task__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_task__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTaskId)
                    .HasColumnName("demo_task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Duedays)
                    .HasColumnName("duedays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Lastmoduledomselector)
                    .HasColumnName("lastmoduledomselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodulename)
                    .HasColumnName("lastmodulename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_test", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTestId)
                    .HasDatabaseName("local_demo_test_demo_test_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_test__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_test__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTestId)
                    .HasColumnName("demo_test_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologysystem)
                    .HasColumnName("_terminologysystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_test2", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTest2Id)
                    .HasDatabaseName("local_demo_test2_demo_test2_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_test2__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_test2__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTest2Id)
                    .HasColumnName("demo_test2_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTestdemoone>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_testdemoone", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTestdemooneId)
                    .HasDatabaseName("local_demo_testdemoone_demo_testdemoone_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_testdemoone__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_testdemoone__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTestdemooneId)
                    .HasColumnName("demo_testdemoone_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTestentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_testentity", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTestentityId)
                    .HasDatabaseName("local_demo_testentity_demo_testentity_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_testentity__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_testentity__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTestentityId)
                    .HasColumnName("demo_testentity_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Entityname)
                    .HasColumnName("entityname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoTestlocal1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_testlocal1", "entitystorematerialised");

                entity.HasIndex(e => e.DemoTestlocal1Id)
                    .HasDatabaseName("local_demo_testlocal1_demo_testlocal1_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_testlocal1__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_testlocal1__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTestlocal1Id)
                    .HasColumnName("demo_testlocal1_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_vendor", "entitystorematerialised");

                entity.HasIndex(e => e.DemoVendorId)
                    .HasDatabaseName("local_demo_vendor_demo_vendor_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_vendor__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_vendor__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoVendorId)
                    .HasColumnName("demo_vendor_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Vendorname)
                    .HasColumnName("vendorname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalDemoVillage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_demo_village", "entitystorematerialised");

                entity.HasIndex(e => e.DemoVillageId)
                    .HasDatabaseName("local_demo_village_demo_village_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_demo_village__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_demo_village__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DemoTalukId)
                    .HasColumnName("demo_taluk_id")
                    .HasMaxLength(255);

                entity.Property(e => e.DemoVillageId)
                    .HasColumnName("demo_village_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.VillageName)
                    .HasColumnName("village_name")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsCurrentinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_currentinpatients", "entitystorematerialised");

                entity.HasIndex(e => e.EboardsCurrentinpatientsId)
                    .HasDatabaseName("local_eboards_currentinpatient_eboards_currentinpatients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_eboards_currentinpatients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_eboards_currentinpatients__sequenceid_idx");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsCurrentinpatientsId)
                    .HasColumnName("eboards_currentinpatients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_encounter", "entitystorematerialised");

                entity.Property(e => e.Aliasfirstname)
                    .HasColumnName("aliasfirstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Aliaslastname)
                    .HasColumnName("aliaslastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocateddate)
                    .HasColumnName("allocateddate")
                    .HasColumnType("date");

                entity.Property(e => e.Allocatedtime)
                    .HasColumnName("allocatedtime")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedwardcode)
                    .HasColumnName("allocatedwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedtransferdatetime)
                    .HasColumnName("bedtransferdatetime")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsEncounterId)
                    .HasColumnName("eboards_encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Edd)
                    .HasColumnName("edd")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeeninbed).HasColumnName("hasbeeninbed");

                entity.Property(e => e.Likestobeknownas)
                    .HasColumnName("likestobeknownas")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Returnbedcode)
                    .HasColumnName("returnbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returncode)
                    .HasColumnName("returncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Returndate)
                    .HasColumnName("returndate")
                    .HasColumnType("date");

                entity.Property(e => e.Returntime)
                    .HasColumnName("returntime")
                    .HasMaxLength(255);

                entity.Property(e => e.Returnwardcode)
                    .HasColumnName("returnwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsRecentpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_recentpatients", "entitystorematerialised");

                entity.HasIndex(e => e.EboardsRecentpatientsId)
                    .HasDatabaseName("local_eboards_recentpatients_eboards_recentpatients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_eboards_recentpatients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_eboards_recentpatients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Currentwarddisplay)
                    .HasColumnName("currentwarddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.EboardsRecentpatientsId)
                    .HasColumnName("eboards_recentpatients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsTcis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_tcis", "entitystorematerialised");

                entity.HasIndex(e => e.EboardsTcisId)
                    .HasDatabaseName("local_eboards_tcis_eboards_tcis_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_eboards_tcis__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_eboards_tcis__sequenceid_idx");

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedwardcode)
                    .HasColumnName("allocatedwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsTcisId)
                    .HasColumnName("eboards_tcis_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsWaitingforbed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_waitingforbed", "entitystorematerialised");

                entity.HasIndex(e => e.EboardsWaitingforbedId)
                    .HasDatabaseName("local_eboards_waitingforbed_eboards_waitingforbed_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_eboards_waitingforbed__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_eboards_waitingforbed__sequenceid_idx");

                entity.Property(e => e.Allocatedbedcode)
                    .HasColumnName("allocatedbedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allocatedwardcode)
                    .HasColumnName("allocatedwardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsWaitingforbedId)
                    .HasColumnName("eboards_waitingforbed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEboardsWardinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_eboards_wardinformation", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EboardsWardinformationId)
                    .HasColumnName("eboards_wardinformation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardinformation).HasColumnName("wardinformation");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaAdministrationwitness>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_administrationwitness", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaAdministrationwitnessId)
                    .HasDatabaseName("local_epma_administrationwitn_epma_administrationwitness_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_administrationwitness__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_administrationwitness__sequenceid_idx");

                entity.Property(e => e.Accountname)
                    .HasColumnName("accountname")
                    .HasMaxLength(255);

                entity.Property(e => e.Administredby)
                    .HasColumnName("administredby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.DoseId)
                    .HasColumnName("dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaAdministrationwitnessId)
                    .HasColumnName("epma_administrationwitness_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Logicalid)
                    .HasColumnName("logicalid")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationadministrationId)
                    .HasColumnName("medicationadministration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Witnesscomments).HasColumnName("witnesscomments");

                entity.Property(e => e.Witnessdatetime).HasColumnName("witnessdatetime");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaBannerwarningoverrides>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_bannerwarningoverrides", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaBannerwarningoverridesId)
                    .HasDatabaseName("local_epma_bannerwarningoverr_epma_bannerwarningoverrides_i_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_bannerwarningoverrides__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_bannerwarningoverrides__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dismissedby)
                    .HasColumnName("dismissedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Dismissedon).HasColumnName("dismissedon");

                entity.Property(e => e.Dismissreason).HasColumnName("dismissreason");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaBannerwarningoverridesId)
                    .HasColumnName("epma_bannerwarningoverrides_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningdetail)
                    .HasColumnName("warningdetail")
                    .HasMaxLength(1000);

                entity.Property(e => e.Warninggroup)
                    .HasColumnName("warninggroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Warningheader)
                    .HasColumnName("warningheader")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaDischargesummarry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_dischargesummarry", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaDischargesummarryId)
                    .HasDatabaseName("local_epma_dischargesummarry_epma_dischargesummarry_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_dischargesummarry__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_dischargesummarry__sequenceid_idx");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaDischargesummarryId)
                    .HasColumnName("epma_dischargesummarry_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaMedreconciliation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_medreconciliation", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaMedreconciliationId)
                    .HasDatabaseName("local_epma_medreconciliation_epma_medreconciliation_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_medreconciliation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_medreconciliation__sequenceid_idx");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon)
                    .HasColumnName("createdon")
                    .HasColumnType("date");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedreconciliationId)
                    .HasColumnName("epma_medreconciliation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewstatus)
                    .HasColumnName("reviewstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaMedsonadmission>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_medsonadmission", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaMedsonadmissionId)
                    .HasDatabaseName("local_epma_medsonadmission_epma_medsonadmission_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_medsonadmission__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_medsonadmission__sequenceid_idx");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsonadmissionId)
                    .HasColumnName("epma_medsonadmission_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaMedsondischarge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_medsondischarge", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaMedsondischargeId)
                    .HasDatabaseName("local_epma_medsondischarge_epma_medsondischarge_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_medsondischarge__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_medsondischarge__sequenceid_idx");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsondischargeId)
                    .HasColumnName("epma_medsondischarge_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscomplete).HasColumnName("iscomplete");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Noteshasaddinfo).HasColumnName("noteshasaddinfo");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaMoaprescriptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_moaprescriptions", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaMoaprescriptionsId)
                    .HasDatabaseName("local_epma_moaprescriptions_epma_moaprescriptions_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_moaprescriptions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_moaprescriptions__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsonadmissionId)
                    .HasColumnName("epma_medsonadmission_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMoaprescriptionsId)
                    .HasColumnName("epma_moaprescriptions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaModprescriptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_modprescriptions", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaModprescriptionsId)
                    .HasDatabaseName("local_epma_modprescriptions_epma_modprescriptions_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_modprescriptions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_modprescriptions__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaMedsondischargeId)
                    .HasColumnName("epma_medsondischarge_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaModprescriptionsId)
                    .HasColumnName("epma_modprescriptions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaOrderset>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_orderset", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaOrdersetId)
                    .HasDatabaseName("local_epma_orderset_epma_orderset_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_orderset__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_orderset__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DefinedCriteria)
                    .HasColumnName("defined_criteria")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaOrdersetId)
                    .HasColumnName("epma_orderset_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ExclusiveValue)
                    .HasColumnName("exclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.InclusiveValue)
                    .HasColumnName("inclusive_value")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordersetname)
                    .HasColumnName("ordersetname")
                    .HasMaxLength(255);

                entity.Property(e => e.Owner)
                    .HasColumnName("owner")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersettypeId)
                    .HasColumnName("prescriptionordersettype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaOrdersetprescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_ordersetprescription", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaOrdersetprescriptionId)
                    .HasDatabaseName("local_epma_ordersetprescriptio_epma_ordersetprescription_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_ordersetprescription__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_ordersetprescription__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EpmaOrdersetprescriptionId)
                    .HasColumnName("epma_ordersetprescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordersetid)
                    .HasColumnName("ordersetid")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPatientwarnings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_patientwarnings", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPatientwarningsId)
                    .HasDatabaseName("local_epma_patientwarnings_epma_patientwarnings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_patientwarnings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_patientwarnings__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPatientwarningsId)
                    .HasColumnName("epma_patientwarnings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningcontextid)
                    .HasColumnName("warningcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Warnings).HasColumnName("warnings");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPersonwarningupdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_personwarningupdate", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPersonwarningupdateId)
                    .HasDatabaseName("local_epma_personwarningupdate_epma_personwarningupdate_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_personwarningupdate__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_personwarningupdate__sequenceid_idx");

                entity.Property(e => e.Allergens).HasColumnName("allergens");

                entity.Property(e => e.Bsa)
                    .HasColumnName("bsa")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPersonwarningupdateId)
                    .HasColumnName("epma_personwarningupdate_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningcontextid)
                    .HasColumnName("warningcontextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPrescriptionevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_prescriptionevent", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPrescriptioneventId)
                    .HasDatabaseName("local_epma_prescriptionevent_epma_prescriptionevent_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_prescriptionevent__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_prescriptionevent__sequenceid_idx");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventtype)
                    .HasColumnName("eventtype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionid)
                    .HasColumnName("prescriptionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionstatusid)
                    .HasColumnName("prescriptionstatusid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPrescriptionmedicaitonsupply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_prescriptionmedicaitonsupply", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPrescriptionmedicaitonsupplyId)
                    .HasDatabaseName("local_epma_prescriptionmedica_epma_prescriptionmedicaitonsu_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_prescriptionmedicaitonsupply__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_prescriptionmedicaitonsupply__sequenceid_idx");

                entity.Property(e => e.Availablequantity)
                    .HasColumnName("availablequantity")
                    .HasMaxLength(255);

                entity.Property(e => e.Complianceaid)
                    .HasColumnName("complianceaid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EpmaPrescriptionmedicaitonsupplyId)
                    .HasColumnName("epma_prescriptionmedicaitonsupply_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Noofdays)
                    .HasColumnName("noofdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ownsupplyathome).HasColumnName("ownsupplyathome");

                entity.Property(e => e.Prescribedmedicationid)
                    .HasColumnName("prescribedmedicationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionid)
                    .HasColumnName("prescriptionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Quantityunits)
                    .HasColumnName("quantityunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Resupplyfrom)
                    .HasColumnName("resupplyfrom")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectedproductcode)
                    .HasColumnName("selectedproductcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectproductcodetype)
                    .HasColumnName("selectproductcodetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Updatesouce)
                    .HasColumnName("updatesouce")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPrescriptionnursinginstructions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_prescriptionnursinginstructions", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPrescriptionnursinginstructionsId)
                    .HasDatabaseName("local_epma_prescriptionnursin_epma_prescriptionnursinginstr_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_prescriptionnursinginstructions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_prescriptionnursinginstructions__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EpmaPrescriptionnursinginstructionsId)
                    .HasColumnName("epma_prescriptionnursinginstructions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Instructions).HasColumnName("instructions");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPrescriptionreminders>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_prescriptionreminders", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPrescriptionremindersId)
                    .HasDatabaseName("local_epma_prescriptionremind_epma_prescriptionreminders_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_prescriptionreminders__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_prescriptionreminders__sequenceid_idx");

                entity.Property(e => e.Ackcomments)
                    .HasColumnName("ackcomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ackmsg)
                    .HasColumnName("ackmsg")
                    .HasMaxLength(1000);

                entity.Property(e => e.Acknowledgedby)
                    .HasColumnName("acknowledgedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Acknowledgedon)
                    .HasColumnName("acknowledgedon")
                    .HasMaxLength(255);

                entity.Property(e => e.Ackstatus)
                    .HasColumnName("ackstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Activationdatetime).HasColumnName("activationdatetime");

                entity.Property(e => e.Activationinhours)
                    .HasColumnName("activationinhours")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptionremindersId)
                    .HasColumnName("epma_prescriptionreminders_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isackmandatory).HasColumnName("isackmandatory");

                entity.Property(e => e.Isacknowledged).HasColumnName("isacknowledged");

                entity.Property(e => e.Isivtooral).HasColumnName("isivtooral");

                entity.Property(e => e.Issystem).HasColumnName("issystem");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Message)
                    .HasColumnName("message")
                    .HasMaxLength(1000);

                entity.Property(e => e.Personid)
                    .HasColumnName("personid")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaPrescriptionreviewstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_prescriptionreviewstatus", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaPrescriptionreviewstatusId)
                    .HasDatabaseName("local_epma_prescriptionreview_epma_prescriptionreviewstatus_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_prescriptionreviewstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_prescriptionreviewstatus__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EpmaPrescriptioneventId)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaPrescriptionreviewstatusId)
                    .HasColumnName("epma_prescriptionreviewstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Newcorrelationid)
                    .HasColumnName("newcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Oldcorrelationid)
                    .HasColumnName("oldcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Precriptionedited).HasColumnName("precriptionedited");

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionstatuschange).HasColumnName("prescriptionstatuschange");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Reviewcomments).HasColumnName("reviewcomments");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaSupplyrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_supplyrequest", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaSupplyrequestId)
                    .HasDatabaseName("local_epma_supplyrequest_epma_supplyrequest_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_supplyrequest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_supplyrequest__sequenceid_idx");

                entity.Property(e => e.Additionaldirections)
                    .HasColumnName("additionaldirections")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Costofmedicine).HasColumnName("costofmedicine");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Daterequired).HasColumnName("daterequired");

                entity.Property(e => e.Durationoftreatment)
                    .HasColumnName("durationoftreatment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Encounterid)
                    .HasColumnName("encounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaSupplyrequestId)
                    .HasColumnName("epma_supplyrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fulfilledon).HasColumnName("fulfilledon");

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(1000);

                entity.Property(e => e.Indicationinuk)
                    .HasColumnName("indicationinuk")
                    .HasMaxLength(255);

                entity.Property(e => e.Isformulary).HasColumnName("isformulary");

                entity.Property(e => e.Labelinstructiosrequired).HasColumnName("labelinstructiosrequired");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Licenseauthority)
                    .HasColumnName("licenseauthority")
                    .HasMaxLength(255);

                entity.Property(e => e.Marketingauthorisation)
                    .HasColumnName("marketingauthorisation")
                    .HasMaxLength(255);

                entity.Property(e => e.MedicationId)
                    .HasColumnName("medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordermessage)
                    .HasColumnName("ordermessage")
                    .HasMaxLength(1000);

                entity.Property(e => e.Othercommentsnf)
                    .HasColumnName("othercommentsnf")
                    .HasMaxLength(1000);

                entity.Property(e => e.Othercountry)
                    .HasColumnName("othercountry")
                    .HasMaxLength(255);

                entity.Property(e => e.Othercountrytext)
                    .HasColumnName("othercountrytext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Otherindication)
                    .HasColumnName("otherindication")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientownsupply)
                    .HasColumnName("patientownsupply")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientownsupplyother).HasColumnName("patientownsupplyother");

                entity.Property(e => e.Personid)
                    .HasColumnName("personid")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonfornotprescribingformulary).HasColumnName("reasonfornotprescribingformulary");

                entity.Property(e => e.Reasonforprescribingnonformulary).HasColumnName("reasonforprescribingnonformulary");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Requestedby)
                    .HasColumnName("requestedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestednoofdays)
                    .HasColumnName("requestednoofdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Requestedon).HasColumnName("requestedon");

                entity.Property(e => e.Requestedquantityunits)
                    .HasColumnName("requestedquantityunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Requestquantity)
                    .HasColumnName("requestquantity")
                    .HasMaxLength(255);

                entity.Property(e => e.Requeststatus)
                    .HasColumnName("requeststatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectedproductcode)
                    .HasColumnName("selectedproductcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectedproductname)
                    .HasColumnName("selectedproductname")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectproductcodetype)
                    .HasColumnName("selectproductcodetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specifyformulary)
                    .HasColumnName("specifyformulary")
                    .HasMaxLength(1000);

                entity.Property(e => e.Suppliedquantity)
                    .HasColumnName("suppliedquantity")
                    .HasMaxLength(255);

                entity.Property(e => e.Suppliedquantityunits)
                    .HasColumnName("suppliedquantityunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalEpmaWarnings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_epma_warnings", "entitystorematerialised");

                entity.HasIndex(e => e.EpmaWarningsId)
                    .HasDatabaseName("local_epma_warnings_epma_warnings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_epma_warnings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_epma_warnings__sequenceid_idx");

                entity.Property(e => e.Allergencode)
                    .HasColumnName("allergencode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergeningredient)
                    .HasColumnName("allergeningredient")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergenmatchtype)
                    .HasColumnName("allergenmatchtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Drugingredient)
                    .HasColumnName("drugingredient")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.EpmaWarningsId)
                    .HasColumnName("epma_warnings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fdbmessageid)
                    .HasColumnName("fdbmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Fdbseverity)
                    .HasColumnName("fdbseverity")
                    .HasMaxLength(255);

                entity.Property(e => e.Ispatientspecific).HasColumnName("ispatientspecific");

                entity.Property(e => e.Message)
                    .HasColumnName("message")
                    .HasMaxLength(1000);

                entity.Property(e => e.Msgtype)
                    .HasColumnName("msgtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Overridemessage).HasColumnName("overridemessage");

                entity.Property(e => e.Overriderequired).HasColumnName("overriderequired");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarymedicationcode)
                    .HasColumnName("primarymedicationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Primarymedicationname)
                    .HasColumnName("primarymedicationname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Primaryprescriptionid)
                    .HasColumnName("primaryprescriptionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Secondarymedicationcode)
                    .HasColumnName("secondarymedicationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Secondarymedicationname)
                    .HasColumnName("secondarymedicationname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Secondaryprescriptionid)
                    .HasColumnName("secondaryprescriptionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Severity)
                    .HasColumnName("severity")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Updatetrigger)
                    .HasColumnName("updatetrigger")
                    .HasMaxLength(255);

                entity.Property(e => e.Warningcategories).HasColumnName("warningcategories");

                entity.Property(e => e.Warningtype)
                    .HasColumnName("warningtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectAllergyintolerance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_allergyintolerance", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectAllergyintoleranceId)
                    .HasDatabaseName("local_gpconnect_allergyintole_gpconnect_allergyintolerance__idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_allergyintolerance__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_allergyintolerance__sequenceid_idx");

                entity.Property(e => e.Allergycode)
                    .HasColumnName("allergycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergynote).HasColumnName("allergynote");

                entity.Property(e => e.Allergytext)
                    .HasColumnName("allergytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assertedby)
                    .HasColumnName("assertedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Asserteddatetime).HasColumnName("asserteddatetime");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatus)
                    .HasColumnName("clinicalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddatetime).HasColumnName("enddatetime");

                entity.Property(e => e.GpconnectAllergyintoleranceId)
                    .HasColumnName("gpconnect_allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastoccurrence).HasColumnName("lastoccurrence");

                entity.Property(e => e.Onsetage)
                    .HasColumnName("onsetage")
                    .HasColumnType("numeric");

                entity.Property(e => e.Onsetdatetime).HasColumnName("onsetdatetime");

                entity.Property(e => e.Onsetperiodstart).HasColumnName("onsetperiodstart");

                entity.Property(e => e.Onsetperionend).HasColumnName("onsetperionend");

                entity.Property(e => e.Onsetstring)
                    .HasColumnName("onsetstring")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonended)
                    .HasColumnName("reasonended")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectAllergymanifestation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_allergymanifestation", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectAllergymanifestationId)
                    .HasDatabaseName("local_gpconnect_allergymanife_gpconnect_allergymanifestatio_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_allergymanifestation__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_allergymanifestation__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GpconnectAllergymanifestationId)
                    .HasColumnName("gpconnect_allergymanifestation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectAllergyreactionId)
                    .HasColumnName("gpconnect_allergyreaction_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Manifestationcode)
                    .HasColumnName("manifestationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Manifestationtext)
                    .HasColumnName("manifestationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectAllergyreaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_allergyreaction", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectAllergyreactionId)
                    .HasDatabaseName("local_gpconnect_allergyreactio_gpconnect_allergyreaction_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_allergyreaction__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_allergyreaction__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Exposureroutecode)
                    .HasColumnName("exposureroutecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Exposureroutetext)
                    .HasColumnName("exposureroutetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.GpconnectAllergyintoleranceId)
                    .HasColumnName("gpconnect_allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectAllergyreactionId)
                    .HasColumnName("gpconnect_allergyreaction_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Onsetdatetime).HasColumnName("onsetdatetime");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Severity)
                    .HasColumnName("severity")
                    .HasMaxLength(255);

                entity.Property(e => e.Substancecode)
                    .HasColumnName("substancecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Substancetext)
                    .HasColumnName("substancetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectDocumentreference>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_documentreference", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectDocumentreferenceId)
                    .HasDatabaseName("local_gpconnect_documentrefer_gpconnect_documentreference_i_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_documentreference__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_documentreference__sequenceid_idx");

                entity.Property(e => e.Author)
                    .HasColumnName("author")
                    .HasMaxLength(1000);

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.Contentsize)
                    .HasColumnName("contentsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contenttype)
                    .HasColumnName("contenttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createddatetime).HasColumnName("createddatetime");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectDocumentreferenceId)
                    .HasColumnName("gpconnect_documentreference_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Indexeddatetime).HasColumnName("indexeddatetime");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typecode)
                    .HasColumnName("typecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Typetext)
                    .HasColumnName("typetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medication", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationId)
                    .HasDatabaseName("local_gpconnect_medication_gpconnect_medication_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medication__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medication__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Formtext)
                    .HasColumnName("formtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.GpconnectMedicationId)
                    .HasColumnName("gpconnect_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isbrand).HasColumnName("isbrand");

                entity.Property(e => e.Isoverthecounter).HasColumnName("isoverthecounter");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(1000);

                entity.Property(e => e.Medicationcode)
                    .HasColumnName("medicationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationtext)
                    .HasColumnName("medicationtext")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedicationadministration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medicationadministration", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationadministrationId)
                    .HasDatabaseName("local_gpconnect_medicationadm_gpconnect_medicationadministr_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medicationadministration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medicationadministration__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GpconnectMedicationadministrationId)
                    .HasColumnName("gpconnect_medicationadministration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedicationdispense>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medicationdispense", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationdispenseId)
                    .HasDatabaseName("local_gpconnect_medicationdis_gpconnect_medicationdispense__idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medicationdispense__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medicationdispense__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GpconnectMedicationdispenseId)
                    .HasColumnName("gpconnect_medicationdispense_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedicationknowledge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medicationknowledge", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationknowledgeId)
                    .HasDatabaseName("local_gpconnect_medicationkno_gpconnect_medicationknowledge_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medicationknowledge__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medicationknowledge__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GpconnectMedicationknowledgeId)
                    .HasColumnName("gpconnect_medicationknowledge_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedicationrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medicationrequest", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationrequestId)
                    .HasDatabaseName("local_gpconnect_medicationreq_gpconnect_medicationrequest_i_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medicationrequest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medicationrequest__sequenceid_idx");

                entity.Property(e => e.Authoredondatetime).HasColumnName("authoredondatetime");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dosageinstructiontext)
                    .HasColumnName("dosageinstructiontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedsupplydurationunitcode)
                    .HasColumnName("expectedsupplydurationunitcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedsupplydurationunittext)
                    .HasColumnName("expectedsupplydurationunittext")
                    .HasMaxLength(255);

                entity.Property(e => e.Expectedsupplydurationvalue)
                    .HasColumnName("expectedsupplydurationvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.GpconnectMedicationId)
                    .HasColumnName("gpconnect_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectMedicationrequestId)
                    .HasColumnName("gpconnect_medicationrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Groupidentifier)
                    .HasColumnName("groupidentifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Intent)
                    .HasColumnName("intent")
                    .HasMaxLength(255);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Numberofrepeatprescriptionsallowed)
                    .HasColumnName("numberofrepeatprescriptionsallowed")
                    .HasColumnType("numeric");

                entity.Property(e => e.Numberofrepeatprescriptionsissued)
                    .HasColumnName("numberofrepeatprescriptionsissued")
                    .HasColumnType("numeric");

                entity.Property(e => e.Patientinstructiontext)
                    .HasColumnName("patientinstructiontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Performedby)
                    .HasColumnName("performedby")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptiontypecode)
                    .HasColumnName("prescriptiontypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptiontypetext)
                    .HasColumnName("prescriptiontypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validityenddatetime).HasColumnName("validityenddatetime");

                entity.Property(e => e.Validitystartdatetime).HasColumnName("validitystartdatetime");
            });

            modelBuilder.Entity<entitystorematerialised_LocalGpconnectMedicationstatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_gpconnect_medicationstatement", "entitystorematerialised");

                entity.HasIndex(e => e.GpconnectMedicationstatementId)
                    .HasDatabaseName("local_gpconnect_medicationsta_gpconnect_medicationstatement_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_gpconnect_medicationstatement__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_gpconnect_medicationstatement__sequenceid_idx");

                entity.Property(e => e.Asserteddatetime).HasColumnName("asserteddatetime");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dosagetext)
                    .HasColumnName("dosagetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Effectiveenddatetime).HasColumnName("effectiveenddatetime");

                entity.Property(e => e.Effectivestartdatetime).HasColumnName("effectivestartdatetime");

                entity.Property(e => e.GpconnectMedicationId)
                    .HasColumnName("gpconnect_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectMedicationrequestId)
                    .HasColumnName("gpconnect_medicationrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GpconnectMedicationstatementId)
                    .HasColumnName("gpconnect_medicationstatement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationstatementlastissuedate).HasColumnName("medicationstatementlastissuedate");

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Patientinstruction)
                    .HasColumnName("patientinstruction")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescribingagencycode)
                    .HasColumnName("prescribingagencycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescribingagencytext)
                    .HasColumnName("prescribingagencytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalInboundreferralGender>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_inboundreferral_gender", "entitystorematerialised");

                entity.HasIndex(e => e.InboundreferralGenderId)
                    .HasDatabaseName("local_inboundreferral_gender_inboundreferral_gender_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_inboundreferral_gender__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_inboundreferral_gender__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendername)
                    .HasColumnName("gendername")
                    .HasMaxLength(255);

                entity.Property(e => e.InboundreferralGenderId)
                    .HasColumnName("inboundreferral_gender_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalInboundreferralProvider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_inboundreferral_provider", "entitystorematerialised");

                entity.HasIndex(e => e.InboundreferralProviderId)
                    .HasDatabaseName("local_inboundreferral_provider_inboundreferral_provider_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_inboundreferral_provider__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_inboundreferral_provider__sequenceid_idx");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.InboundreferralProviderId)
                    .HasColumnName("inboundreferral_provider_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationid)
                    .HasColumnName("organisationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Organisationname)
                    .HasColumnName("organisationname")
                    .HasMaxLength(255);

                entity.Property(e => e.Pin)
                    .HasColumnName("pin")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcode)
                    .HasColumnName("postcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalInboundreferralReferralrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_inboundreferral_referralrequest", "entitystorematerialised");

                entity.HasIndex(e => e.InboundreferralReferralrequestId)
                    .HasDatabaseName("local_inboundreferral_referra_inboundreferral_referralreque_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_inboundreferral_referralrequest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_inboundreferral_referralrequest__sequenceid_idx");

                entity.Property(e => e.Adminnotes).HasColumnName("adminnotes");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.InboundreferralReferralrequestId)
                    .HasColumnName("inboundreferral_referralrequest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastupdated).HasColumnName("lastupdated");

                entity.Property(e => e.Matchedhospitalnumber)
                    .HasColumnName("matchedhospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicalhistory)
                    .HasColumnName("medicalhistory")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientaddress).HasColumnName("patientaddress");

                entity.Property(e => e.Patientcontactinstructions)
                    .HasColumnName("patientcontactinstructions")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientcontacttel1)
                    .HasColumnName("patientcontacttel1")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientcontacttel2)
                    .HasColumnName("patientcontacttel2")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientdateofbirth)
                    .HasColumnName("patientdateofbirth")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientemail)
                    .HasColumnName("patientemail")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientfirstname)
                    .HasColumnName("patientfirstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientgender)
                    .HasColumnName("patientgender")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientgpnameandaddress).HasColumnName("patientgpnameandaddress");

                entity.Property(e => e.Patientgptel)
                    .HasColumnName("patientgptel")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlastname)
                    .HasColumnName("patientlastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientnhsnumber)
                    .HasColumnName("patientnhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientpostcode)
                    .HasColumnName("patientpostcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttitle)
                    .HasColumnName("patienttitle")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referralcategory)
                    .HasColumnName("referralcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralcreated).HasColumnName("referralcreated");

                entity.Property(e => e.Referralsessionid)
                    .HasColumnName("referralsessionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Referralstatus)
                    .HasColumnName("referralstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Referrerdepartment)
                    .HasColumnName("referrerdepartment")
                    .HasMaxLength(255);

                entity.Property(e => e.Referrerdesignation)
                    .HasColumnName("referrerdesignation")
                    .HasMaxLength(255);

                entity.Property(e => e.Referreremail)
                    .HasColumnName("referreremail")
                    .HasMaxLength(255);

                entity.Property(e => e.Referrername)
                    .HasColumnName("referrername")
                    .HasMaxLength(255);

                entity.Property(e => e.Referrertel1)
                    .HasColumnName("referrertel1")
                    .HasMaxLength(255);

                entity.Property(e => e.Referrertel2)
                    .HasColumnName("referrertel2")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringorganisationcode)
                    .HasColumnName("referringorganisationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringorganisationname)
                    .HasColumnName("referringorganisationname")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Senttonoteon).HasColumnName("senttonoteon");

                entity.Property(e => e.Senttonoteondate).HasColumnName("senttonoteondate");

                entity.Property(e => e.Senttonoteonfilename)
                    .HasColumnName("senttonoteonfilename")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Servicerequested)
                    .HasColumnName("servicerequested")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalInboundreferralSpecilaty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_inboundreferral_specilaty", "entitystorematerialised");

                entity.HasIndex(e => e.InboundreferralSpecilatyId)
                    .HasDatabaseName("local_inboundreferral_specilat_inboundreferral_specilaty_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_inboundreferral_specilaty__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_inboundreferral_specilaty__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.InboundreferralSpecilatyId)
                    .HasColumnName("inboundreferral_specilaty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Noteonspecialty)
                    .HasColumnName("noteonspecialty")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtyname)
                    .HasColumnName("specialtyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtyorder).HasColumnName("specialtyorder");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalLocaltest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_localtest", "entitystorematerialised");

                entity.HasIndex(e => e.LocaltestId)
                    .HasDatabaseName("local_localtest_localtest_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_localtest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_localtest__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.LocaltestId)
                    .HasColumnName("localtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalLookupSpecialty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_lookup_specialty", "entitystorematerialised");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.LookupSpecialtyId)
                    .HasColumnName("lookup_specialty_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaAssessmentsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_assessmentsummary", "entitystorematerialised");

                entity.HasIndex(e => e.PoaAssessmentsummaryId)
                    .HasDatabaseName("local_poa_assessmentsummary_poa_assessmentsummary_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_assessmentsummary__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_assessmentsummary__sequenceid_idx");

                entity.Property(e => e.Akiadditionalriskfactors)
                    .HasColumnName("akiadditionalriskfactors")
                    .HasColumnType("numeric");

                entity.Property(e => e.Akiguidance)
                    .HasColumnName("akiguidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.Akirisk)
                    .HasColumnName("akirisk")
                    .HasColumnType("numeric");

                entity.Property(e => e.Akistatus)
                    .HasColumnName("akistatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Cognitivecitguidance)
                    .HasColumnName("cognitivecitguidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.Cognitivecitscore)
                    .HasColumnName("cognitivecitscore")
                    .HasMaxLength(255);

                entity.Property(e => e.Cognitivecriteria)
                    .HasColumnName("cognitivecriteria")
                    .HasMaxLength(1000);

                entity.Property(e => e.Cognitivedementiadiagnosis)
                    .HasColumnName("cognitivedementiadiagnosis")
                    .HasMaxLength(255);

                entity.Property(e => e.Cognitiveformalcarer).HasColumnName("cognitiveformalcarer");

                entity.Property(e => e.Cognitivepointofcontact).HasColumnName("cognitivepointofcontact");

                entity.Property(e => e.Cognitiverequired)
                    .HasColumnName("cognitiverequired")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Frailtyrequired)
                    .HasColumnName("frailtyrequired")
                    .HasMaxLength(255);

                entity.Property(e => e.Frailtyscore)
                    .HasColumnName("frailtyscore")
                    .HasMaxLength(255);

                entity.Property(e => e.Frailtysixtyplus)
                    .HasColumnName("frailtysixtyplus")
                    .HasMaxLength(255);

                entity.Property(e => e.Malnutritionguidance)
                    .HasColumnName("malnutritionguidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.Malnutritionscore)
                    .HasColumnName("malnutritionscore")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaAssessmentsummaryId)
                    .HasColumnName("poa_assessmentsummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sortnotes).HasColumnName("sortnotes");

                entity.Property(e => e.Sortrisk)
                    .HasColumnName("sortrisk")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sortstatus)
                    .HasColumnName("sortstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskbedmanagementsideroom).HasColumnName("taskbedmanagementsideroom");

                entity.Property(e => e.Taskbookhdubed).HasColumnName("taskbookhdubed");

                entity.Property(e => e.Taskconsiderreferanaesthetist).HasColumnName("taskconsiderreferanaesthetist");

                entity.Property(e => e.Taskcspinexray).HasColumnName("taskcspinexray");

                entity.Property(e => e.Taskflaghaem).HasColumnName("taskflaghaem");

                entity.Property(e => e.Taskinsertdeleriumproforma).HasColumnName("taskinsertdeleriumproforma");

                entity.Property(e => e.Taskprovideakiinfo).HasColumnName("taskprovideakiinfo");

                entity.Property(e => e.Taskreferacutepainteam).HasColumnName("taskreferacutepainteam");

                entity.Property(e => e.Taskreferanaesthetist).HasColumnName("taskreferanaesthetist");

                entity.Property(e => e.Taskrefercomplexcase).HasColumnName("taskrefercomplexcase");

                entity.Property(e => e.Taskreferdiabetesteam).HasColumnName("taskreferdiabetesteam");

                entity.Property(e => e.Taskreferdieteticteam).HasColumnName("taskreferdieteticteam");

                entity.Property(e => e.Taskrefergp).HasColumnName("taskrefergp");

                entity.Property(e => e.Taskreferpharmacy).HasColumnName("taskreferpharmacy");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaCommontask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_commontask", "entitystorematerialised");

                entity.HasIndex(e => e.PoaCommontaskId)
                    .HasDatabaseName("local_poa_commontask_poa_commontask_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_commontask__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_commontask__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.PoaCommontaskId)
                    .HasColumnName("poa_commontask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskdescription)
                    .HasColumnName("taskdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaDose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_dose", "entitystorematerialised");

                entity.HasIndex(e => e.PoaDoseId)
                    .HasDatabaseName("local_poa_dose_poa_dose_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_dose__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_dose__sequenceid_idx");

                entity.Property(e => e.Additionaladministrationcomment)
                    .HasColumnName("additionaladministrationcomment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Continuityid)
                    .HasColumnName("continuityid")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Descriptivedose)
                    .HasColumnName("descriptivedose")
                    .HasMaxLength(1000);

                entity.Property(e => e.Doseenddatatime).HasColumnName("doseenddatatime");

                entity.Property(e => e.Dosemeasure)
                    .HasColumnName("dosemeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosesize)
                    .HasColumnName("dosesize")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosestartdatetime).HasColumnName("dosestartdatetime");

                entity.Property(e => e.Dosetype)
                    .HasColumnName("dosetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseunit)
                    .HasColumnName("doseunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Infusionduration)
                    .HasColumnName("infusionduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionrate)
                    .HasColumnName("infusionrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Isadditionaladministration).HasColumnName("isadditionaladministration");

                entity.Property(e => e.Isbolus).HasColumnName("isbolus");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaDoseId)
                    .HasColumnName("poa_dose_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPosologyId)
                    .HasColumnName("poa_posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrateddoseconfirmedby)
                    .HasColumnName("titrateddoseconfirmedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrateddoseconfirmedon).HasColumnName("titrateddoseconfirmedon");

                entity.Property(e => e.Titration).HasColumnName("titration");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaMedication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_medication", "entitystorematerialised");

                entity.HasIndex(e => e.PoaMedicationId)
                    .HasDatabaseName("local_poa_medication_poa_medication_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_medication__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_medication__sequenceid_idx");

                entity.Property(e => e.Actgroupcode)
                    .HasColumnName("actgroupcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Actgroupname)
                    .HasColumnName("actgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Bnf)
                    .HasColumnName("bnf")
                    .HasMaxLength(255);

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Customgroup)
                    .HasColumnName("customgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Defineddailydose)
                    .HasColumnName("defineddailydose")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseform)
                    .HasColumnName("doseform")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformsize)
                    .HasColumnName("doseformsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Doseformunitofmeasure)
                    .HasColumnName("doseformunitofmeasure")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseformunits)
                    .HasColumnName("doseformunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweight)
                    .HasColumnName("doseperweight")
                    .HasMaxLength(255);

                entity.Property(e => e.Doseperweightunit)
                    .HasColumnName("doseperweightunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Form)
                    .HasColumnName("form")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Genericname)
                    .HasColumnName("genericname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isblacktriangle).HasColumnName("isblacktriangle");

                entity.Property(e => e.Isclinicaltrial).HasColumnName("isclinicaltrial");

                entity.Property(e => e.Iscontrolled).HasColumnName("iscontrolled");

                entity.Property(e => e.Iscritical).HasColumnName("iscritical");

                entity.Property(e => e.Isexpensive).HasColumnName("isexpensive");

                entity.Property(e => e.Isformulary).HasColumnName("isformulary");

                entity.Property(e => e.Ishighalert).HasColumnName("ishighalert");

                entity.Property(e => e.Isprimary).HasColumnName("isprimary");

                entity.Property(e => e.Isunlicenced).HasColumnName("isunlicenced");

                entity.Property(e => e.Markedmodifier)
                    .HasColumnName("markedmodifier")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperday)
                    .HasColumnName("maxdoseperday")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperdayunit)
                    .HasColumnName("maxdoseperdayunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Maxdoseperweek)
                    .HasColumnName("maxdoseperweek")
                    .HasColumnType("numeric");

                entity.Property(e => e.Maxdoseperweekunit)
                    .HasColumnName("maxdoseperweekunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Medicationtype)
                    .HasColumnName("medicationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifiedreleasehrs)
                    .HasColumnName("modifiedreleasehrs")
                    .HasColumnType("numeric");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Producttype)
                    .HasColumnName("producttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reviewreminderdays)
                    .HasColumnName("reviewreminderdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Roundingfactor)
                    .HasColumnName("roundingfactor")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaMedicationcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_medicationcodes", "entitystorematerialised");

                entity.HasIndex(e => e.PoaMedicationcodesId)
                    .HasDatabaseName("local_poa_medicationcodes_poa_medicationcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_medicationcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_medicationcodes__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationcodesId)
                    .HasColumnName("poa_medicationcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminology)
                    .HasColumnName("terminology")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaMedicationingredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_medicationingredients", "entitystorematerialised");

                entity.HasIndex(e => e.PoaMedicationingredientsId)
                    .HasDatabaseName("local_poa_medicationingredient_poa_medicationingredients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_medicationingredients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_medicationingredients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimaryingredient).HasColumnName("isprimaryingredient");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationingredientsId)
                    .HasColumnName("poa_medicationingredients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_note", "entitystorematerialised");

                entity.HasIndex(e => e.PoaNoteId)
                    .HasDatabaseName("local_poa_note_poa_note_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_note__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_note__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deletedby)
                    .HasColumnName("deletedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Deleteddatetime).HasColumnName("deleteddatetime");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaNoteId)
                    .HasColumnName("poa_note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaStaffgroupId)
                    .HasColumnName("poa_staffgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonfordeletion).HasColumnName("reasonfordeletion");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaPosology>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_posology", "entitystorematerialised");

                entity.HasIndex(e => e.PoaPosologyId)
                    .HasDatabaseName("local_poa_posology_poa_posology_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_posology__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_posology__sequenceid_idx");

                entity.Property(e => e.Antimicrobialstartdate).HasColumnName("antimicrobialstartdate");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Daysofweek)
                    .HasColumnName("daysofweek")
                    .HasMaxLength(255);

                entity.Property(e => e.Doctorsorder).HasColumnName("doctorsorder");

                entity.Property(e => e.Doseperkg)
                    .HasColumnName("doseperkg")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosepersa)
                    .HasColumnName("dosepersa")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dosetype)
                    .HasColumnName("dosetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosingdaysfrequency)
                    .HasColumnName("dosingdaysfrequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Dosingdaysfrequencysize)
                    .HasColumnName("dosingdaysfrequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Frequency)
                    .HasColumnName("frequency")
                    .HasMaxLength(255);

                entity.Property(e => e.Frequencysize)
                    .HasColumnName("frequencysize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionduration)
                    .HasColumnName("infusionduration")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusionrate)
                    .HasColumnName("infusionrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Infusiontypeid)
                    .HasColumnName("infusiontypeid")
                    .HasMaxLength(255);

                entity.Property(e => e.Isadditionaladministration).HasColumnName("isadditionaladministration");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPosologyId)
                    .HasColumnName("poa_posology_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptiodurationsize)
                    .HasColumnName("prescriptiodurationsize")
                    .HasColumnType("numeric");

                entity.Property(e => e.Prescriptionduration)
                    .HasColumnName("prescriptionduration")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionenddate).HasColumnName("prescriptionenddate");

                entity.Property(e => e.Prescriptionstartdate).HasColumnName("prescriptionstartdate");

                entity.Property(e => e.Prn).HasColumnName("prn");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Repeatlastday).HasColumnName("repeatlastday");

                entity.Property(e => e.Repeatlastdayuntil)
                    .HasColumnName("repeatlastdayuntil")
                    .HasMaxLength(255);

                entity.Property(e => e.Repeatprotocoltimes)
                    .HasColumnName("repeatprotocoltimes")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Totalinfusionvolume)
                    .HasColumnName("totalinfusionvolume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaPreopassessment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_preopassessment", "entitystorematerialised");

                entity.HasIndex(e => e.PoaPreopassessmentId)
                    .HasDatabaseName("local_poa_preopassessment_poa_preopassessment_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_preopassessment__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_preopassessment__sequenceid_idx");

                entity.Property(e => e.Admissiondate).HasColumnName("admissiondate");

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Completedby)
                    .HasColumnName("completedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Diastolicbp)
                    .HasColumnName("diastolicbp")
                    .HasColumnType("numeric");

                entity.Property(e => e.Diastolicbp1)
                    .HasColumnName("diastolicbp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Diastolicbp2)
                    .HasColumnName("diastolicbp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Dischargedate).HasColumnName("dischargedate");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hdurequired).HasColumnName("hdurequired");

                entity.Property(e => e.Hdurequiredreason).HasColumnName("hdurequiredreason");

                entity.Property(e => e.Heartrate)
                    .HasColumnName("heartrate")
                    .HasColumnType("numeric");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heightobservationid)
                    .HasColumnName("heightobservationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompletedallergies).HasColumnName("iscompletedallergies");

                entity.Property(e => e.Iscompletedassessments).HasColumnName("iscompletedassessments");

                entity.Property(e => e.Iscompletedbaselineobservations).HasColumnName("iscompletedbaselineobservations");

                entity.Property(e => e.Iscompletedfamilyhistory).HasColumnName("iscompletedfamilyhistory");

                entity.Property(e => e.Iscompletedgeneral).HasColumnName("iscompletedgeneral");

                entity.Property(e => e.Iscompletedinfectioncontrol).HasColumnName("iscompletedinfectioncontrol");

                entity.Property(e => e.Iscompletedinformationprovided).HasColumnName("iscompletedinformationprovided");

                entity.Property(e => e.Iscompletedmedicationhistory).HasColumnName("iscompletedmedicationhistory");

                entity.Property(e => e.Iscompletednursingassessment).HasColumnName("iscompletednursingassessment");

                entity.Property(e => e.Iscompletedpastmedicalhistory).HasColumnName("iscompletedpastmedicalhistory");

                entity.Property(e => e.Iscompletedphysicalexamination).HasColumnName("iscompletedphysicalexamination");

                entity.Property(e => e.Iscompletedsocialhistory).HasColumnName("iscompletedsocialhistory");

                entity.Property(e => e.Iscompletedsurgicalhistory).HasColumnName("iscompletedsurgicalhistory");

                entity.Property(e => e.Islocked).HasColumnName("islocked");

                entity.Property(e => e.Isprinted).HasColumnName("isprinted");

                entity.Property(e => e.Linkedencounterid)
                    .HasColumnName("linkedencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Lockedonadmission).HasColumnName("lockedonadmission");

                entity.Property(e => e.Losdays)
                    .HasColumnName("losdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Losnights)
                    .HasColumnName("losnights")
                    .HasColumnType("numeric");

                entity.Property(e => e.Obervationeventid)
                    .HasColumnName("obervationeventid")
                    .HasMaxLength(255);

                entity.Property(e => e.Operation).HasColumnName("operation");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poadate).HasColumnName("poadate");

                entity.Property(e => e.Poastatus)
                    .HasColumnName("poastatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Poatype)
                    .HasColumnName("poatype")
                    .HasMaxLength(255);

                entity.Property(e => e.Printeddate).HasColumnName("printeddate");

                entity.Property(e => e.Printeduser)
                    .HasColumnName("printeduser")
                    .HasMaxLength(255);

                entity.Property(e => e.Proaction).HasColumnName("proaction");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Revalidated).HasColumnName("revalidated");

                entity.Property(e => e.Revalidateddate).HasColumnName("revalidateddate");

                entity.Property(e => e.Revalidationtype)
                    .HasColumnName("revalidationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Reviewedbypharmacist).HasColumnName("reviewedbypharmacist");

                entity.Property(e => e.Reviewedbypharmacistdate).HasColumnName("reviewedbypharmacistdate");

                entity.Property(e => e.Reviewedbypharmacistuser)
                    .HasColumnName("reviewedbypharmacistuser")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Surgeon)
                    .HasColumnName("surgeon")
                    .HasMaxLength(255);

                entity.Property(e => e.Systolicbp)
                    .HasColumnName("systolicbp")
                    .HasColumnType("numeric");

                entity.Property(e => e.Systolicbp1)
                    .HasColumnName("systolicbp1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Systolicbp2)
                    .HasColumnName("systolicbp2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validatedby)
                    .HasColumnName("validatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric");

                entity.Property(e => e.Weightobservationid)
                    .HasColumnName("weightobservationid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaPrescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_prescription", "entitystorematerialised");

                entity.HasIndex(e => e.PoaPrescriptionId)
                    .HasDatabaseName("local_poa_prescription_poa_prescription_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_prescription__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_prescription__sequenceid_idx");

                entity.Property(e => e.Allowsubstitution)
                    .HasColumnName("allowsubstitution")
                    .HasMaxLength(1000);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby1)
                    .HasColumnName("createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EpmaPrescriptioneventId1)
                    .HasColumnName("epma_prescriptionevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Epmaprescriptioneventid)
                    .HasColumnName("epmaprescriptioneventid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenmodified).HasColumnName("hasbeenmodified");

                entity.Property(e => e.Indication)
                    .HasColumnName("indication")
                    .HasMaxLength(1000);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Isinfusion).HasColumnName("isinfusion");

                entity.Property(e => e.Ismedicinalgas).HasColumnName("ismedicinalgas");

                entity.Property(e => e.Lastmodifiedby)
                    .HasColumnName("lastmodifiedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Lastmodifiedon).HasColumnName("lastmodifiedon");

                entity.Property(e => e.Orderformtype)
                    .HasColumnName("orderformtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Oxygenadditionalinfo)
                    .HasColumnName("oxygenadditionalinfo")
                    .HasMaxLength(1000);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poacomments).HasColumnName("poacomments");

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId1)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Prescriptionsourceid)
                    .HasColumnName("prescriptionsourceid")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Reasonforediting)
                    .HasColumnName("reasonforediting")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforstopping)
                    .HasColumnName("reasonforstopping")
                    .HasMaxLength(1000);

                entity.Property(e => e.Reasonforsuspending)
                    .HasColumnName("reasonforsuspending")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Substitutioncomments)
                    .HasColumnName("substitutioncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Targetinr)
                    .HasColumnName("targetinr")
                    .HasMaxLength(255);

                entity.Property(e => e.Targetsaturation)
                    .HasColumnName("targetsaturation")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titration).HasColumnName("titration");

                entity.Property(e => e.Titrationtargetmax)
                    .HasColumnName("titrationtargetmax")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetmin)
                    .HasColumnName("titrationtargetmin")
                    .HasColumnType("numeric");

                entity.Property(e => e.Titrationtargetunits)
                    .HasColumnName("titrationtargetunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtype)
                    .HasColumnName("titrationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Titrationtypecode)
                    .HasColumnName("titrationtypecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaPrescriptionroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_prescriptionroutes", "entitystorematerialised");

                entity.HasIndex(e => e.PoaPrescriptionroutesId)
                    .HasDatabaseName("local_poa_prescriptionroutes_poa_prescriptionroutes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_prescriptionroutes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_prescriptionroutes__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Correlationid)
                    .HasColumnName("correlationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isunlicensed).HasColumnName("isunlicensed");

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionroutesId)
                    .HasColumnName("poa_prescriptionroutes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaid)
                    .HasColumnName("poaid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaStaffgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_staffgroup", "entitystorematerialised");

                entity.HasIndex(e => e.PoaStaffgroupId)
                    .HasDatabaseName("local_poa_staffgroup_poa_staffgroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_staffgroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_staffgroup__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Groupdescription)
                    .HasColumnName("groupdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Groupname)
                    .HasColumnName("groupname")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaStaffgroupId)
                    .HasColumnName("poa_staffgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_task", "entitystorematerialised");

                entity.HasIndex(e => e.PoaTaskId)
                    .HasDatabaseName("local_poa_task_poa_task_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_task__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_task__sequenceid_idx");

                entity.Property(e => e.Assignedto)
                    .HasColumnName("assignedto")
                    .HasMaxLength(255);

                entity.Property(e => e.Commontasks).HasColumnName("commontasks");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Hdurequired).HasColumnName("hdurequired");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaStaffgroupId)
                    .HasColumnName("poa_staffgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaTaskId)
                    .HasColumnName("poa_task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaTaskstatusId)
                    .HasColumnName("poa_taskstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referredto)
                    .HasColumnName("referredto")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskcreatedby)
                    .HasColumnName("taskcreatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreateddatetime).HasColumnName("taskcreateddatetime");

                entity.Property(e => e.Taskdetails).HasColumnName("taskdetails");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaTaskreferredto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_taskreferredto", "entitystorematerialised");

                entity.HasIndex(e => e.PoaTaskreferredtoId)
                    .HasDatabaseName("local_poa_taskreferredto_poa_taskreferredto_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_taskreferredto__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_taskreferredto__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.PoaTaskreferredtoId)
                    .HasColumnName("poa_taskreferredto_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referredto)
                    .HasColumnName("referredto")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaTaskstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_taskstatus", "entitystorematerialised");

                entity.HasIndex(e => e.PoaTaskstatusId)
                    .HasDatabaseName("local_poa_taskstatus_poa_taskstatus_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_taskstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_taskstatus__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PoaTaskstatusId)
                    .HasColumnName("poa_taskstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Statusname)
                    .HasColumnName("statusname")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusorder)
                    .HasColumnName("statusorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaTasksummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_tasksummary", "entitystorematerialised");

                entity.HasIndex(e => e.PoaTasksummaryId)
                    .HasDatabaseName("local_poa_tasksummary_poa_tasksummary_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_tasksummary__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_tasksummary__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaTasksummaryId)
                    .HasColumnName("poa_tasksummary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Taskbedmanagementsideroom).HasColumnName("taskbedmanagementsideroom");

                entity.Property(e => e.Taskbookhdubed).HasColumnName("taskbookhdubed");

                entity.Property(e => e.Taskconsiderreferanaesthetist).HasColumnName("taskconsiderreferanaesthetist");

                entity.Property(e => e.Taskcspinexray).HasColumnName("taskcspinexray");

                entity.Property(e => e.Taskflaghaem).HasColumnName("taskflaghaem");

                entity.Property(e => e.Taskinsertdeleriumproforma).HasColumnName("taskinsertdeleriumproforma");

                entity.Property(e => e.Taskprovideakiinfo).HasColumnName("taskprovideakiinfo");

                entity.Property(e => e.Taskreferacutepainteam).HasColumnName("taskreferacutepainteam");

                entity.Property(e => e.Taskreferanaesthetist).HasColumnName("taskreferanaesthetist");

                entity.Property(e => e.Taskrefercomplexcase).HasColumnName("taskrefercomplexcase");

                entity.Property(e => e.Taskreferdiabetesteam).HasColumnName("taskreferdiabetesteam");

                entity.Property(e => e.Taskreferdieteticteam).HasColumnName("taskreferdieteticteam");

                entity.Property(e => e.Taskrefergp).HasColumnName("taskrefergp");

                entity.Property(e => e.Taskreferpharmacy).HasColumnName("taskreferpharmacy");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalPoaUsersettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_poa_usersettings", "entitystorematerialised");

                entity.HasIndex(e => e.PoaUsersettingsId)
                    .HasDatabaseName("local_poa_usersettings_poa_usersettings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_poa_usersettings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_poa_usersettings__sequenceid_idx");

                entity.Property(e => e.Autoproceedtonextsection).HasColumnName("autoproceedtonextsection");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displaywarnings).HasColumnName("displaywarnings");

                entity.Property(e => e.PoaUsersettingsId)
                    .HasColumnName("poa_usersettings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRnohIntendedprocedure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rnoh_intendedprocedure", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_rnoh_intendedprocedure__recordstatus_idx");

                entity.HasIndex(e => e.RnohIntendedprocedureId)
                    .HasDatabaseName("local_rnoh_intendedprocedure_rnoh_intendedprocedure_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_rnoh_intendedprocedure__sequenceid_idx");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecode)
                    .HasColumnName("procedurecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Procedurecodingsystem)
                    .HasColumnName("procedurecodingsystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredatetime).HasColumnName("proceduredatetime");

                entity.Property(e => e.Proceduredatetimets)
                    .HasColumnName("proceduredatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Proceduredescription)
                    .HasColumnName("proceduredescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Proceduretext)
                    .HasColumnName("proceduretext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RnohIntendedprocedureId)
                    .HasColumnName("rnoh_intendedprocedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_comment", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsCommentId)
                    .HasColumnName("rts_comment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_document", "entitystorematerialised");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filepath)
                    .HasColumnName("filepath")
                    .HasMaxLength(1000);

                entity.Property(e => e.Filetype)
                    .HasColumnName("filetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsDocumentId)
                    .HasColumnName("rts_document_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsReferencedata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referencedata", "entitystorematerialised");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasMaxLength(255);

                entity.Property(e => e.Effectivedate).HasColumnName("effectivedate");

                entity.Property(e => e.Publisher)
                    .HasColumnName("publisher")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferencedataId)
                    .HasColumnName("rts_referencedata_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuesetid)
                    .HasColumnName("valuesetid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalRtsReferral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_rts_referral", "entitystorematerialised");

                entity.Property(e => e.Appointmentdate).HasColumnName("appointmentdate");

                entity.Property(e => e.Assignedtoprovider)
                    .HasColumnName("assignedtoprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedtospeciality)
                    .HasColumnName("assignedtospeciality")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalinfofirstsubmitted).HasColumnName("clinicalinfofirstsubmitted");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Datebookingmade).HasColumnName("datebookingmade");

                entity.Property(e => e.Documentsdownloaded).HasColumnName("documentsdownloaded");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasMaxLength(255);

                entity.Property(e => e.Providerteamtriage)
                    .HasColumnName("providerteamtriage")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReferralId)
                    .HasColumnName("referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringlocation)
                    .HasColumnName("referringlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringprovider)
                    .HasColumnName("referringprovider")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdate).HasColumnName("statusdate");

                entity.Property(e => e.Statususer)
                    .HasColumnName("statususer")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Ubrn)
                    .HasColumnName("ubrn")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_department", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_department__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsDepartmentId)
                    .HasDatabaseName("local_scrubs_department_scrubs_department_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_department__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Departmentname)
                    .HasColumnName("departmentname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsDepartmentId)
                    .HasColumnName("scrubs_department_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsPack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_pack", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_pack__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsPackId)
                    .HasDatabaseName("local_scrubs_pack_scrubs_pack_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_pack__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Maxissuesperstaffmember).HasColumnName("maxissuesperstaffmember");

                entity.Property(e => e.Packdescription)
                    .HasColumnName("packdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Packname)
                    .HasColumnName("packname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsPackId)
                    .HasColumnName("scrubs_pack_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsPackitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_packitem", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_packitem__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsPackitemId)
                    .HasDatabaseName("local_scrubs_packitem_scrubs_packitem_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_packitem__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Itemdescription)
                    .HasColumnName("itemdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Itemname)
                    .HasColumnName("itemname")
                    .HasMaxLength(255);

                entity.Property(e => e.Numberinpack).HasColumnName("numberinpack");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsPackId)
                    .HasColumnName("scrubs_pack_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsPackitemId)
                    .HasColumnName("scrubs_packitem_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsStaffgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_staffgroup", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_staffgroup__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsStaffgroupId)
                    .HasDatabaseName("local_scrubs_staffgroup_scrubs_staffgroup_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_staffgroup__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsStaffgroupId)
                    .HasColumnName("scrubs_staffgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Staffgroupname)
                    .HasColumnName("staffgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsStaffmember>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_staffmember", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_staffmember__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsStaffmemberId)
                    .HasDatabaseName("local_scrubs_staffmember_scrubs_staffmember_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_staffmember__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Department)
                    .HasColumnName("department")
                    .HasMaxLength(255);

                entity.Property(e => e.Designation)
                    .HasColumnName("designation")
                    .HasMaxLength(255);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Generalnotes).HasColumnName("generalnotes");

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsStaffmemberId)
                    .HasColumnName("scrubs_staffmember_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Staffgroup)
                    .HasColumnName("staffgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Telephone)
                    .HasColumnName("telephone")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalScrubsStaffpackissue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_scrubs_staffpackissue", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_scrubs_staffpackissue__recordstatus_idx");

                entity.HasIndex(e => e.ScrubsStaffpackissueId)
                    .HasDatabaseName("local_scrubs_staffpackissue_scrubs_staffpackissue_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_scrubs_staffpackissue__sequenceid_idx");

                entity.Property(e => e.Canceldate)
                    .HasColumnName("canceldate")
                    .HasColumnType("date");

                entity.Property(e => e.Cancelnotes)
                    .HasColumnName("cancelnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Issuedate)
                    .HasColumnName("issuedate")
                    .HasColumnType("date");

                entity.Property(e => e.Issuenotes)
                    .HasColumnName("issuenotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Issuestatus)
                    .HasColumnName("issuestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Returndate)
                    .HasColumnName("returndate")
                    .HasColumnType("date");

                entity.Property(e => e.Returnnotes)
                    .HasColumnName("returnnotes")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsPackId)
                    .HasColumnName("scrubs_pack_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsStaffmemberId)
                    .HasColumnName("scrubs_staffmember_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ScrubsStaffpackissueId)
                    .HasColumnName("scrubs_staffpackissue_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambCad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_cad", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_secamb_cad__recordstatus_idx");

                entity.HasIndex(e => e.SecambCadId)
                    .HasDatabaseName("local_secamb_cad_secamb_cad_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_secamb_cad__sequenceid_idx");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambEpcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcr", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_secamb_epcr__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcrId)
                    .HasDatabaseName("local_secamb_epcr_secamb_epcr_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_secamb_epcr__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystorematerialised_LocalSecambEpcramended>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_secamb_epcramended", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_secamb_epcramended__recordstatus_idx");

                entity.HasIndex(e => e.SecambEpcramendedId)
                    .HasDatabaseName("local_secamb_epcramended_secamb_epcramended_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_secamb_epcramended__sequenceid_idx");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcramendedId)
                    .HasColumnName("secamb_epcramended_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_form", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Activefrom).HasColumnName("activefrom");

                entity.Property(e => e.Activeto).HasColumnName("activeto");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusFormfield>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formfield", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Defaultvalue)
                    .HasColumnName("defaultvalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Displaytext)
                    .HasColumnName("displaytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Fieldtype)
                    .HasColumnName("fieldtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Htmlcontent).HasColumnName("htmlcontent");

                entity.Property(e => e.Jsoncontent).HasColumnName("jsoncontent");

                entity.Property(e => e.Mandatory).HasColumnName("mandatory");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormfieldId)
                    .HasColumnName("terminus_formfield_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validationpattern)
                    .HasColumnName("validationpattern")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusFormsection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_formsection", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormId)
                    .HasColumnName("terminus_form_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusFormsectionId)
                    .HasColumnName("terminus_formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusMedicaltest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_medicaltest", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_terminus_medicaltest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_terminus_medicaltest__sequenceid_idx");

                entity.HasIndex(e => e.TerminusMedicaltestId)
                    .HasDatabaseName("local_terminus_medicaltest_terminus_medicaltest_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusMedicaltestId)
                    .HasColumnName("terminus_medicaltest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusModuledataversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_moduledataversion", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_terminus_moduledataversion__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_terminus_moduledataversion__sequenceid_idx");

                entity.HasIndex(e => e.TerminusModuledataversionId)
                    .HasDatabaseName("local_terminus_moduledatavers_terminus_moduledataversion_id_idx");

                entity.Property(e => e.Contextid)
                    .HasColumnName("contextid")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);

                entity.Property(e => e.Pglockid)
                    .HasColumnName("pglockid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusModuledataversionId)
                    .HasColumnName("terminus_moduledataversion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Versionid)
                    .HasColumnName("versionid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTerminusSpvlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_terminus_spvlog", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateviewed).HasColumnName("dateviewed");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusSpvlogId)
                    .HasColumnName("terminus_spvlog_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalTestMcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_test_mcc", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_test_mcc__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_test_mcc__sequenceid_idx");

                entity.HasIndex(e => e.TestMccId)
                    .HasDatabaseName("local_test_mcc_test_mcc_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TestMccId)
                    .HasColumnName("test_mcc_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalTestWgtest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_test_wgtest", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_test_wgtest__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_test_wgtest__sequenceid_idx");

                entity.HasIndex(e => e.TestWgtestId)
                    .HasDatabaseName("local_test_wgtest_test_wgtest_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasMaxLength(255);

                entity.Property(e => e.TestWgtestId)
                    .HasColumnName("test_wgtest_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_LocalUszDemoperson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_usz_demoperson", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_usz_demoperson__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_usz_demoperson__sequenceid_idx");

                entity.HasIndex(e => e.UszDemopersonId)
                    .HasDatabaseName("local_usz_demoperson_usz_demoperson_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.UszDemopersonId)
                    .HasColumnName("usz_demoperson_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_LocalWgTest123>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("local_wg_test123", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("local_wg_test123__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("local_wg_test123__sequenceid_idx");

                entity.HasIndex(e => e.WgTest123Id)
                    .HasDatabaseName("local_wg_test123_wg_test123_id_idx");

                entity.Property(e => e.Age)
                    .HasColumnName("age")
                    .HasColumnType("numeric");

                entity.Property(e => e.AneMsId)
                    .HasColumnName("ane_ms_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MasterAccountmerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_accountmerges", "entitystorematerialised");

                entity.HasIndex(e => e.AccountmergesId)
                    .HasDatabaseName("master_accountmerges_accountmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("master_accountmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("master_accountmerges__sequenceid_idx");

                entity.Property(e => e.AccountmergesId)
                    .HasColumnName("accountmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destaccountid)
                    .HasColumnName("destaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Masteraccountid)
                    .HasColumnName("masteraccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourceaccountid)
                    .HasColumnName("sourceaccountid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterEncounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encounter", "entitystorematerialised");

                entity.HasIndex(e => e.EncounterId)
                    .HasDatabaseName("master_encounter_encounter_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("master_encounter__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("master_encounter__sequenceid_idx");

                entity.Property(e => e.Accountnumber)
                    .HasColumnName("accountnumber")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscode)
                    .HasColumnName("accountstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Accountstatuscodetext)
                    .HasColumnName("accountstatuscodetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcecode)
                    .HasColumnName("admissionsourcecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admissionsourcetext)
                    .HasColumnName("admissionsourcetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitdatetimets)
                    .HasColumnName("admitdatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Admitreasoncode)
                    .HasColumnName("admitreasoncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Admittingdoctortext)
                    .HasColumnName("admittingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationbuilding)
                    .HasColumnName("assignedpatientlocationbuilding")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfacility)
                    .HasColumnName("assignedpatientlocationfacility")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationfloor)
                    .HasColumnName("assignedpatientlocationfloor")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationidentifier)
                    .HasColumnName("assignedpatientlocationidentifier")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(1000);

                entity.Property(e => e.Assignedpatientlocationroom)
                    .HasColumnName("assignedpatientlocationroom")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargecode)
                    .HasColumnName("dischargecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dischargedatetimets)
                    .HasColumnName("dischargedatetimets")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedisposition)
                    .HasColumnName("dischargedisposition")
                    .HasMaxLength(1000);

                entity.Property(e => e.Dischargetext)
                    .HasColumnName("dischargetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Encounterid1)
                    .HasColumnName("encounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienttypetext)
                    .HasColumnName("patienttypetext")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Referringdoctortext)
                    .HasColumnName("referringdoctortext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_MasterEncountermerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_encountermerges", "entitystorematerialised");

                entity.HasIndex(e => e.EncountermergesId)
                    .HasDatabaseName("master_encountermerges_encountermerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("master_encountermerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("master_encountermerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destencounterid)
                    .HasColumnName("destencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.EncountermergesId)
                    .HasColumnName("encountermerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterencounterid)
                    .HasColumnName("masterencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceencounterid)
                    .HasColumnName("sourceencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MasterPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_person", "entitystorematerialised");

                entity.HasIndex(e => e.PersonId)
                    .HasDatabaseName("master_person_person_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("master_person__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("master_person__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(1000);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(1000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(1000);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<entitystorematerialised_MasterPersonmerges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("master_personmerges", "entitystorematerialised");

                entity.HasIndex(e => e.PersonmergesId)
                    .HasDatabaseName("master_personmerges_personmerges_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("master_personmerges__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("master_personmerges__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Destcompoundid)
                    .HasColumnName("destcompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Destdomain)
                    .HasColumnName("destdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Destidnumber)
                    .HasColumnName("destidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Destpersonid)
                    .HasColumnName("destpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Masterpersonid)
                    .HasColumnName("masterpersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonmergesId)
                    .HasColumnName("personmerges_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourcecompoundid)
                    .HasColumnName("sourcecompoundid")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceiddomain)
                    .HasColumnName("sourceiddomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceidnumber)
                    .HasColumnName("sourceidnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcepersonid)
                    .HasColumnName("sourcepersonid")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAdminpins>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_adminpins", "entitystorematerialised");

                entity.HasIndex(e => e.AdminpinsId)
                    .HasDatabaseName("meta_adminpins_adminpins_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_adminpins__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_adminpins__sequenceid_idx");

                entity.Property(e => e.AdminpinsId)
                    .HasColumnName("adminpins_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Pin)
                    .HasColumnName("pin")
                    .HasMaxLength(255);

                entity.Property(e => e.Pintype)
                    .HasColumnName("pintype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAllergycategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_allergycategory", "entitystorematerialised");

                entity.HasIndex(e => e.AllergycategoryId)
                    .HasDatabaseName("meta_allergycategory_allergycategory_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_allergycategory__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_allergycategory__sequenceid_idx");

                entity.Property(e => e.Allergycategory)
                    .HasColumnName("allergycategory")
                    .HasMaxLength(255);

                entity.Property(e => e.AllergycategoryId)
                    .HasColumnName("allergycategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAllergyclinicalstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_allergyclinicalstatus", "entitystorematerialised");

                entity.HasIndex(e => e.AllergyclinicalstatusId)
                    .HasDatabaseName("meta_allergyclinicalstatus_allergyclinicalstatus_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_allergyclinicalstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_allergyclinicalstatus__sequenceid_idx");

                entity.Property(e => e.AllergyclinicalstatusId)
                    .HasColumnName("allergyclinicalstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatus)
                    .HasColumnName("clinicalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAllergycriticality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_allergycriticality", "entitystorematerialised");

                entity.HasIndex(e => e.AllergycriticalityId)
                    .HasDatabaseName("meta_allergycriticality_allergycriticality_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_allergycriticality__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_allergycriticality__sequenceid_idx");

                entity.Property(e => e.AllergycriticalityId)
                    .HasColumnName("allergycriticality_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAllergyreportedbygroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_allergyreportedbygroup", "entitystorematerialised");

                entity.HasIndex(e => e.AllergyreportedbygroupId)
                    .HasDatabaseName("meta_allergyreportedbygroup_allergyreportedbygroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_allergyreportedbygroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_allergyreportedbygroup__sequenceid_idx");

                entity.Property(e => e.AllergyreportedbygroupId)
                    .HasColumnName("allergyreportedbygroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Groupname)
                    .HasColumnName("groupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAllergyverificationstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_allergyverificationstatus", "entitystorematerialised");

                entity.HasIndex(e => e.AllergyverificationstatusId)
                    .HasDatabaseName("meta_allergyverificationstatus_allergyverificationstatus_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_allergyverificationstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_allergyverificationstatus__sequenceid_idx");

                entity.Property(e => e.AllergyverificationstatusId)
                    .HasColumnName("allergyverificationstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Poaname)
                    .HasColumnName("poaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaonly).HasColumnName("poaonly");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaAnaesthetic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_anaesthetic", "entitystorematerialised");

                entity.HasIndex(e => e.AnaestheticId)
                    .HasDatabaseName("meta_anaesthetic_anaesthetic_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_anaesthetic__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_anaesthetic__sequenceid_idx");

                entity.Property(e => e.AnaestheticId)
                    .HasColumnName("anaesthetic_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAntibiotics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_antibiotics", "entitystorematerialised");

                entity.HasIndex(e => e.AntibioticsId)
                    .HasDatabaseName("meta_antibiotics_antibiotics_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_antibiotics__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_antibiotics__sequenceid_idx");

                entity.Property(e => e.AntibioticsId)
                    .HasColumnName("antibiotics_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_application", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationId)
                    .HasDatabaseName("meta_application_application_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_application__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_application__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Applicationname)
                    .HasColumnName("applicationname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplicationlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationlist", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationlistId)
                    .HasDatabaseName("meta_applicationlist_applicationlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_applicationlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_applicationlist__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationlistId)
                    .HasColumnName("applicationlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Listid)
                    .HasColumnName("listid")
                    .HasMaxLength(255);

                entity.Property(e => e.Listname)
                    .HasColumnName("listname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplicationmodulemapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationmodulemapping", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationmodulemappingId)
                    .HasDatabaseName("meta_applicationmodulemapping_applicationmodulemapping_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_applicationmodulemapping__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_applicationmodulemapping__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationmodulemappingId)
                    .HasColumnName("applicationmodulemapping_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefaultmodule).HasColumnName("isdefaultmodule");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaApplicationquestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_applicationquestion", "entitystorematerialised");

                entity.HasIndex(e => e.ApplicationquestionId)
                    .HasDatabaseName("meta_applicationquestion_applicationquestion_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_applicationquestion__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_applicationquestion__sequenceid_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ApplicationquestionId)
                    .HasColumnName("applicationquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Isselected).HasColumnName("isselected");

                entity.Property(e => e.Ordinalposition).HasColumnName("ordinalposition");

                entity.Property(e => e.Questionid)
                    .HasColumnName("questionid")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaAssessmenttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_assessmenttype", "entitystorematerialised");

                entity.HasIndex(e => e.AssessmenttypeId)
                    .HasDatabaseName("meta_assessmenttype_assessmenttype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_assessmenttype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_assessmenttype__sequenceid_idx");

                entity.Property(e => e.Actionname)
                    .HasColumnName("actionname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Actionurl)
                    .HasColumnName("actionurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.AssessmenttypeId)
                    .HasColumnName("assessmenttype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typename)
                    .HasColumnName("typename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaBedstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_bedstatus", "entitystorematerialised");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.BedstatusId)
                    .HasColumnName("bedstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusnumber).HasColumnName("statusnumber");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaCarerecordtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_carerecordtype", "entitystorematerialised");

                entity.HasIndex(e => e.CarerecordtypeId)
                    .HasDatabaseName("meta_carerecordtype_carerecordtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_carerecordtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_carerecordtype__sequenceid_idx");

                entity.Property(e => e.CarerecordtypeId)
                    .HasColumnName("carerecordtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaChart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chart", "entitystorematerialised");

                entity.HasIndex(e => e.ChartId)
                    .HasDatabaseName("meta_chart_chart_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_chart__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_chart__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartname)
                    .HasColumnName("chartname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaChartgraph>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_chartgraph", "entitystorematerialised");

                entity.HasIndex(e => e.ChartgraphId)
                    .HasDatabaseName("meta_chartgraph_chartgraph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_chartgraph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_chartgraph__sequenceid_idx");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ChartgraphId)
                    .HasColumnName("chartgraph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartgraphorder)
                    .HasColumnName("chartgraphorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaClinicalsummarystatuses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_clinicalsummarystatuses", "entitystorematerialised");

                entity.HasIndex(e => e.ClinicalsummarystatusesId)
                    .HasDatabaseName("meta_clinicalsummarystatuses_clinicalsummarystatuses_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_clinicalsummarystatuses__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_clinicalsummarystatuses__sequenceid_idx");

                entity.Property(e => e.ClinicalsummarystatusesId)
                    .HasColumnName("clinicalsummarystatuses_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MetaCliniccontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_cliniccontext", "baseview");

                entity.Property(e => e.Cliniccode).HasColumnName("cliniccode");

                entity.Property(e => e.Clinictext).HasColumnName("clinictext");
            });

            modelBuilder.Entity<entitystorematerialised_MetaComplianceaid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_complianceaid", "entitystorematerialised");

                entity.HasIndex(e => e.ComplianceaidId)
                    .HasDatabaseName("meta_complianceaid_complianceaid_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_complianceaid__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_complianceaid__sequenceid_idx");

                entity.Property(e => e.ComplianceaidId)
                    .HasColumnName("complianceaid_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ComplianceaidName)
                    .HasColumnName("complianceaid_name")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaConsultantcontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_consultantcontext", "baseview");

                entity.Property(e => e.Consultantcode)
                    .HasColumnName("consultantcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultanttext)
                    .HasColumnName("consultanttext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaCurrentmedsprescriptionsource>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_currentmedsprescriptionsource", "entitystorematerialised");

                entity.HasIndex(e => e.CurrentmedsprescriptionsourceId)
                    .HasDatabaseName("meta_currentmedsprescriptions_currentmedsprescriptionsource_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_currentmedsprescriptionsource__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_currentmedsprescriptionsource__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.CurrentmedsprescriptionsourceId)
                    .HasColumnName("currentmedsprescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaExpectedurineoutput>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_expectedurineoutput", "entitystorematerialised");

                entity.HasIndex(e => e.ExpectedurineoutputId)
                    .HasDatabaseName("meta_expectedurineoutput_expectedurineoutput_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_expectedurineoutput__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_expectedurineoutput__sequenceid_idx");

                entity.Property(e => e.Agefrom)
                    .HasColumnName("agefrom")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ageto)
                    .HasColumnName("ageto")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.ExpectedurineoutputId)
                    .HasColumnName("expectedurineoutput_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalanceiotype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalanceiotype", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalanceiotypeId)
                    .HasDatabaseName("meta_fluidbalanceiotype_fluidbalanceiotype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_fluidbalanceiotype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_fluidbalanceiotype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalanceiotypeId)
                    .HasColumnName("fluidbalanceiotype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Iotype)
                    .HasColumnName("iotype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologycode)
                    .HasColumnName("terminologycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalancetimeslot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetimeslot", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancetimeslotId)
                    .HasDatabaseName("meta_fluidbalancetimeslot_fluidbalancetimeslot_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_fluidbalancetimeslot__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_fluidbalancetimeslot__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FluidbalancetimeslotId)
                    .HasColumnName("fluidbalancetimeslot_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeslot)
                    .HasColumnName("timeslot")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidbalancetype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidbalancetype", "entitystorematerialised");

                entity.HasIndex(e => e.FluidbalancetypeId)
                    .HasDatabaseName("meta_fluidbalancetype_fluidbalancetype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_fluidbalancetype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_fluidbalancetype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidbalancerouteId)
                    .HasColumnName("fluidbalanceroute_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FluidbalancetypeId)
                    .HasColumnName("fluidbalancetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Fluidintakeoroutputtype)
                    .HasColumnName("fluidintakeoroutputtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typename)
                    .HasColumnName("typename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaFluidcapturedevice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_fluidcapturedevice", "entitystorematerialised");

                entity.HasIndex(e => e.FluidcapturedeviceId)
                    .HasDatabaseName("meta_fluidcapturedevice_fluidcapturedevice_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_fluidcapturedevice__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_fluidcapturedevice__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidcapturedeviceId)
                    .HasColumnName("fluidcapturedevice_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormbuildercategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formbuildercategory", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuildercategoryId)
                    .HasDatabaseName("meta_formbuildercategory_formbuildercategory_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formbuildercategory__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formbuildercategory__sequenceid_idx");

                entity.Property(e => e.Categorydescription)
                    .HasColumnName("categorydescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Categoryname)
                    .HasColumnName("categoryname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormbuildercategoryId)
                    .HasColumnName("formbuildercategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormbuilderform>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formbuilderform", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuilderformId)
                    .HasDatabaseName("meta_formbuilderform_formbuilderform_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formbuilderform__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formbuilderform__sequenceid_idx");

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormbuildercategoryId)
                    .HasColumnName("formbuildercategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuilderformId)
                    .HasColumnName("formbuilderform_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuildersystemtypeId)
                    .HasColumnName("formbuildersystemtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcomponents).HasColumnName("formcomponents");

                entity.Property(e => e.Formname)
                    .HasColumnName("formname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormbuildersubcategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formbuildersubcategory", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuildersubcategoryId)
                    .HasDatabaseName("meta_formbuildersubcategory_formbuildersubcategory_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formbuildersubcategory__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formbuildersubcategory__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormbuildercategoryId)
                    .HasColumnName("formbuildercategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuildersubcategoryId)
                    .HasColumnName("formbuildersubcategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Subcategorydescription)
                    .HasColumnName("subcategorydescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Subcategoryname)
                    .HasColumnName("subcategoryname")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormbuildersystemtemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formbuildersystemtemplate", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuildersystemtemplateId)
                    .HasDatabaseName("meta_formbuildersystemtemplate_formbuildersystemtemplate_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formbuildersystemtemplate__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formbuildersystemtemplate__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormbuildersystemtemplateId)
                    .HasColumnName("formbuildersystemtemplate_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcomponent).HasColumnName("formcomponent");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormbuildersystemtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formbuildersystemtype", "entitystorematerialised");

                entity.HasIndex(e => e.FormbuildersystemtypeId)
                    .HasDatabaseName("meta_formbuildersystemtype_formbuildersystemtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formbuildersystemtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formbuildersystemtype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormbuildersystemtypeId)
                    .HasColumnName("formbuildersystemtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Selectorderby)
                    .HasColumnName("selectorderby")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Systemtypedescription)
                    .HasColumnName("systemtypedescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Systemtypename)
                    .HasColumnName("systemtypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormsection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formsection", "entitystorematerialised");

                entity.HasIndex(e => e.FormsectionId)
                    .HasDatabaseName("meta_formsection_formsection_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formsection__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formsection__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Headertext)
                    .HasColumnName("headertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Templateversionid)
                    .HasColumnName("templateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormsectionquestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formsectionquestion", "entitystorematerialised");

                entity.HasIndex(e => e.FormsectionquestionId)
                    .HasDatabaseName("meta_formsectionquestion_formsectionquestion_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formsectionquestion__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formsectionquestion__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormsectionquestionId)
                    .HasColumnName("formsectionquestion_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Question).HasColumnName("question");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sectiontemplateversionid)
                    .HasColumnName("sectiontemplateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaFormtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_formtype", "entitystorematerialised");

                entity.HasIndex(e => e.FormtypeId)
                    .HasDatabaseName("meta_formtype_formtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_formtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_formtype__sequenceid_idx");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.FormtypeId)
                    .HasColumnName("formtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Headertext)
                    .HasColumnName("headertext")
                    .HasMaxLength(1000);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Typename)
                    .HasColumnName("typename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraph>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graph", "entitystorematerialised");

                entity.HasIndex(e => e.GraphId)
                    .HasDatabaseName("meta_graph_graph_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_graph__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_graph__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphname)
                    .HasColumnName("graphname")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphtype)
                    .HasColumnName("graphtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphband>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphband", "entitystorematerialised");

                entity.HasIndex(e => e.GraphbandId)
                    .HasDatabaseName("meta_graphband_graphband_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_graphband__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_graphband__sequenceid_idx");

                entity.Property(e => e.Bandorder)
                    .HasColumnName("bandorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Bandscore)
                    .HasColumnName("bandscore")
                    .HasColumnType("numeric");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Domainvalue)
                    .HasColumnName("domainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphbandId)
                    .HasColumnName("graphband_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Label)
                    .HasColumnName("label")
                    .HasMaxLength(255);

                entity.Property(e => e.Lowerlimit)
                    .HasColumnName("lowerlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ordinalparameterdomain)
                    .HasColumnName("ordinalparameterdomain")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Secondarydomainvalue)
                    .HasColumnName("secondarydomainvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Upperlimit)
                    .HasColumnName("upperlimit")
                    .HasColumnType("numeric");

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MetaGraphcharts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphcharts", "baseview");

                entity.Property(e => e.ChartId)
                    .HasColumnName("chart_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Chartgraphorder)
                    .HasColumnName("chartgraphorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Chartname)
                    .HasColumnName("chartname")
                    .HasMaxLength(255);

                entity.Property(e => e.Ewsbandingrange).HasColumnName("ewsbandingrange");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphname)
                    .HasColumnName("graphname")
                    .HasMaxLength(255);

                entity.Property(e => e.Graphtype)
                    .HasColumnName("graphtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordinalparameterdomain)
                    .HasColumnName("ordinalparameterdomain")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Parameterdomain).HasColumnName("parameterdomain");

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Parameterlabelsdomain)
                    .HasColumnName("parameterlabelsdomain")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasColumnType("character varying[]");

                entity.Property(e => e.Secondaryparameterdomain).HasColumnName("secondaryparameterdomain");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphparameterkey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphparameterkey", "entitystorematerialised");

                entity.HasIndex(e => e.GraphparameterkeyId)
                    .HasDatabaseName("meta_graphparameterkey_graphparameterkey_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_graphparameterkey__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_graphparameterkey__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphparameterkeyId)
                    .HasColumnName("graphparameterkey_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Parameterkey)
                    .HasColumnName("parameterkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaGraphscale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_graphscale", "entitystorematerialised");

                entity.HasIndex(e => e.GraphscaleId)
                    .HasDatabaseName("meta_graphscale_graphscale_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_graphscale__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_graphscale__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.GraphId)
                    .HasColumnName("graph_id")
                    .HasMaxLength(255);

                entity.Property(e => e.GraphscaleId)
                    .HasColumnName("graphscale_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scale)
                    .HasColumnName("scale")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaInfusiontype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_infusiontype", "entitystorematerialised");

                entity.HasIndex(e => e.InfusiontypeId)
                    .HasDatabaseName("meta_infusiontype_infusiontype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_infusiontype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_infusiontype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Infusiontype)
                    .HasColumnName("infusiontype")
                    .HasMaxLength(255);

                entity.Property(e => e.InfusiontypeId)
                    .HasColumnName("infusiontype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaListcontexts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_listcontexts", "entitystorematerialised");

                entity.HasIndex(e => e.ListcontextsId)
                    .HasDatabaseName("meta_listcontexts_listcontexts_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_listcontexts__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_listcontexts__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Field)
                    .HasColumnName("field")
                    .HasMaxLength(255);

                entity.Property(e => e.ListId)
                    .HasColumnName("list_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ListcontextsId)
                    .HasColumnName("listcontexts_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaLocationtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_locationtype", "entitystorematerialised");

                entity.HasIndex(e => e.LocationtypeId)
                    .HasDatabaseName("meta_locationtype_locationtype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_locationtype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_locationtype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.LocationtypeId)
                    .HasColumnName("locationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationtypecode)
                    .HasColumnName("locationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Locationtypetext)
                    .HasColumnName("locationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_module", "entitystorematerialised");

                entity.HasIndex(e => e.ModuleId)
                    .HasDatabaseName("meta_module_module_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_module__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_module__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Domselector)
                    .HasColumnName("domselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Jsurl)
                    .HasColumnName("jsurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Moduledescription)
                    .HasColumnName("moduledescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaModulelist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_modulelist", "baseview");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Domselector)
                    .HasColumnName("domselector")
                    .HasMaxLength(255);

                entity.Property(e => e.Isdefaultmodule).HasColumnName("isdefaultmodule");

                entity.Property(e => e.Jsurl)
                    .HasColumnName("jsurl")
                    .HasMaxLength(1000);

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Moduledescription)
                    .HasColumnName("moduledescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Modulename)
                    .HasColumnName("modulename")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationchartsettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationchartsettings", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationchartsettingsId)
                    .HasDatabaseName("meta_observationchartsettings_observationchartsettings_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_observationchartsettings__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_observationchartsettings__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Numberofcolumnsinthechart)
                    .HasColumnName("numberofcolumnsinthechart")
                    .HasColumnType("numeric");

                entity.Property(e => e.ObservationchartsettingsId)
                    .HasColumnName("observationchartsettings_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ratioofcellheighttowidth)
                    .HasColumnName("ratioofcellheighttowidth")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationscaletype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationscaletype", "entitystorematerialised");

                entity.HasIndex(e => e.ObservationscaletypeId)
                    .HasDatabaseName("meta_observationscaletype_observationscaletype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_observationscaletype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_observationscaletype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ObservationscaletypeId)
                    .HasColumnName("observationscaletype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Scaletypedescription)
                    .HasColumnName("scaletypedescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Scaletypename)
                    .HasColumnName("scaletypename")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtype", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Valuelist)
                    .HasColumnName("valuelist")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaObservationtypemeasurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_observationtypemeasurement", "entitystorematerialised");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaOrdercategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_ordercategory", "entitystorematerialised");

                entity.HasIndex(e => e.OrdercategoryId)
                    .HasDatabaseName("meta_ordercategory_ordercategory_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_ordercategory__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_ordercategory__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Diagnosticserviceid)
                    .HasColumnName("diagnosticserviceid")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordercategory)
                    .HasColumnName("ordercategory")
                    .HasMaxLength(255);

                entity.Property(e => e.OrdercategoryId)
                    .HasColumnName("ordercategory_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordertype)
                    .HasColumnName("ordertype")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaOxygendevices>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_oxygendevices", "entitystorematerialised");

                entity.HasIndex(e => e.OxygendevicesId)
                    .HasDatabaseName("meta_oxygendevices_oxygendevices_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_oxygendevices__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_oxygendevices__sequenceid_idx");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.OxygendevicesId)
                    .HasColumnName("oxygendevices_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaOxygenprescriptionadditionalinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_oxygenprescriptionadditionalinfo", "entitystorematerialised");

                entity.HasIndex(e => e.OxygenprescriptionadditionalinfoId)
                    .HasDatabaseName("meta_oxygenprescriptionadditi_oxygenprescriptionadditionali_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_oxygenprescriptionadditionalinfo__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_oxygenprescriptionadditionalinfo__sequenceid_idx");

                entity.Property(e => e.Additionalinfo)
                    .HasColumnName("additionalinfo")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.OxygenprescriptionadditionalinfoId)
                    .HasColumnName("oxygenprescriptionadditionalinfo_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersona>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_persona", "entitystorematerialised");

                entity.HasIndex(e => e.PersonaId)
                    .HasDatabaseName("meta_persona_persona_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_persona__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_persona__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personaname)
                    .HasColumnName("personaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_MetaPersona1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_persona", "baseview");

                entity.Property(e => e.Contextname)
                    .HasColumnName("contextname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Personadispname)
                    .HasColumnName("personadispname")
                    .HasMaxLength(255);

                entity.Property(e => e.Personadisporder).HasColumnName("personadisporder");

                entity.Property(e => e.Personaname)
                    .HasColumnName("personaname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontext", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextId)
                    .HasDatabaseName("meta_personacontext_personacontext_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_personacontext__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_personacontext__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextname)
                    .HasColumnName("contextname")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Mappingentitycolumn)
                    .HasColumnName("mappingentitycolumn")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentitycontext)
                    .HasColumnName("mappingentitycontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Mappingentityname)
                    .HasColumnName("mappingentityname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonaId)
                    .HasColumnName("persona_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroup", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextgroupId)
                    .HasDatabaseName("meta_personacontextgroup_personacontextgroup_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_personacontextgroup__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_personacontextgroup__sequenceid_idx");

                entity.Property(e => e.Contextgroupname)
                    .HasColumnName("contextgroupname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextgroupusers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextgroupusers", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextgroupusersId)
                    .HasDatabaseName("meta_personacontextgroupusers_personacontextgroupusers_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_personacontextgroupusers__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_personacontextgroupusers__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.PersonacontextgroupId)
                    .HasColumnName("personacontextgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextgroupusersId)
                    .HasColumnName("personacontextgroupusers_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Useridentifier)
                    .HasColumnName("useridentifier")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaPersonacontextmappingcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_personacontextmappingcodes", "entitystorematerialised");

                entity.HasIndex(e => e.PersonacontextmappingcodesId)
                    .HasDatabaseName("meta_personacontextmappingcod_personacontextmappingcodes_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_personacontextmappingcodes__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_personacontextmappingcodes__sequenceid_idx");

                entity.Property(e => e.Codetype)
                    .HasColumnName("codetype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Mappingcode)
                    .HasColumnName("mappingcode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextId)
                    .HasColumnName("personacontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonacontextmappingcodesId)
                    .HasColumnName("personacontextmappingcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPositioning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_positioning", "entitystorematerialised");

                entity.HasIndex(e => e.PositioningId)
                    .HasDatabaseName("meta_positioning_positioning_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_positioning__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_positioning__sequenceid_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.PositioningId)
                    .HasColumnName("positioning_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Text)
                    .HasColumnName("text")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionadditionalconditions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionadditionalconditions", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionadditionalconditionsId)
                    .HasDatabaseName("meta_prescriptionadditionalco_prescriptionadditionalconditi_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionadditionalconditions__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionadditionalconditions__sequenceid_idx");

                entity.Property(e => e.Additionalcondition)
                    .HasColumnName("additionalcondition")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PrescriptionadditionalconditionsId)
                    .HasColumnName("prescriptionadditionalconditions_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptioncontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptioncontext", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptioncontextId)
                    .HasDatabaseName("meta_prescriptioncontext_prescriptioncontext_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptioncontext__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptioncontext__sequenceid_idx");

                entity.Property(e => e.Context)
                    .HasColumnName("context")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PrescriptioncontextId)
                    .HasColumnName("prescriptioncontext_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionduration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionduration", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptiondurationId)
                    .HasDatabaseName("meta_prescriptionduration_prescriptionduration_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionduration__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionduration__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptiondurationId)
                    .HasColumnName("prescriptionduration_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionfrequency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionfrequency", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionfrequencyId)
                    .HasDatabaseName("meta_prescriptionfrequency_prescriptionfrequency_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionfrequency__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionfrequency__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Frequency)
                    .HasColumnName("frequency")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionId)
                    .HasColumnName("prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionfrequencyId)
                    .HasColumnName("prescriptionfrequency_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionordersettype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionordersettype", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionordersettypeId)
                    .HasDatabaseName("meta_prescriptionordersettype_prescriptionordersettype_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionordersettype__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionordersettype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Ordersettype)
                    .HasColumnName("ordersettype")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionordersettypeId)
                    .HasColumnName("prescriptionordersettype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionsource>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionsource", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionsourceId)
                    .HasDatabaseName("meta_prescriptionsource_prescriptionsource_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionsource__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionsource__sequenceid_idx");

                entity.Property(e => e.Context)
                    .HasColumnName("context")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(1000);

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.PrescriptionsourceId)
                    .HasColumnName("prescriptionsource_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaPrescriptionstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_prescriptionstatus", "entitystorematerialised");

                entity.HasIndex(e => e.PrescriptionstatusId)
                    .HasDatabaseName("meta_prescriptionstatus_prescriptionstatus_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_prescriptionstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_prescriptionstatus__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PrescriptionstatusId)
                    .HasColumnName("prescriptionstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaProviderrole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_providerrole", "entitystorematerialised");

                entity.HasIndex(e => e.ProviderroleId)
                    .HasDatabaseName("meta_providerrole_providerrole_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_providerrole__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_providerrole__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.ProviderroleId)
                    .HasColumnName("providerrole_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Role)
                    .HasColumnName("role")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaReviewstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_reviewstatus", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_reviewstatus__recordstatus_idx");

                entity.HasIndex(e => e.ReviewstatusId)
                    .HasDatabaseName("meta_reviewstatus_reviewstatus_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_reviewstatus__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.ReviewstatusId)
                    .HasColumnName("reviewstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_route", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_route__recordstatus_idx");

                entity.HasIndex(e => e.RouteId)
                    .HasDatabaseName("meta_route_route_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_route__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Iscontinuousinfusion).HasColumnName("iscontinuousinfusion");

                entity.Property(e => e.Isintake).HasColumnName("isintake");

                entity.Property(e => e.Istyperequired).HasColumnName("istyperequired");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologycode)
                    .HasColumnName("terminologycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaRouteconfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_routeconfig", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_routeconfig__recordstatus_idx");

                entity.HasIndex(e => e.RouteconfigId)
                    .HasDatabaseName("meta_routeconfig_routeconfig_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_routeconfig__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Key)
                    .HasColumnName("key")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RouteconfigId)
                    .HasColumnName("routeconfig_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaRoutetype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_routetype", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_routetype__recordstatus_idx");

                entity.HasIndex(e => e.RoutetypeId)
                    .HasDatabaseName("meta_routetype_routetype_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_routetype__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Isflush).HasColumnName("isflush");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RouteId)
                    .HasColumnName("route_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);

                entity.Property(e => e.RoutetypeId)
                    .HasColumnName("routetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminologycode)
                    .HasColumnName("terminologycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaRoutetypefluidcapturedevice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_routetypefluidcapturedevice", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_routetypefluidcapturedevice__recordstatus_idx");

                entity.HasIndex(e => e.RoutetypefluidcapturedeviceId)
                    .HasDatabaseName("meta_routetypefluidcapturedev_routetypefluidcapturedevice_i_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_routetypefluidcapturedevice__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FluidcapturedeviceId)
                    .HasColumnName("fluidcapturedevice_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RoutetypeId)
                    .HasColumnName("routetype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RoutetypefluidcapturedeviceId)
                    .HasColumnName("routetypefluidcapturedevice_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaSepsistask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_sepsistask", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_sepsistask__recordstatus_idx");

                entity.HasIndex(e => e.SepsistaskId)
                    .HasDatabaseName("meta_sepsistask_sepsistask_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_sepsistask__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.FormsectionId)
                    .HasColumnName("formsection_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Headertext).HasColumnName("headertext");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SepsistaskId)
                    .HasColumnName("sepsistask_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Subtext).HasColumnName("subtext");

                entity.Property(e => e.Templateversionid)
                    .HasColumnName("templateversionid")
                    .HasColumnType("numeric");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaSynchronouspostlockid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_synchronouspostlockid", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_synchronouspostlockid__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_synchronouspostlockid__sequenceid_idx");

                entity.HasIndex(e => e.SynchronouspostlockidId)
                    .HasDatabaseName("meta_synchronouspostlockid_synchronouspostlockid_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Module)
                    .HasColumnName("module")
                    .HasMaxLength(255);

                entity.Property(e => e.Pglockid).HasColumnName("pglockid");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.SynchronouspostlockidId)
                    .HasColumnName("synchronouspostlockid_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_MetaTerminusform>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_terminusform", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_terminusform__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_terminusform__sequenceid_idx");

                entity.HasIndex(e => e.TerminusformId)
                    .HasDatabaseName("meta_terminusform_terminusform_id_idx");

                entity.Property(e => e.Components).HasColumnName("components");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TerminusformId)
                    .HasColumnName("terminusform_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<baseview_MetaTheatrecontext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_theatrecontext", "baseview");

                entity.Property(e => e.Cliniccode).HasColumnName("cliniccode");

                entity.Property(e => e.Clinictext).HasColumnName("clinictext");
            });

            modelBuilder.Entity<entitystorematerialised_MetaWard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_ward", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Issuspended).HasColumnName("issuspended");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardId)
                    .HasColumnName("ward_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplayshort)
                    .HasColumnName("warddisplayshort")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardstatus).HasColumnName("wardstatus");
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardbay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbay", "entitystorematerialised");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbayId)
                    .HasColumnName("wardbay_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardbaybed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardbaybed", "entitystorematerialised");

                entity.Property(e => e.Acceptfemale).HasColumnName("acceptfemale");

                entity.Property(e => e.Acceptmale).HasColumnName("acceptmale");

                entity.Property(e => e.Acceptmaximumage).HasColumnName("acceptmaximumage");

                entity.Property(e => e.Acceptminimumage).HasColumnName("acceptminimumage");

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaydisplay)
                    .HasColumnName("bedbaydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Bedtype)
                    .HasColumnName("bedtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWardwithoutbed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_wardwithoutbed", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_wardwithoutbed__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_wardwithoutbed__sequenceid_idx");

                entity.HasIndex(e => e.WardwithoutbedId)
                    .HasDatabaseName("meta_wardwithoutbed_wardwithoutbed_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.WardwithoutbedId)
                    .HasColumnName("wardwithoutbed_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWarningscoresystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_warningscoresystem", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_warningscoresystem__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_warningscoresystem__sequenceid_idx");

                entity.HasIndex(e => e.WarningscoresystemId)
                    .HasDatabaseName("meta_warningscoresystem_warningscoresystem_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Warningscorename)
                    .HasColumnName("warningscorename")
                    .HasMaxLength(255);

                entity.Property(e => e.WarningscoresystemId)
                    .HasColumnName("warningscoresystem_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_MetaWeightbearingstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("meta_weightbearingstatus", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("meta_weightbearingstatus__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("meta_weightbearingstatus__sequenceid_idx");

                entity.HasIndex(e => e.WeightbearingstatusId)
                    .HasDatabaseName("meta_weightbearingstatus_weightbearingstatus_id_idx");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statustext)
                    .HasColumnName("statustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Text)
                    .HasColumnName("text")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WeightbearingstatusId)
                    .HasColumnName("weightbearingstatus_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MsTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_test", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MsTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_test2", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_MsTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_test4", "baseview");

                entity.Property(e => e.Age)
                    .HasColumnName("age")
                    .HasColumnType("numeric");

                entity.Property(e => e.AneMsId)
                    .HasColumnName("ane_ms_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_NhsersGetersworklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nhsers_getersworklist", "baseview");

                entity.Property(e => e.Ubrn).HasColumnName("ubrn");
            });

            modelBuilder.Entity<baseview_PatientbannerColumn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_column2", "baseview");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.Intendeddischargedate).HasColumnName("intendeddischargedate");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasColumnType("character varying");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMainallergies>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainallergies", "baseview");

                entity.Property(e => e.Adversedrugreactions).HasColumnName("adversedrugreactions");

                entity.Property(e => e.Adversereactioncount).HasColumnName("adversereactioncount");

                entity.Property(e => e.Allergies).HasColumnName("allergies");

                entity.Property(e => e.Allergycount).HasColumnName("allergycount");

                entity.Property(e => e.Cautioncount).HasColumnName("cautioncount");

                entity.Property(e => e.Cautions).HasColumnName("cautions");

                entity.Property(e => e.Lifethreateningcount).HasColumnName("lifethreateningcount");

                entity.Property(e => e.Noallergiesrecorded).HasColumnName("noallergiesrecorded");

                entity.Property(e => e.Noknownallergies).HasColumnName("noknownallergies");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sensitityintolerances).HasColumnName("sensitityintolerances");

                entity.Property(e => e.Sensitivityintolerancecount).HasColumnName("sensitivityintolerancecount");

                entity.Property(e => e.Unabletoacsertain).HasColumnName("unabletoacsertain");
            });

            modelBuilder.Entity<baseview_PatientbannerMainbadges>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainbadges", "baseview");

                entity.Property(e => e.Badgeimagetag).HasColumnName("badgeimagetag");

                entity.Property(e => e.Badgetext)
                    .HasColumnName("badgetext")
                    .HasColumnType("character varying");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Labeltext)
                    .HasColumnName("labeltext")
                    .HasMaxLength(2000);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Questiontypetext)
                    .HasColumnName("questiontypetext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMainbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainbanner", "baseview");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Allergies).HasColumnName("allergies");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Contactdetails).HasColumnName("contactdetails");

                entity.Property(e => e.Currentlyadmittedto).HasColumnName("currentlyadmittedto");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicgroup)
                    .HasColumnName("ethnicgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstlanguage).HasColumnName("firstlanguage");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMaindemographics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_maindemographics", "baseview");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Ethnicgroup)
                    .HasColumnName("ethnicgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstlanguage).HasColumnName("firstlanguage");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMainencounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainencounter", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Aliasfirstname)
                    .HasColumnName("aliasfirstname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Aliaslastname)
                    .HasColumnName("aliaslastname")
                    .HasColumnType("character varying");

                entity.Property(e => e.Assignedpatientlocationbay)
                    .HasColumnName("assignedpatientlocationbay")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationbed)
                    .HasColumnName("assignedpatientlocationbed")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Warddisplayshort)
                    .HasColumnName("warddisplayshort")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerMainwarnings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_mainwarnings", "baseview");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Warningcount).HasColumnName("warningcount");

                entity.Property(e => e.Warningdetail).HasColumnName("warningdetail");

                entity.Property(e => e.Warningdisplaygroup).HasColumnName("warningdisplaygroup");

                entity.Property(e => e.Warninggroup).HasColumnName("warninggroup");

                entity.Property(e => e.Warningheader).HasColumnName("warningheader");
            });

            modelBuilder.Entity<baseview_PatientbannerModalpatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_modalpatientbanner", "baseview");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonaddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personaddress", "baseview");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Isprimaryaddress).HasColumnName("isprimaryaddress");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonatrisk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personatrisk", "baseview");

                entity.Property(e => e.AssessmentId)
                    .HasColumnName("assessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Completedtaskcnt).HasColumnName("completedtaskcnt");

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Isdraft).HasColumnName("isdraft");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Risk).HasColumnName("risk");

                entity.Property(e => e.Rn).HasColumnName("rn");

                entity.Property(e => e.Sectionname)
                    .HasColumnName("sectionname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersoncontactinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personcontactinfo", "baseview");

                entity.Property(e => e.Contactdetails).HasColumnName("contactdetails");

                entity.Property(e => e.Contactnotes)
                    .HasColumnName("contactnotes")
                    .HasMaxLength(255);

                entity.Property(e => e.Contacttype)
                    .HasColumnName("contacttype")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersoninfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personinfo", "baseview");

                entity.Property(e => e.Born)
                    .HasColumnName("born")
                    .HasColumnType("date");

                entity.Property(e => e.Ethnicgroup)
                    .HasColumnName("ethnicgroup")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstlanguage).HasColumnName("firstlanguage");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PatientbannerPersonobservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("patientbanner_personobservation", "baseview");

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight).HasColumnName("weight");
            });

            modelBuilder.Entity<baseview_PoaAllergylist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_allergylist", "baseview");

                entity.Property(e => e.Allergyconcept).HasColumnName("allergyconcept");

                entity.Property(e => e.AllergyintoleranceId)
                    .HasColumnName("allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergynotes).HasColumnName("allergynotes");

                entity.Property(e => e.Assertedby)
                    .HasColumnName("assertedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Asserteddatetime)
                    .HasColumnName("asserteddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcode)
                    .HasColumnName("causativeagentcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcodesystem)
                    .HasColumnName("causativeagentcodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentdescription)
                    .HasColumnName("causativeagentdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Cliinicialstatusdatetime)
                    .HasColumnName("cliinicialstatusdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Clinicalstatusby)
                    .HasColumnName("clinicalstatusby")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatusvalue)
                    .HasColumnName("clinicalstatusvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.Displaywarning)
                    .HasColumnName("displaywarning")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Lastoccurencedate).HasColumnName("lastoccurencedate");

                entity.Property(e => e.Manifestationnotes).HasColumnName("manifestationnotes");

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaname)
                    .HasColumnName("poaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaonly).HasColumnName("poaonly");

                entity.Property(e => e.Reactionconcepts).HasColumnName("reactionconcepts");

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordeddatetime)
                    .HasColumnName("recordeddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedbydatetime)
                    .HasColumnName("reportedbydatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedbygroup).HasColumnName("reportedbygroup");

                entity.Property(e => e.Reportedbyname)
                    .HasColumnName("reportedbyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaAssessmentlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_assessmentlist", "baseview");

                entity.Property(e => e.Admissiondate).HasColumnName("admissiondate");

                entity.Property(e => e.Bmi)
                    .HasColumnName("bmi")
                    .HasColumnType("numeric");

                entity.Property(e => e.Completedby)
                    .HasColumnName("completedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dischargedate).HasColumnName("dischargedate");

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hdurequired).HasColumnName("hdurequired");

                entity.Property(e => e.Hdurequiredreason).HasColumnName("hdurequiredreason");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("numeric");

                entity.Property(e => e.Heightobservationid)
                    .HasColumnName("heightobservationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Iscompletedallergies).HasColumnName("iscompletedallergies");

                entity.Property(e => e.Iscompletedassessments).HasColumnName("iscompletedassessments");

                entity.Property(e => e.Iscompletedbaselineobservations).HasColumnName("iscompletedbaselineobservations");

                entity.Property(e => e.Iscompletedfamilyhistory).HasColumnName("iscompletedfamilyhistory");

                entity.Property(e => e.Iscompletedgeneral).HasColumnName("iscompletedgeneral");

                entity.Property(e => e.Iscompletedinfectioncontrol).HasColumnName("iscompletedinfectioncontrol");

                entity.Property(e => e.Iscompletedinformationprovided).HasColumnName("iscompletedinformationprovided");

                entity.Property(e => e.Iscompletedmedicationhistory).HasColumnName("iscompletedmedicationhistory");

                entity.Property(e => e.Iscompletednursingassessment).HasColumnName("iscompletednursingassessment");

                entity.Property(e => e.Iscompletedpastmedicalhistory).HasColumnName("iscompletedpastmedicalhistory");

                entity.Property(e => e.Iscompletedphysicalexamination).HasColumnName("iscompletedphysicalexamination");

                entity.Property(e => e.Iscompletedsocialhistory).HasColumnName("iscompletedsocialhistory");

                entity.Property(e => e.Iscompletedsurgicalhistory).HasColumnName("iscompletedsurgicalhistory");

                entity.Property(e => e.Islocked).HasColumnName("islocked");

                entity.Property(e => e.Linkedencounterid)
                    .HasColumnName("linkedencounterid")
                    .HasMaxLength(255);

                entity.Property(e => e.Lockedonadmission).HasColumnName("lockedonadmission");

                entity.Property(e => e.Losdays)
                    .HasColumnName("losdays")
                    .HasColumnType("numeric");

                entity.Property(e => e.Losnights)
                    .HasColumnName("losnights")
                    .HasColumnType("numeric");

                entity.Property(e => e.Obervationeventid)
                    .HasColumnName("obervationeventid")
                    .HasMaxLength(255);

                entity.Property(e => e.Operation).HasColumnName("operation");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poadate).HasColumnName("poadate");

                entity.Property(e => e.Poastatus)
                    .HasColumnName("poastatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Poatype)
                    .HasColumnName("poatype")
                    .HasMaxLength(255);

                entity.Property(e => e.Proaction).HasColumnName("proaction");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Revalidated).HasColumnName("revalidated");

                entity.Property(e => e.Revalidateddate).HasColumnName("revalidateddate");

                entity.Property(e => e.Revalidationtype)
                    .HasColumnName("revalidationtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Reviewedbypharmacist).HasColumnName("reviewedbypharmacist");

                entity.Property(e => e.Reviewedbypharmacistdate).HasColumnName("reviewedbypharmacistdate");

                entity.Property(e => e.Reviewedbypharmacistuser)
                    .HasColumnName("reviewedbypharmacistuser")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Surgeon)
                    .HasColumnName("surgeon")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasks).HasColumnName("tasks");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validatedby)
                    .HasColumnName("validatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("numeric");

                entity.Property(e => e.Weightobservationid)
                    .HasColumnName("weightobservationid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaFormhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_formhistory", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Contexttype)
                    .HasColumnName("contexttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextvalue)
                    .HasColumnName("contextvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.FormbuilderformId)
                    .HasColumnName("formbuilderform_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formbuilderpersonid).HasColumnName("formbuilderpersonid");

                entity.Property(e => e.FormbuilderresponseId)
                    .HasColumnName("formbuilderresponse_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Formcomponents).HasColumnName("formcomponents");

                entity.Property(e => e.Formresponse).HasColumnName("formresponse");

                entity.Property(e => e.Formversion)
                    .HasColumnName("formversion")
                    .HasColumnType("numeric");

                entity.Property(e => e.Generatedguidance)
                    .HasColumnName("generatedguidance")
                    .HasMaxLength(1000);

                entity.Property(e => e.Generatedscore)
                    .HasColumnName("generatedscore")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Responseindex).HasColumnName("responseindex");

                entity.Property(e => e.Responsemeta)
                    .HasColumnName("responsemeta")
                    .HasMaxLength(1000);

                entity.Property(e => e.Responsestatus)
                    .HasColumnName("responsestatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Responseversion)
                    .HasColumnName("responseversion")
                    .HasColumnType("numeric");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_PoaLinkedencounters>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_linkedencounters", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Intendedadmissiondate).HasColumnName("intendedadmissiondate");

                entity.Property(e => e.Intendedward)
                    .HasColumnName("intendedward")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasscode)
                    .HasColumnName("patientclasscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Specialtytext)
                    .HasColumnName("specialtytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Summary).HasColumnName("summary");

                entity.Property(e => e.Tcidate).HasColumnName("tcidate");
            });

            modelBuilder.Entity<baseview_PoaMedicationcodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_medicationcodes", "baseview");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationcodesId)
                    .HasColumnName("poa_medicationcodes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Terminology)
                    .HasColumnName("terminology")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaMedicationingredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_medicationingredients", "baseview");

                entity.Property(e => e.Displayname)
                    .HasColumnName("displayname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isprimaryingredient).HasColumnName("isprimaryingredient");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaMedicationingredientsId)
                    .HasColumnName("poa_medicationingredients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominator)
                    .HasColumnName("strengthdenominator")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthdenominatorunit)
                    .HasColumnName("strengthdenominatorunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Strengthneumerator)
                    .HasColumnName("strengthneumerator")
                    .HasColumnType("numeric");

                entity.Property(e => e.Strengthneumeratorunit)
                    .HasColumnName("strengthneumeratorunit")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaNotecount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_notecount", "baseview");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaPatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_patientbanner", "baseview");

                entity.Property(e => e.Born).HasColumnName("born");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalnumber)
                    .HasColumnName("hospitalnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber).HasColumnName("nhsnumber");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaPoanotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_poanotes", "baseview");

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaNoteId)
                    .HasColumnName("poa_note_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaStaffgroupId)
                    .HasColumnName("poa_staffgroup_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaPoatasks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_poatasks", "baseview");

                entity.Property(e => e.Assignedto)
                    .HasColumnName("assignedto")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Displayorder)
                    .HasColumnName("displayorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaStaffgroupId)
                    .HasColumnName("poa_staffgroup_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaTaskId)
                    .HasColumnName("poa_task_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaTaskstatusId)
                    .HasColumnName("poa_taskstatus_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referredto)
                    .HasColumnName("referredto")
                    .HasColumnType("character varying");

                entity.Property(e => e.Statusorder)
                    .HasColumnName("statusorder")
                    .HasColumnType("numeric");

                entity.Property(e => e.Taskcreatedby)
                    .HasColumnName("taskcreatedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Taskcreateddatetime).HasColumnName("taskcreateddatetime");

                entity.Property(e => e.Taskdetails).HasColumnName("taskdetails");

                entity.Property(e => e.Taskname)
                    .HasColumnName("taskname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaPrescriptionroutes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_prescriptionroutes", "baseview");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isunlicensed).HasColumnName("isunlicensed");

                entity.Property(e => e.PoaMedicationId)
                    .HasColumnName("poa_medication_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionId)
                    .HasColumnName("poa_prescription_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PoaPrescriptionroutesId)
                    .HasColumnName("poa_prescriptionroutes_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Routetype)
                    .HasColumnName("routetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_PoaScheduledoperations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_scheduledoperations", "baseview");

                entity.Property(e => e.Anaesthesiacode)
                    .HasColumnName("anaesthesiacode")
                    .HasMaxLength(255);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationcode)
                    .HasColumnName("operationcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Operationname).HasColumnName("operationname");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ProcedureId)
                    .HasColumnName("procedure_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Proceduredate).HasColumnName("proceduredate");
            });

            modelBuilder.Entity<baseview_PoaTasksnotcompleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_tasksnotcompleted", "baseview");

                entity.Property(e => e.PoaPreopassessmentId)
                    .HasColumnName("poa_preopassessment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Tasks).HasColumnName("tasks");
            });

            modelBuilder.Entity<baseview_PoaYearlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("poa_yearlist", "baseview");

                entity.Property(e => e.Year).HasColumnName("year");
            });

            modelBuilder.Entity<baseview_RbacActions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rbac_actions", "baseview");

                entity.Property(e => e.Actiondescription)
                    .HasColumnName("actiondescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Actionname)
                    .HasColumnName("actionname")
                    .HasMaxLength(255);

                entity.Property(e => e.Isendpoint).HasColumnName("isendpoint");

                entity.Property(e => e.Objecttype)
                    .HasColumnName("objecttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolename)
                    .HasColumnName("rolename")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<baseview_RbacApplications>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rbac_applications", "baseview");

                entity.Property(e => e.Objectname)
                    .HasColumnName("objectname")
                    .HasMaxLength(255);

                entity.Property(e => e.Objecttype)
                    .HasColumnName("objecttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolename)
                    .HasColumnName("rolename")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<baseview_RbacList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rbac_list", "baseview");

                entity.Property(e => e.Objectname)
                    .HasColumnName("objectname")
                    .HasMaxLength(255);

                entity.Property(e => e.Objecttype)
                    .HasColumnName("objecttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolename)
                    .HasColumnName("rolename")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<baseview_RbacModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rbac_module", "baseview");

                entity.Property(e => e.Objectname)
                    .HasColumnName("objectname")
                    .HasMaxLength(255);

                entity.Property(e => e.Objecttype)
                    .HasColumnName("objecttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolename)
                    .HasColumnName("rolename")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<baseview_RbacPersona>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rbac_persona", "baseview");

                entity.Property(e => e.Objectname)
                    .HasColumnName("objectname")
                    .HasMaxLength(255);

                entity.Property(e => e.Objecttype)
                    .HasColumnName("objecttype")
                    .HasMaxLength(255);

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .HasMaxLength(255);

                entity.Property(e => e.Rolename)
                    .HasColumnName("rolename")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<baseview_RtsComments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rts_comments", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Addeddate).HasColumnName("addeddate");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.RtsCommentId)
                    .HasColumnName("rts_comment_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RtsReferralId)
                    .HasColumnName("rts_referral_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_SecambCad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_cad", "baseview");

                entity.Property(e => e.Cadassignedambulancedispatchedtime).HasColumnName("cadassignedambulancedispatchedtime");

                entity.Property(e => e.Cadassignedambulancedispatchedtimeformatted).HasColumnName("cadassignedambulancedispatchedtimeformatted");

                entity.Property(e => e.Cadassignedcallsignletter)
                    .HasColumnName("cadassignedcallsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadassignedcallsignnumber)
                    .HasColumnName("cadassignedcallsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cademergencycalltime).HasColumnName("cademergencycalltime");

                entity.Property(e => e.Cademergencycalltimeformatted).HasColumnName("cademergencycalltimeformatted");

                entity.Property(e => e.Cadincidentlocation)
                    .HasColumnName("cadincidentlocation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadproblemidentifiedtime).HasColumnName("cadproblemidentifiedtime");

                entity.Property(e => e.Cadproblemidentifiedtimeformatted).HasColumnName("cadproblemidentifiedtimeformatted");

                entity.Property(e => e.Cadstationassignedstation)
                    .HasColumnName("cadstationassignedstation")
                    .HasMaxLength(255);

                entity.Property(e => e.Callcategory)
                    .HasColumnName("callcategory")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltodispatch).HasColumnName("calltodispatch");

                entity.Property(e => e.Calltoproblemidentified).HasColumnName("calltoproblemidentified");

                entity.Property(e => e.Problemidentifiedtodispatch).HasColumnName("problemidentifiedtodispatch");

                entity.Property(e => e.SecambCadId)
                    .HasColumnName("secamb_cad_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_SecambEpcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secamb_epcr", "baseview");

                entity.Property(e => e.Atpatient).HasColumnName("atpatient");

                entity.Property(e => e.Atpatientformatted).HasColumnName("atpatientformatted");

                entity.Property(e => e.Atscene).HasColumnName("atscene");

                entity.Property(e => e.Atsceneformatted).HasColumnName("atsceneformatted");

                entity.Property(e => e.Auditby)
                    .HasColumnName("auditby")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcome)
                    .HasColumnName("auditoutcome")
                    .HasMaxLength(255);

                entity.Property(e => e.Auditoutcometext)
                    .HasColumnName("auditoutcometext")
                    .HasMaxLength(255);

                entity.Property(e => e.Cadincidentnumber)
                    .HasColumnName("cadincidentnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignletter)
                    .HasColumnName("callsignletter")
                    .HasMaxLength(255);

                entity.Property(e => e.Callsignnumber)
                    .HasColumnName("callsignnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Calltime).HasColumnName("calltime");

                entity.Property(e => e.Calltimeformatted).HasColumnName("calltimeformatted");

                entity.Property(e => e.Calltimetohandover).HasColumnName("calltimetohandover");

                entity.Property(e => e.Calltoatpatient).HasColumnName("calltoatpatient");

                entity.Property(e => e.Calltoatscene).HasColumnName("calltoatscene");

                entity.Property(e => e.Cardiacaspirincontraindicated).HasColumnName("cardiacaspirincontraindicated");

                entity.Property(e => e.Cardiacaspiringiven).HasColumnName("cardiacaspiringiven");

                entity.Property(e => e.Cardiacclopidogrelcontraindicated).HasColumnName("cardiacclopidogrelcontraindicated");

                entity.Property(e => e.Cardiacclopidogrelgiven).HasColumnName("cardiacclopidogrelgiven");

                entity.Property(e => e.Cardiacdelays).HasColumnName("cardiacdelays");

                entity.Property(e => e.Cardiacecg12lead).HasColumnName("cardiacecg12lead");

                entity.Property(e => e.Cardiacecginterpretation)
                    .HasColumnName("cardiacecginterpretation")
                    .HasMaxLength(255);

                entity.Property(e => e.Cardiacecgmonitored).HasColumnName("cardiacecgmonitored");

                entity.Property(e => e.Cardiacecgwithpcr).HasColumnName("cardiacecgwithpcr");

                entity.Property(e => e.Cardiacgtncontraindicated).HasColumnName("cardiacgtncontraindicated");

                entity.Property(e => e.Cardiacgtngiven).HasColumnName("cardiacgtngiven");

                entity.Property(e => e.Cardiacphtcontraindicated).HasColumnName("cardiacphtcontraindicated");

                entity.Property(e => e.Cardiacphtgiven).HasColumnName("cardiacphtgiven");

                entity.Property(e => e.Cardiacppcipathway).HasColumnName("cardiacppcipathway");

                entity.Property(e => e.Cardiacsuspectedacsnstemi).HasColumnName("cardiacsuspectedacsnstemi");

                entity.Property(e => e.Cardiacsuspectedstemi).HasColumnName("cardiacsuspectedstemi");

                entity.Property(e => e.Cardiactelemetryfailed).HasColumnName("cardiactelemetryfailed");

                entity.Property(e => e.Cardiactelemetrysent).HasColumnName("cardiactelemetrysent");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalcentrecode)
                    .HasColumnName("hospitalcentrecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Hospitalwaitingtime).HasColumnName("hospitalwaitingtime");

                entity.Property(e => e.Hospwarddept)
                    .HasColumnName("hospwarddept")
                    .HasMaxLength(255);

                entity.Property(e => e.Incidentdate).HasColumnName("incidentdate");

                entity.Property(e => e.Incidentdateformatted).HasColumnName("incidentdateformatted");

                entity.Property(e => e.Isammeded).HasColumnName("isammeded");

                entity.Property(e => e.Leftscene).HasColumnName("leftscene");

                entity.Property(e => e.Leftsceneformatted).HasColumnName("leftsceneformatted");

                entity.Property(e => e.Locationofincident)
                    .HasColumnName("locationofincident")
                    .HasMaxLength(255);

                entity.Property(e => e.Manualcadmatch).HasColumnName("manualcadmatch");

                entity.Property(e => e.Mitigatingreason)
                    .HasColumnName("mitigatingreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Mitigatingreasoncomments)
                    .HasColumnName("mitigatingreasoncomments")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patientassessment)
                    .HasColumnName("patientassessment")
                    .HasMaxLength(1000);

                entity.Property(e => e.Patienthandover).HasColumnName("patienthandover");

                entity.Property(e => e.Patienthandoverformatted).HasColumnName("patienthandoverformatted");

                entity.Property(e => e.Pcrformid)
                    .HasColumnName("pcrformid")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Phtchecklistcompleted).HasColumnName("phtchecklistcompleted");

                entity.Property(e => e.Qualitycheckinitials)
                    .HasColumnName("qualitycheckinitials")
                    .HasMaxLength(255);

                entity.Property(e => e.SecambEpcrId)
                    .HasColumnName("secamb_epcr_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Stationbase)
                    .HasColumnName("stationbase")
                    .HasMaxLength(255);

                entity.Property(e => e.Timeathospital).HasColumnName("timeathospital");

                entity.Property(e => e.Timeathospitalformatted).HasColumnName("timeathospitalformatted");

                entity.Property(e => e.Timeonroute).HasColumnName("timeonroute");

                entity.Property(e => e.Timeonscene).HasColumnName("timeonscene");

                entity.Property(e => e.Verbalhandover).HasColumnName("verbalhandover");

                entity.Property(e => e.Verbalhandoverformatted).HasColumnName("verbalhandoverformatted");
            });

            modelBuilder.Entity<baseview_TerminologyAnaesthetics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_anaesthetics", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode).HasColumnName("conceptcode");

                entity.Property(e => e.Conceptname).HasColumnName("conceptname");
            });

            modelBuilder.Entity<baseview_TerminologyApproach>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_approach", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyAttributedefinition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_attributedefinition", "entitystorematerialised");

                entity.HasIndex(e => e.AttributedefinitionId)
                    .HasDatabaseName("terminology_attributedefinition_attributedefinition_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_attributedefinition__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_attributedefinition__sequenceid_idx");

                entity.Property(e => e.AttributedefinitionId)
                    .HasColumnName("attributedefinition_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Attributedefinitionid1).HasColumnName("attributedefinitionid");

                entity.Property(e => e.Attributedescription).HasColumnName("attributedescription");

                entity.Property(e => e.Attributename)
                    .HasColumnName("attributename")
                    .HasMaxLength(255);

                entity.Property(e => e.Attributesyntax).HasColumnName("attributesyntax");

                entity.Property(e => e.Attributetypeconceptid).HasColumnName("attributetypeconceptid");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminologyBodyfluids>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_bodyfluids", "baseview");

                entity.Property(e => e.DomainId)
                    .HasColumnName("domain_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SourceCode)
                    .HasColumnName("source_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptClass)
                    .HasColumnName("target_concept_class")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptCode)
                    .HasColumnName("target_concept_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptId).HasColumnName("target_concept_id");

                entity.Property(e => e.TargetConceptName)
                    .HasColumnName("target_concept_name")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptVocabId)
                    .HasColumnName("target_concept_vocab_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetType).HasColumnName("target_type");

                entity.Property(e => e.VocabularyId)
                    .HasColumnName("vocabulary_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyBodystructure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_bodystructure", "baseview");

                entity.Property(e => e.DomainId)
                    .HasColumnName("domain_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SourceCode)
                    .HasColumnName("source_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptClass)
                    .HasColumnName("target_concept_class")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptCode)
                    .HasColumnName("target_concept_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptId).HasColumnName("target_concept_id");

                entity.Property(e => e.TargetConceptName)
                    .HasColumnName("target_concept_name")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptVocabId)
                    .HasColumnName("target_concept_vocab_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetType).HasColumnName("target_type");

                entity.Property(e => e.VocabularyId)
                    .HasColumnName("vocabulary_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyBodystructureaffectedas>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_bodystructureaffectedas", "baseview");

                entity.Property(e => e.DomainId).HasColumnName("domain_id");

                entity.Property(e => e.SourceCode).HasColumnName("source_code");

                entity.Property(e => e.TargetConceptClass).HasColumnName("target_concept_class");

                entity.Property(e => e.TargetConceptCode).HasColumnName("target_concept_code");

                entity.Property(e => e.TargetConceptId).HasColumnName("target_concept_id");

                entity.Property(e => e.TargetConceptName).HasColumnName("target_concept_name");

                entity.Property(e => e.TargetConceptVocabId).HasColumnName("target_concept_vocab_id");

                entity.Property(e => e.TargetType).HasColumnName("target_type");

                entity.Property(e => e.VocabularyId).HasColumnName("vocabulary_id");
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyConcept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_concept", "entitystorematerialised");

                entity.HasIndex(e => e.ConceptId)
                    .HasDatabaseName("terminology_concept_concept_id_idx");

                entity.HasIndex(e => e.ConceptclassId)
                    .HasDatabaseName("idx_concept_class_id");

                entity.HasIndex(e => e.Conceptcode)
                    .HasDatabaseName("idx_concept_code");

                entity.HasIndex(e => e.DomainId)
                    .HasDatabaseName("idx_concept_domain_id");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_concept__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_concept__sequenceid_idx");

                entity.HasIndex(e => e.VocabularyId)
                    .HasDatabaseName("idx_concept_vocabluary_id");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.ConceptclassId)
                    .HasColumnName("conceptclass_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DomainId)
                    .HasColumnName("domain_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Invalidreason)
                    .HasColumnName("invalidreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Standardconcept)
                    .HasColumnName("standardconcept")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validenddate)
                    .HasColumnName("validenddate")
                    .HasColumnType("date");

                entity.Property(e => e.Validstartdate)
                    .HasColumnName("validstartdate")
                    .HasColumnType("date");

                entity.Property(e => e.VocabularyId)
                    .HasColumnName("vocabulary_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyConceptancestor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_conceptancestor", "entitystorematerialised");

                entity.HasIndex(e => e.Ancestorconceptid)
                    .HasDatabaseName("idx_concept_ancestor_id_1");

                entity.HasIndex(e => e.ConceptancestorId)
                    .HasDatabaseName("terminology_conceptancestor_conceptancestor_id_idx");

                entity.HasIndex(e => e.Descendantconceptid)
                    .HasDatabaseName("idx_concept_ancestor_id_2");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_conceptancestor__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_conceptancestor__sequenceid_idx");

                entity.Property(e => e.Ancestorconceptid).HasColumnName("ancestorconceptid");

                entity.Property(e => e.ConceptancestorId)
                    .HasColumnName("conceptancestor_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Descendantconceptid).HasColumnName("descendantconceptid");

                entity.Property(e => e.Maxlevelsofseparation).HasColumnName("maxlevelsofseparation");

                entity.Property(e => e.Minlevelsofseparation).HasColumnName("minlevelsofseparation");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyConceptclass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_conceptclass", "entitystorematerialised");

                entity.HasIndex(e => e.ConceptclassId)
                    .HasDatabaseName("terminology_conceptclass_conceptclass_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_conceptclass__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_conceptclass__sequenceid_idx");

                entity.Property(e => e.ConceptclassId)
                    .HasColumnName("conceptclass_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptclassconceptid).HasColumnName("conceptclassconceptid");

                entity.Property(e => e.Conceptclassname)
                    .HasColumnName("conceptclassname")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyConceptrelationship>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_conceptrelationship", "entitystorematerialised");

                entity.HasIndex(e => e.Conceptid1)
                    .HasDatabaseName("idx_concept_relationship_id_1");

                entity.HasIndex(e => e.Conceptid2)
                    .HasDatabaseName("idx_concept_relationship_id_2");

                entity.HasIndex(e => e.ConceptrelationshipId)
                    .HasDatabaseName("terminology_conceptrelationship_conceptrelationship_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_conceptrelationship__recordstatus_idx");

                entity.HasIndex(e => e.RelationshipId)
                    .HasDatabaseName("idx_concept_relationship_id_3");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_conceptrelationship__sequenceid_idx");

                entity.Property(e => e.Conceptid1).HasColumnName("conceptid1");

                entity.Property(e => e.Conceptid2).HasColumnName("conceptid2");

                entity.Property(e => e.ConceptrelationshipId)
                    .HasColumnName("conceptrelationship_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Invalidreason)
                    .HasColumnName("invalidreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RelationshipId)
                    .HasColumnName("relationship_id")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validenddate)
                    .HasColumnName("validenddate")
                    .HasColumnType("date");

                entity.Property(e => e.Validstartdate)
                    .HasColumnName("validstartdate")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyConceptsynonym>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_conceptsynonym", "entitystorematerialised");

                entity.HasIndex(e => e.Conceptid)
                    .HasDatabaseName("idx_concept_synonym_id");

                entity.HasIndex(e => e.ConceptsynonymId)
                    .HasDatabaseName("terminology_conceptsynonym_conceptsynonym_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_conceptsynonym__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_conceptsynonym__sequenceid_idx");

                entity.Property(e => e.Conceptid).HasColumnName("conceptid");

                entity.Property(e => e.ConceptsynonymId)
                    .HasColumnName("conceptsynonym_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptsynonymname)
                    .HasColumnName("conceptsynonymname")
                    .HasMaxLength(1000);

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Languageconceptid).HasColumnName("languageconceptid");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminologyDeepclosure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_deepclosure", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyDiagnoses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_diagnoses", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyDomain>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_domain", "entitystorematerialised");

                entity.HasIndex(e => e.DomainId)
                    .HasDatabaseName("terminology_domain_domain_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_domain__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_domain__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.DomainId)
                    .HasColumnName("domain_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Domainconceptid).HasColumnName("domainconceptid");

                entity.Property(e => e.Domainname)
                    .HasColumnName("domainname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminologyDressings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_dressings", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyDrugstrength>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_drugstrength", "entitystorematerialised");

                entity.HasIndex(e => e.Drugconceptid)
                    .HasDatabaseName("idx_drug_strength_id_1");

                entity.HasIndex(e => e.DrugstrengthId)
                    .HasDatabaseName("terminology_drugstrength_drugstrength_id_idx");

                entity.HasIndex(e => e.Ingredientconceptid)
                    .HasDatabaseName("idx_drug_strength_id_2");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_drugstrength__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_drugstrength__sequenceid_idx");

                entity.Property(e => e.Amountunitconceptid).HasColumnName("amountunitconceptid");

                entity.Property(e => e.Amountvalue)
                    .HasColumnName("amountvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Boxsize).HasColumnName("boxsize");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Denominatorunitconceptid).HasColumnName("denominatorunitconceptid");

                entity.Property(e => e.Denominatorvalue)
                    .HasColumnName("denominatorvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Drugconceptid).HasColumnName("drugconceptid");

                entity.Property(e => e.DrugstrengthId)
                    .HasColumnName("drugstrength_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Ingredientconceptid).HasColumnName("ingredientconceptid");

                entity.Property(e => e.Invalidreason)
                    .HasColumnName("invalidreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Numeratorunitconceptid).HasColumnName("numeratorunitconceptid");

                entity.Property(e => e.Numeratorvalue)
                    .HasColumnName("numeratorvalue")
                    .HasColumnType("numeric");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validenddate)
                    .HasColumnName("validenddate")
                    .HasColumnType("date");

                entity.Property(e => e.Validstartdate)
                    .HasColumnName("validstartdate")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<baseview_TerminologyFindings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_findings", "baseview");

                entity.Property(e => e.DomainId)
                    .HasColumnName("domain_id")
                    .HasMaxLength(255);

                entity.Property(e => e.SourceCode)
                    .HasColumnName("source_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptClass)
                    .HasColumnName("target_concept_class")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptCode)
                    .HasColumnName("target_concept_code")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptId).HasColumnName("target_concept_id");

                entity.Property(e => e.TargetConceptName)
                    .HasColumnName("target_concept_name")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetConceptVocabId)
                    .HasColumnName("target_concept_vocab_id")
                    .HasMaxLength(255);

                entity.Property(e => e.TargetType).HasColumnName("target_type");

                entity.Property(e => e.VocabularyId)
                    .HasColumnName("vocabulary_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyIndications>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_indications", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyMarginassessments>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_marginassessments", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode).HasColumnName("conceptcode");

                entity.Property(e => e.Conceptname).HasColumnName("conceptname");
            });

            modelBuilder.Entity<baseview_TerminologyOperationantibiotics>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_operationantibiotics", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode).HasColumnName("conceptcode");

                entity.Property(e => e.Conceptname).HasColumnName("conceptname");
            });

            modelBuilder.Entity<baseview_TerminologyPositioning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_positioning", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyProblems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_problems", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyProcedures>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_procedures", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyRelationship>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_relationship", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_relationship__recordstatus_idx");

                entity.HasIndex(e => e.RelationshipId)
                    .HasDatabaseName("terminology_relationship_relationship_id_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_relationship__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Definesancestry)
                    .HasColumnName("definesancestry")
                    .HasMaxLength(255);

                entity.Property(e => e.Ishierarchical)
                    .HasColumnName("ishierarchical")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RelationshipId)
                    .HasColumnName("relationship_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Relationshipconceptid).HasColumnName("relationshipconceptid");

                entity.Property(e => e.Relationshipname)
                    .HasColumnName("relationshipname")
                    .HasMaxLength(255);

                entity.Property(e => e.Reverserelationshipid)
                    .HasColumnName("reverserelationshipid")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminologySkinclosure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_skinclosure", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologySkinincision>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_skinincision", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologySkinpreparation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_skinpreparation", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode).HasColumnName("conceptcode");

                entity.Property(e => e.Conceptname).HasColumnName("conceptname");
            });

            modelBuilder.Entity<baseview_TerminologySkinrepairedwith>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_skinrepairedwith", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminologySourcetoconceptmap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_sourcetoconceptmap", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_sourcetoconceptmap__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_sourcetoconceptmap__sequenceid_idx");

                entity.HasIndex(e => e.Sourcecode)
                    .HasDatabaseName("idx_source_to_concept_map_code");

                entity.HasIndex(e => e.SourcetoconceptmapId)
                    .HasDatabaseName("terminology_sourcetoconceptmap_sourcetoconceptmap_id_idx");

                entity.HasIndex(e => e.Sourcevocabularyid)
                    .HasDatabaseName("idx_source_to_concept_map_id_1");

                entity.HasIndex(e => e.Targetconceptid)
                    .HasDatabaseName("idx_source_to_concept_map_id_3");

                entity.HasIndex(e => e.Targetvocabularyid)
                    .HasDatabaseName("idx_source_to_concept_map_id_2");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Invalidreason)
                    .HasColumnName("invalidreason")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Sourcecode)
                    .HasColumnName("sourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcecodedescription)
                    .HasColumnName("sourcecodedescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourceconceptid).HasColumnName("sourceconceptid");

                entity.Property(e => e.SourcetoconceptmapId)
                    .HasColumnName("sourcetoconceptmap_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sourcevocabularyid)
                    .HasColumnName("sourcevocabularyid")
                    .HasMaxLength(255);

                entity.Property(e => e.Targetconceptid).HasColumnName("targetconceptid");

                entity.Property(e => e.Targetvocabularyid)
                    .HasColumnName("targetvocabularyid")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Validenddate)
                    .HasColumnName("validenddate")
                    .HasColumnType("date");

                entity.Property(e => e.Validstartdate)
                    .HasColumnName("validstartdate")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<entitystorematerialised_TerminologyVocabulary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_vocabulary", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminology_vocabulary__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminology_vocabulary__sequenceid_idx");

                entity.HasIndex(e => e.VocabularyId)
                    .HasDatabaseName("terminology_vocabulary_vocabulary_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.VocabularyId)
                    .HasColumnName("vocabulary_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Vocabularyconceptid).HasColumnName("vocabularyconceptid");

                entity.Property(e => e.Vocabularyname)
                    .HasColumnName("vocabularyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Vocabularyreference)
                    .HasColumnName("vocabularyreference")
                    .HasMaxLength(255);

                entity.Property(e => e.Vocabularyversion)
                    .HasColumnName("vocabularyversion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyVolumeunit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_volumeunit", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminologyWeightbearingstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminology_weightbearingstatus", "baseview");

                entity.Property(e => e.ConceptId).HasColumnName("concept_id");

                entity.Property(e => e.Conceptcode)
                    .HasColumnName("conceptcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Conceptname)
                    .HasColumnName("conceptname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusAllinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allinpatients", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusAllinpatientswithhighews>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allinpatientswithhighews", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode).HasColumnName("admittingdoctorcode");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Assignedpatientlocationlocationtypecode).HasColumnName("assignedpatientlocationlocationtypecode");

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode).HasColumnName("attendingdoctorcode");

                entity.Property(e => e.Attendingdoctortext).HasColumnName("attendingdoctortext");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay)
                    .HasColumnName("bedbaystatusdisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplayhtml5).HasColumnName("beddisplayhtml5");

                entity.Property(e => e.Beddisplaynohtml).HasColumnName("beddisplaynohtml");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bednumbercolour).HasColumnName("bednumbercolour");

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasMaxLength(255);

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultantlocator).HasColumnName("col_consultantlocator");

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep).HasColumnName("col_juniorbleep");

                entity.Property(e => e.ColNurse).HasColumnName("col_nurse");

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPatientNoimage).HasColumnName("col_patient_noimage");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Fullnamewithhospno).HasColumnName("fullnamewithhospno");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Issamename).HasColumnName("issamename");

                entity.Property(e => e.Lastobservationtime).HasColumnName("lastobservationtime");

                entity.Property(e => e.Lastobservationtimetext).HasColumnName("lastobservationtimetext");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locationwithconsultant)
                    .HasColumnName("locationwithconsultant")
                    .HasColumnType("character varying");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.News2score)
                    .HasColumnName("news2score")
                    .HasColumnType("numeric");

                entity.Property(e => e.Nextobsdueinhours).HasColumnName("nextobsdueinhours");

                entity.Property(e => e.Nextobsdueinminutes).HasColumnName("nextobsdueinminutes");

                entity.Property(e => e.Nextobsduestatus).HasColumnName("nextobsduestatus");

                entity.Property(e => e.Nextobsduetime).HasColumnName("nextobsduetime");

                entity.Property(e => e.Nextobsduetimetext).HasColumnName("nextobsduetimetext");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.Orderbycolumn).HasColumnName("orderbycolumn");

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Referringdoctorid).HasColumnName("referringdoctorid");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcidisplaylist).HasColumnName("tcidisplaylist");

                entity.Property(e => e.Tcidisplaylistwithbr).HasColumnName("tcidisplaylistwithbr");

                entity.Property(e => e.Tcilist).HasColumnName("tcilist");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardcomment1).HasColumnName("wardcomment1");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");

                entity.Property(e => e.Wbbbedstatus)
                    .HasColumnName("wbbbedstatus")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_TerminusAllpatientswithobservationsdueoroverdue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_allpatientswithobservationsdueoroverdue", "baseview");

                entity.Property(e => e.Admitdateformatted).HasColumnName("admitdateformatted");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admitreasontext)
                    .HasColumnName("admitreasontext")
                    .HasMaxLength(255);

                entity.Property(e => e.Admittingdoctorcode).HasColumnName("admittingdoctorcode");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.Assignedpatientlocationlocationtypecode).HasColumnName("assignedpatientlocationlocationtypecode");

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode).HasColumnName("attendingdoctorcode");

                entity.Property(e => e.Attendingdoctortext).HasColumnName("attendingdoctortext");

                entity.Property(e => e.Availability)
                    .HasColumnName("availability")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Bay)
                    .HasColumnName("bay")
                    .HasMaxLength(255);

                entity.Property(e => e.Baycode)
                    .HasColumnName("baycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Baydisplay)
                    .HasColumnName("baydisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedbaystatusdisplay)
                    .HasColumnName("bedbaystatusdisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Bedcode)
                    .HasColumnName("bedcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplay)
                    .HasColumnName("beddisplay")
                    .HasMaxLength(255);

                entity.Property(e => e.Beddisplayhtml5).HasColumnName("beddisplayhtml5");

                entity.Property(e => e.Beddisplaynohtml).HasColumnName("beddisplaynohtml");

                entity.Property(e => e.Bedenabled).HasColumnName("bedenabled");

                entity.Property(e => e.Bednumbercolour).HasColumnName("bednumbercolour");

                entity.Property(e => e.Bedsortstring)
                    .HasColumnName("bedsortstring")
                    .HasMaxLength(255);

                entity.Property(e => e.Bedstatus).HasColumnName("bedstatus");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Col1)
                    .HasColumnName("col1")
                    .HasMaxLength(255);

                entity.Property(e => e.ColActions).HasColumnName("col_actions");

                entity.Property(e => e.ColBadges).HasColumnName("col_badges");

                entity.Property(e => e.ColBed)
                    .HasColumnName("col_bed")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultant)
                    .HasColumnName("col_consultant")
                    .HasMaxLength(255);

                entity.Property(e => e.ColConsultantlocator).HasColumnName("col_consultantlocator");

                entity.Property(e => e.ColDays).HasColumnName("col_days");

                entity.Property(e => e.ColExpecteddischargedate).HasColumnName("col_expecteddischargedate");

                entity.Property(e => e.ColJuniorbleep).HasColumnName("col_juniorbleep");

                entity.Property(e => e.ColNurse).HasColumnName("col_nurse");

                entity.Property(e => e.ColOttext).HasColumnName("col_ottext");

                entity.Property(e => e.ColPatient).HasColumnName("col_patient");

                entity.Property(e => e.ColPatientNoimage).HasColumnName("col_patient_noimage");

                entity.Property(e => e.ColPttext).HasColumnName("col_pttext");

                entity.Property(e => e.ColRadiology).HasColumnName("col_radiology");

                entity.Property(e => e.ColStatus).HasColumnName("col_status");

                entity.Property(e => e.ColTheatredate).HasColumnName("col_theatredate");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofdeath).HasColumnName("dateofdeath");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Dischargedatetime).HasColumnName("dischargedatetime");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatuscode)
                    .HasColumnName("episodestatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Episodestatustext)
                    .HasColumnName("episodestatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Fullnamewithhospno).HasColumnName("fullnamewithhospno");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Intenteddischargedateformatted).HasColumnName("intenteddischargedateformatted");

                entity.Property(e => e.Issamename).HasColumnName("issamename");

                entity.Property(e => e.Lastobservationtime).HasColumnName("lastobservationtime");

                entity.Property(e => e.Lastobservationtimetext).HasColumnName("lastobservationtimetext");

                entity.Property(e => e.Lengthofstay).HasColumnName("lengthofstay");

                entity.Property(e => e.Locationwithconsultant)
                    .HasColumnName("locationwithconsultant")
                    .HasColumnType("character varying");

                entity.Property(e => e.Locatorboardtitleward).HasColumnName("locatorboardtitleward");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.News2score)
                    .HasColumnName("news2score")
                    .HasColumnType("numeric");

                entity.Property(e => e.Nextobsdueinhours).HasColumnName("nextobsdueinhours");

                entity.Property(e => e.Nextobsdueinminutes).HasColumnName("nextobsdueinminutes");

                entity.Property(e => e.Nextobsduestatus).HasColumnName("nextobsduestatus");

                entity.Property(e => e.Nextobsduetime).HasColumnName("nextobsduetime");

                entity.Property(e => e.Nextobsduetimetext).HasColumnName("nextobsduetimetext");

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.Observationfrequency)
                    .HasColumnName("observationfrequency")
                    .HasColumnType("numeric");

                entity.Property(e => e.Orderbycolumn).HasColumnName("orderbycolumn");

                entity.Property(e => e.OtFlag).HasColumnName("ot_flag");

                entity.Property(e => e.Patientbanner).HasColumnName("patientbanner");

                entity.Property(e => e.Patientclasstext)
                    .HasColumnName("patientclasstext")
                    .HasMaxLength(255);

                entity.Property(e => e.Patienttypecode)
                    .HasColumnName("patienttypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.PtFlag).HasColumnName("pt_flag");

                entity.Property(e => e.Referringdoctorid).HasColumnName("referringdoctorid");

                entity.Property(e => e.Scheduledfortheatrebadge).HasColumnName("scheduledfortheatrebadge");

                entity.Property(e => e.Statuscode)
                    .HasColumnName("statuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Statusdescription)
                    .HasColumnName("statusdescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Tcidisplaylist).HasColumnName("tcidisplaylist");

                entity.Property(e => e.Tcidisplaylistwithbr).HasColumnName("tcidisplaylistwithbr");

                entity.Property(e => e.Tcilist).HasColumnName("tcilist");

                entity.Property(e => e.TeamFlag).HasColumnName("team_flag");

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);

                entity.Property(e => e.TtaFlag).HasColumnName("tta_flag");

                entity.Property(e => e.Visitnumber)
                    .HasColumnName("visitnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.VteFlag).HasColumnName("vte_flag");

                entity.Property(e => e.Ward)
                    .HasColumnName("ward")
                    .HasMaxLength(255);

                entity.Property(e => e.WardComments).HasColumnName("ward_comments");

                entity.Property(e => e.Wardbay).HasColumnName("wardbay");

                entity.Property(e => e.Wardbaybed).HasColumnName("wardbaybed");

                entity.Property(e => e.WardbaybedId)
                    .HasColumnName("wardbaybed_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Wardcode)
                    .HasColumnName("wardcode")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardcomment1).HasColumnName("wardcomment1");

                entity.Property(e => e.Warddisplay)
                    .HasColumnName("warddisplay")
                    .HasColumnType("character varying");

                entity.Property(e => e.Wardinformationdetailed).HasColumnName("wardinformationdetailed");

                entity.Property(e => e.Wardinformationformatted).HasColumnName("wardinformationformatted");

                entity.Property(e => e.Wardinformationsimple).HasColumnName("wardinformationsimple");

                entity.Property(e => e.Wardnamelarge).HasColumnName("wardnamelarge");

                entity.Property(e => e.Wbbbedstatus)
                    .HasColumnName("wbbbedstatus")
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<baseview_TerminusBplastrecorded>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_bplastrecorded", "baseview");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Rownum).HasColumnName("rownum");

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusJustt123>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_justt123", "entitystorematerialised");

                entity.HasIndex(e => e.Justt123Id)
                    .HasDatabaseName("terminus_justt123_justt123_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminus_justt123__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminus_justt123__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Justt123Id)
                    .HasColumnName("justt123_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminusMycurrentinpatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_mycurrentinpatients", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusMypatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_mypatients", "entitystorematerialised");

                entity.HasIndex(e => e.MypatientsId)
                    .HasDatabaseName("terminus_mypatients_mypatients_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminus_mypatients__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminus_mypatients__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.MypatientsId)
                    .HasColumnName("mypatients_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientbanner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientbanner", "baseview");

                entity.Property(e => e.Ageinyears).HasColumnName("ageinyears");

                entity.Property(e => e.Agetext).HasColumnName("agetext");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(255);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(255);

                entity.Property(e => e.Countystateprovince)
                    .HasColumnName("countystateprovince")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dateofbirthformatted).HasColumnName("dateofbirthformatted");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Line1)
                    .HasColumnName("line1")
                    .HasMaxLength(255);

                entity.Property(e => e.Line2)
                    .HasColumnName("line2")
                    .HasMaxLength(255);

                entity.Property(e => e.Line3)
                    .HasColumnName("line3")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Postcodezip)
                    .HasColumnName("postcodezip")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusPatientlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlist", "entitystorematerialised");

                entity.HasIndex(e => e.PatientlistId)
                    .HasDatabaseName("terminus_patientlist_patientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminus_patientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminus_patientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlistname)
                    .HasColumnName("patientlistname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminusPatientlist1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlist", "baseview");

                entity.Property(e => e.Counts).HasColumnName("counts");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Patientlistname)
                    .HasColumnName("patientlistname")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientlists>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientlists", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPatientsearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_patientsearch", "baseview");

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Empi)
                    .HasColumnName("empi")
                    .HasMaxLength(255);

                entity.Property(e => e.Empitypecode)
                    .HasColumnName("empitypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasColumnType("citext");

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasColumnType("citext");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasColumnType("citext");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasColumnType("citext");

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrntypecode)
                    .HasColumnName("mrntypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusPersonallergylist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personallergylist", "baseview");

                entity.Property(e => e.Allergyconcept).HasColumnName("allergyconcept");

                entity.Property(e => e.AllergyintoleranceId)
                    .HasColumnName("allergyintolerance_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Allergynotes).HasColumnName("allergynotes");

                entity.Property(e => e.Assertedby)
                    .HasColumnName("assertedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Asserteddatetime)
                    .HasColumnName("asserteddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcode)
                    .HasColumnName("causativeagentcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentcodesystem)
                    .HasColumnName("causativeagentcodesystem")
                    .HasMaxLength(255);

                entity.Property(e => e.Causativeagentdescription)
                    .HasColumnName("causativeagentdescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.Cliinicialstatusdatetime)
                    .HasColumnName("cliinicialstatusdatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Clinicalstatusby)
                    .HasColumnName("clinicalstatusby")
                    .HasMaxLength(255);

                entity.Property(e => e.Clinicalstatusvalue)
                    .HasColumnName("clinicalstatusvalue")
                    .HasMaxLength(255);

                entity.Property(e => e.Criticality)
                    .HasColumnName("criticality")
                    .HasMaxLength(255);

                entity.Property(e => e.Displaywarning)
                    .HasColumnName("displaywarning")
                    .HasMaxLength(1000);

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Enddate).HasColumnName("enddate");

                entity.Property(e => e.Lastoccurencedate).HasColumnName("lastoccurencedate");

                entity.Property(e => e.Manifestationnotes).HasColumnName("manifestationnotes");

                entity.Property(e => e.Onsetdate).HasColumnName("onsetdate");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaname)
                    .HasColumnName("poaname")
                    .HasMaxLength(255);

                entity.Property(e => e.Poaonly).HasColumnName("poaonly");

                entity.Property(e => e.Reactionconcepts).HasColumnName("reactionconcepts");

                entity.Property(e => e.Reactiontext).HasColumnName("reactiontext");

                entity.Property(e => e.Recordedby)
                    .HasColumnName("recordedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordeddatetime)
                    .HasColumnName("recordeddatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedbydatetime)
                    .HasColumnName("reportedbydatetime")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Reportedbygroup).HasColumnName("reportedbygroup");

                entity.Property(e => e.Reportedbyname)
                    .HasColumnName("reportedbyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Verificationstatus)
                    .HasColumnName("verificationstatus")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusPersonpatientlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personpatientlist", "entitystorematerialised");

                entity.HasIndex(e => e.PersonpatientlistId)
                    .HasDatabaseName("terminus_personpatientlist_personpatientlist_id_idx");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminus_personpatientlist__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminus_personpatientlist__sequenceid_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.PatientlistId)
                    .HasColumnName("patientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonpatientlistId)
                    .HasColumnName("personpatientlist_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TerminusPersonswithids>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_personswithids", "baseview");

                entity.Property(e => e.Ageyears).HasColumnName("ageyears");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicity)
                    .HasColumnName("ethnicity")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatus)
                    .HasColumnName("maritalstatus")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.Mrn)
                    .HasColumnName("mrn")
                    .HasMaxLength(255);

                entity.Property(e => e.Nhsnumber)
                    .HasColumnName("nhsnumber")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Religion)
                    .HasColumnName("religion")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSepsisinpatient>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_sepsisinpatient", "baseview");

                entity.Property(e => e.Admitdatetime).HasColumnName("admitdatetime");

                entity.Property(e => e.Admittingdoctorcode)
                    .HasColumnName("admittingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypecode)
                    .HasColumnName("assignedpatientlocationlocationtypecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationlocationtypetext)
                    .HasColumnName("assignedpatientlocationlocationtypetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Assignedpatientlocationpointofcare)
                    .HasColumnName("assignedpatientlocationpointofcare")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctorcode)
                    .HasColumnName("attendingdoctorcode")
                    .HasMaxLength(255);

                entity.Property(e => e.Attendingdoctortext)
                    .HasColumnName("attendingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Badge).HasColumnName("badge");

                entity.Property(e => e.Clinicalunit)
                    .HasColumnName("clinicalunit")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctorid)
                    .HasColumnName("consultingdoctorid")
                    .HasMaxLength(255);

                entity.Property(e => e.Consultingdoctortext)
                    .HasColumnName("consultingdoctortext")
                    .HasMaxLength(255);

                entity.Property(e => e.Dateofbirth).HasColumnName("dateofbirth");

                entity.Property(e => e.Dynamiccss).HasColumnName("dynamiccss");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Referringdoctorid)
                    .HasColumnName("referringdoctorid")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservations", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservationsbyevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservationsbyevent", "baseview");

                entity.Property(e => e.Addedby)
                    .HasColumnName("addedby")
                    .HasMaxLength(255);

                entity.Property(e => e.Clvl)
                    .HasColumnName("clvl")
                    .HasMaxLength(255);

                entity.Property(e => e.ClvlSymbol)
                    .HasColumnName("clvl_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Dbp)
                    .HasColumnName("dbp")
                    .HasMaxLength(255);

                entity.Property(e => e.DbpSymbol)
                    .HasColumnName("dbp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.HeightSymbol)
                    .HasColumnName("height_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Hr)
                    .HasColumnName("hr")
                    .HasMaxLength(255);

                entity.Property(e => e.HrSymbol)
                    .HasColumnName("hr_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.RespSymbol)
                    .HasColumnName("resp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Sbp)
                    .HasColumnName("sbp")
                    .HasMaxLength(255);

                entity.Property(e => e.SbpSymbol)
                    .HasColumnName("sbp_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2Symbol)
                    .HasColumnName("spo2_symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);

                entity.Property(e => e.WeightSymbol)
                    .HasColumnName("weight_symbol")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TerminusSpvobservationsbyeventchart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_spvobservationsbyeventchart", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bpd)
                    .HasColumnName("bpd")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps)
                    .HasColumnName("bps")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<entitystorematerialised_TerminusTestterm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("terminus_testterm", "entitystorematerialised");

                entity.HasIndex(e => e.Recordstatus)
                    .HasDatabaseName("terminus_testterm__recordstatus_idx");

                entity.HasIndex(e => e.Sequenceid)
                    .HasDatabaseName("terminus_testterm__sequenceid_idx");

                entity.HasIndex(e => e.TesttermId)
                    .HasDatabaseName("terminus_testterm_testterm_id_idx");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.FormIdTenant)
                    .HasColumnName("form_id__tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.TesttermId)
                    .HasColumnName("testterm_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");
            });

            modelBuilder.Entity<baseview_TestJsont>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_jsont", "baseview");

                entity.Property(e => e.Colspec)
                    .HasColumnName("colspec")
                    .HasColumnType("json");
            });

            modelBuilder.Entity<entitystorematerialised_TestObservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_observation", "entitystorematerialised");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Device)
                    .HasColumnName("device")
                    .HasMaxLength(255);

                entity.Property(e => e.Eventcorrelationid)
                    .HasColumnName("eventcorrelationid")
                    .HasMaxLength(255);

                entity.Property(e => e.Hasbeenammended).HasColumnName("hasbeenammended");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationId)
                    .HasColumnName("observation_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypeId)
                    .HasColumnName("observationtype_id")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationtypemeasurementId)
                    .HasColumnName("observationtypemeasurement_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Route)
                    .HasColumnName("route")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(255);

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timerecorded).HasColumnName("timerecorded");

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Units)
                    .HasColumnName("units")
                    .HasMaxLength(255);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TestObshcart3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_obshcart3", "baseview");

                entity.Property(e => e.Acvpu)
                    .HasColumnName("acvpu")
                    .HasMaxLength(255);

                entity.Property(e => e.Bpd)
                    .HasColumnName("bpd")
                    .HasMaxLength(255);

                entity.Property(e => e.Bps)
                    .HasColumnName("bps")
                    .HasMaxLength(255);

                entity.Property(e => e.Datefinished).HasColumnName("datefinished");

                entity.Property(e => e.Datestarted).HasColumnName("datestarted");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasMaxLength(255);

                entity.Property(e => e.ObservationeventId)
                    .HasColumnName("observationevent_id")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Pulse)
                    .HasColumnName("pulse")
                    .HasMaxLength(255);

                entity.Property(e => e.Resp)
                    .HasColumnName("resp")
                    .HasMaxLength(255);

                entity.Property(e => e.Spo2)
                    .HasColumnName("spo2")
                    .HasMaxLength(255);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(255);

                entity.Property(e => e.Tempunits)
                    .HasColumnName("tempunits")
                    .HasMaxLength(255);

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_TestTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_test", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofbirthts)
                    .HasColumnName("dateofbirthts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Dateofdeath)
                    .HasColumnName("dateofdeath")
                    .HasColumnType("date");

                entity.Property(e => e.Dateofdeathts)
                    .HasColumnName("dateofdeathts")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.Deathindicator).HasColumnName("deathindicator");

                entity.Property(e => e.Ethnicitycode)
                    .HasColumnName("ethnicitycode")
                    .HasMaxLength(255);

                entity.Property(e => e.Ethnicitytext)
                    .HasColumnName("ethnicitytext")
                    .HasMaxLength(255);

                entity.Property(e => e.Familyname)
                    .HasColumnName("familyname")
                    .HasMaxLength(255);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(255);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendercode)
                    .HasColumnName("gendercode")
                    .HasMaxLength(255);

                entity.Property(e => e.Gendertext)
                    .HasColumnName("gendertext")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatuscode)
                    .HasColumnName("maritalstatuscode")
                    .HasMaxLength(255);

                entity.Property(e => e.Maritalstatustext)
                    .HasColumnName("maritalstatustext")
                    .HasMaxLength(255);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(255);

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Preferredname)
                    .HasColumnName("preferredname")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.Religioncode)
                    .HasColumnName("religioncode")
                    .HasMaxLength(255);

                entity.Property(e => e.Religiontext)
                    .HasColumnName("religiontext")
                    .HasMaxLength(255);

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.Titlecode)
                    .HasColumnName("titlecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Titletext)
                    .HasColumnName("titletext")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_WgTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wg_test", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_WgTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wg_test2", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<baseview_WgTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wg_test3", "baseview");

                entity.Property(e => e.Contextkey)
                    .HasColumnName("_contextkey")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdby)
                    .HasColumnName("_createdby")
                    .HasMaxLength(255);

                entity.Property(e => e.Createddate).HasColumnName("_createddate");

                entity.Property(e => e.Createdmessageid)
                    .HasColumnName("_createdmessageid")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdsource)
                    .HasColumnName("_createdsource")
                    .HasMaxLength(255);

                entity.Property(e => e.Createdtimestamp)
                    .HasColumnName("_createdtimestamp")
                    .HasColumnType("timestamp with time zone");

                entity.Property(e => e.EncounterId)
                    .HasColumnName("encounter_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Recordstatus).HasColumnName("_recordstatus");

                entity.Property(e => e.RowId)
                    .HasColumnName("_row_id")
                    .HasMaxLength(255);

                entity.Property(e => e.Sentdate).HasColumnName("sentdate");

                entity.Property(e => e.Sequenceid).HasColumnName("_sequenceid");

                entity.Property(e => e.Tenant)
                    .HasColumnName("_tenant")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezonename)
                    .HasColumnName("_timezonename")
                    .HasMaxLength(255);

                entity.Property(e => e.Timezoneoffset).HasColumnName("_timezoneoffset");

                entity.Property(e => e.WgTest123Id)
                    .HasColumnName("wg_test123_id")
                    .HasMaxLength(255);
            });

            OnModelCreatingPartial(modelBuilder);
        }

    }
}
